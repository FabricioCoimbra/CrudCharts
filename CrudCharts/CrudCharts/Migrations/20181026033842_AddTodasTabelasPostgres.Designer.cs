// <auto-generated />
using System;
using CrudCharts.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CrudCharts.Migrations
{
    [DbContext(typeof(TreinamentoContext))]
    [Migration("20181026033842_AddTodasTabelasPostgres")]
    partial class AddTodasTabelasPostgres
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-preview1-35029")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CrudCharts.Models.Acesso", b =>
                {
                    b.Property<string>("NmPrograma")
                        .HasColumnName("nm_programa")
                        .HasMaxLength(200);

                    b.Property<string>("NmLogin")
                        .HasColumnName("nm_login")
                        .HasMaxLength(15);

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("NmPrograma", "NmLogin", "CdFilial");

                    b.ToTable("acesso");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcao", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdAcesso")
                        .HasColumnName("cd_acesso")
                        .HasMaxLength(10);

                    b.Property<int?>("CdConexao")
                        .HasColumnName("cd_conexao");

                    b.Property<string>("FlAlterar")
                        .HasColumnName("fl_alterar")
                        .HasMaxLength(1);

                    b.Property<string>("FlClassificacao")
                        .IsRequired()
                        .HasColumnName("fl_classificacao")
                        .HasMaxLength(1);

                    b.Property<string>("FlExcluir")
                        .HasColumnName("fl_excluir")
                        .HasMaxLength(1);

                    b.Property<string>("FlInserir")
                        .HasColumnName("fl_inserir")
                        .HasMaxLength(1);

                    b.Property<string>("FlPermitirFilial")
                        .HasColumnName("fl_permitir_filial")
                        .HasMaxLength(1);

                    b.Property<string>("NmAcao")
                        .IsRequired()
                        .HasColumnName("nm_acao")
                        .HasMaxLength(200);

                    b.Property<string>("NmProcedimento")
                        .IsRequired()
                        .HasColumnName("nm_procedimento")
                        .HasMaxLength(200);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<int?>("TpEmpresa")
                        .HasColumnName("tp_empresa");

                    b.HasKey("IdGeral");

                    b.ToTable("acesso_acao");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoPerfil", b =>
                {
                    b.Property<int>("CdPerfilAcesso")
                        .HasColumnName("cd_perfil_acesso");

                    b.Property<long>("IdAcessoAcao")
                        .HasColumnName("id_acesso_acao");

                    b.Property<string>("FlAcesso")
                        .IsRequired()
                        .HasColumnName("fl_acesso")
                        .HasMaxLength(1);

                    b.Property<string>("FlEditar")
                        .IsRequired()
                        .HasColumnName("fl_editar")
                        .HasMaxLength(1);

                    b.Property<string>("FlExcluir")
                        .IsRequired()
                        .HasColumnName("fl_excluir")
                        .HasMaxLength(1);

                    b.Property<string>("FlInserir")
                        .IsRequired()
                        .HasColumnName("fl_inserir")
                        .HasMaxLength(1);

                    b.HasKey("CdPerfilAcesso", "IdAcessoAcao");

                    b.HasIndex("IdAcessoAcao");

                    b.ToTable("acesso_acao_perfil");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelatorio", b =>
                {
                    b.Property<long>("IdAcao")
                        .HasColumnName("id_acao");

                    b.Property<string>("PathModelo")
                        .HasColumnName("path_modelo")
                        .HasMaxLength(100);

                    b.Property<string>("SqlRel")
                        .HasColumnName("sql_rel");

                    b.Property<int>("Tipo")
                        .HasColumnName("tipo");

                    b.HasKey("IdAcao");

                    b.ToTable("acesso_acao_relatorio");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelCampo", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("Esquerda")
                        .HasColumnName("esquerda");

                    b.Property<char?>("FlGrafico")
                        .HasColumnName("fl_grafico");

                    b.Property<char>("FlGrid")
                        .HasColumnName("fl_grid");

                    b.Property<char?>("FlTipoSumarizacao")
                        .HasColumnName("fl_tipo_sumarizacao");

                    b.Property<long>("IdAcao")
                        .HasColumnName("id_acao");

                    b.Property<string>("NmCampo")
                        .IsRequired()
                        .HasColumnName("nm_campo")
                        .HasMaxLength(30);

                    b.Property<string>("NmTituloCampo")
                        .IsRequired()
                        .HasColumnName("nm_titulo_campo")
                        .HasMaxLength(30);

                    b.Property<long>("NrOrdem")
                        .HasColumnName("nr_ordem");

                    b.Property<string>("TipoCampo")
                        .HasColumnName("tipo_campo")
                        .HasMaxLength(20);

                    b.Property<int?>("Topo")
                        .HasColumnName("topo");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdAcao");

                    b.ToTable("acesso_acao_rel_campo");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelFiltro", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<int?>("CdConsulta")
                        .HasColumnName("cd_consulta");

                    b.Property<string>("Comentario")
                        .HasColumnName("comentario")
                        .HasMaxLength(40);

                    b.Property<string>("FlSelecaoMultipla")
                        .HasColumnName("fl_selecao_multipla")
                        .HasMaxLength(1);

                    b.Property<long>("IdAcao")
                        .HasColumnName("id_acao");

                    b.Property<string>("Multivalor")
                        .HasColumnName("multivalor");

                    b.Property<string>("NmCampo")
                        .HasColumnName("nm_campo")
                        .HasMaxLength(40);

                    b.Property<string>("NmCampoRetorno")
                        .HasColumnName("nm_campo_retorno")
                        .HasMaxLength(40);

                    b.Property<string>("NmFiltro")
                        .IsRequired()
                        .HasColumnName("nm_filtro")
                        .HasMaxLength(40);

                    b.Property<string>("NmParametroSql")
                        .HasColumnName("nm_parametro_sql")
                        .HasMaxLength(40);

                    b.Property<int>("NrOrdem")
                        .HasColumnName("nr_ordem");

                    b.Property<string>("RotuloFiltro")
                        .HasColumnName("rotulo_filtro")
                        .HasMaxLength(40);

                    b.Property<string>("TipoDado")
                        .HasColumnName("tipo_dado")
                        .HasMaxLength(40);

                    b.Property<string>("TipoDadoParametro")
                        .HasColumnName("tipo_dado_parametro")
                        .HasMaxLength(40);

                    b.Property<string>("ValorPadrao")
                        .HasColumnName("valor_padrao")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("IdAcao", "NrOrdem")
                        .IsUnique()
                        .HasName("unq_acesso_acao_rel_filtro_orde");

                    b.ToTable("acesso_acao_rel_filtro");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoUsuario", b =>
                {
                    b.Property<int>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<long>("IdAcessoAcao")
                        .HasColumnName("id_acesso_acao");

                    b.Property<string>("FlAcesso")
                        .IsRequired()
                        .HasColumnName("fl_acesso")
                        .HasMaxLength(1);

                    b.Property<string>("FlEditar")
                        .IsRequired()
                        .HasColumnName("fl_editar")
                        .HasMaxLength(1);

                    b.Property<string>("FlExcluir")
                        .IsRequired()
                        .HasColumnName("fl_excluir")
                        .HasMaxLength(1);

                    b.Property<string>("FlInserir")
                        .IsRequired()
                        .HasColumnName("fl_inserir")
                        .HasMaxLength(1);

                    b.HasKey("CdUsuario", "IdAcessoAcao");

                    b.HasIndex("IdAcessoAcao");

                    b.ToTable("acesso_acao_usuario");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoMenu", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<long?>("IdMenuPai")
                        .HasColumnName("id_menu_pai");

                    b.Property<string>("NmTeclaAtalho")
                        .HasColumnName("nm_tecla_atalho")
                        .HasMaxLength(30);

                    b.Property<string>("NmTitulo")
                        .IsRequired()
                        .HasColumnName("nm_titulo")
                        .HasMaxLength(200);

                    b.Property<int>("NrOrdem")
                        .HasColumnName("nr_ordem");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdMenuPai");

                    b.ToTable("acesso_menu");
                });

            modelBuilder.Entity("CrudCharts.Models.Administradora", b =>
                {
                    b.Property<int>("CdAdministradora")
                        .HasColumnName("cd_administradora");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<int?>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj")
                        .HasMaxLength(18);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(20);

                    b.Property<int?>("ContaCaixa")
                        .HasColumnName("conta_caixa");

                    b.Property<int?>("DiasPagamentoAdm")
                        .HasColumnName("dias_pagamento_adm");

                    b.Property<int?>("DiasPagamentoLoja")
                        .HasColumnName("dias_pagamento_loja");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(80);

                    b.Property<int?>("IdBandeira")
                        .HasColumnName("id_bandeira");

                    b.Property<string>("Inscricao")
                        .HasColumnName("inscricao")
                        .HasMaxLength(18);

                    b.Property<string>("NmAdministradora")
                        .IsRequired()
                        .HasColumnName("nm_administradora")
                        .HasMaxLength(80);

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PcCobrancaAdm")
                        .HasColumnName("pc_cobranca_adm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcCobrancaDebito")
                        .HasColumnName("pc_cobranca_debito")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdAdministradora");

                    b.HasIndex("ContaCaixa");

                    b.HasIndex("IdBandeira");

                    b.ToTable("administradora");
                });

            modelBuilder.Entity("CrudCharts.Models.AdministradoraBandeira", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdBandeira")
                        .HasColumnName("cd_bandeira")
                        .HasMaxLength(3);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.HasKey("IdGeral");

                    b.ToTable("administradora_bandeira");
                });

            modelBuilder.Entity("CrudCharts.Models.AdministradoraTaxas", b =>
                {
                    b.Property<int>("CdAdministradora")
                        .HasColumnName("cd_administradora");

                    b.Property<int>("QtParcelas")
                        .HasColumnName("qt_parcelas");

                    b.Property<decimal?>("PcCobrancaLoja")
                        .HasColumnName("pc_cobranca_loja")
                        .HasColumnType("numeric(9,3)");

                    b.HasKey("CdAdministradora", "QtParcelas");

                    b.ToTable("administradora_taxas");
                });

            modelBuilder.Entity("CrudCharts.Models.Agenda", b =>
                {
                    b.Property<int>("CdEvento")
                        .HasColumnName("cd_evento");

                    b.Property<int?>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.Property<DateTime>("DtHrEvento")
                        .HasColumnName("dt_hr_evento");

                    b.Property<string>("NmEvento")
                        .IsRequired()
                        .HasColumnName("nm_evento");

                    b.HasKey("CdEvento");

                    b.HasIndex("CdSituacao");

                    b.HasIndex("DtHrEvento")
                        .HasName("idx_agenda_data");

                    b.ToTable("agenda");
                });

            modelBuilder.Entity("CrudCharts.Models.AgendaSituacao", b =>
                {
                    b.Property<int>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmSituacao")
                        .IsRequired()
                        .HasColumnName("nm_situacao")
                        .HasMaxLength(30);

                    b.HasKey("CdSituacao");

                    b.HasIndex("NmSituacao")
                        .HasName("idx_agenda_situacao_nome");

                    b.ToTable("agenda_situacao");
                });

            modelBuilder.Entity("CrudCharts.Models.Agronomo", b =>
                {
                    b.Property<int>("CdAgronomo")
                        .HasColumnName("cd_agronomo");

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasMaxLength(18);

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(25);

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdCrea")
                        .HasColumnName("cd_crea");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(10);

                    b.Property<string>("CreaRegistro")
                        .HasColumnName("crea_registro")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(40);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(40);

                    b.Property<string>("NmAgronomo")
                        .HasColumnName("nm_agronomo")
                        .HasMaxLength(34);

                    b.Property<int?>("Numero")
                        .HasColumnName("numero");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasMaxLength(20);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(20);

                    b.HasKey("CdAgronomo", "Cpf", "CdFilial");

                    b.HasIndex("CdCidade");

                    b.ToTable("agronomo");
                });

            modelBuilder.Entity("CrudCharts.Models.AlteracaoCadItem", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdItem")
                        .IsRequired()
                        .HasColumnName("cd_item")
                        .HasMaxLength(15);

                    b.Property<string>("ContAnt")
                        .HasColumnName("cont_ant")
                        .HasMaxLength(120);

                    b.Property<DateTime>("DtAlt")
                        .HasColumnName("dt_alt")
                        .HasColumnType("date");

                    b.Property<int>("NrCampo")
                        .HasColumnName("nr_campo");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdItem")
                        .HasName("alteracao_cad_item_idx1");

                    b.ToTable("alteracao_cad_item");
                });

            modelBuilder.Entity("CrudCharts.Models.AlteracaoCadParticipante", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdParticipante")
                        .HasColumnName("cd_participante");

                    b.Property<string>("ContAnt")
                        .HasColumnName("cont_ant")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtAlt")
                        .HasColumnName("dt_alt")
                        .HasColumnType("date");

                    b.Property<int?>("NrCampo")
                        .HasColumnName("nr_campo");

                    b.Property<string>("TpParticipante")
                        .HasColumnName("tp_participante")
                        .HasMaxLength(1);

                    b.HasKey("IdGeral");

                    b.ToTable("alteracao_cad_participante");
                });

            modelBuilder.Entity("CrudCharts.Models.Anp", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasMaxLength(5);

                    b.Property<string>("CdAnp")
                        .IsRequired()
                        .HasColumnName("cd_anp")
                        .HasMaxLength(9);

                    b.Property<string>("Codif")
                        .HasColumnName("codif")
                        .HasMaxLength(21);

                    b.Property<string>("DescricaoAnp")
                        .HasColumnName("descricao_anp")
                        .HasMaxLength(95);

                    b.Property<decimal?>("PcGasImportado")
                        .HasColumnName("pc_gas_importado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcGasNacional")
                        .HasColumnName("pc_gas_nacional")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcGlp")
                        .HasColumnName("pc_glp")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPartida")
                        .HasColumnName("vl_partida")
                        .HasColumnType("numeric(15,4)");

                    b.HasKey("Codigo");

                    b.ToTable("anp");
                });

            modelBuilder.Entity("CrudCharts.Models.Anvisa", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasMaxLength(5);

                    b.Property<string>("CdAnvisa")
                        .IsRequired()
                        .HasColumnName("cd_anvisa")
                        .HasMaxLength(9);

                    b.Property<string>("DescricaoAnvisa")
                        .HasColumnName("descricao_anvisa");

                    b.Property<decimal?>("Preco")
                        .HasColumnName("preco")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("Codigo");

                    b.ToTable("anvisa");
                });

            modelBuilder.Entity("CrudCharts.Models.Aplicacao", b =>
                {
                    b.Property<int>("CdAplicacao")
                        .HasColumnName("cd_aplicacao");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmAplicacao")
                        .IsRequired()
                        .HasColumnName("nm_aplicacao")
                        .HasMaxLength(80);

                    b.HasKey("CdAplicacao");

                    b.ToTable("aplicacao");
                });

            modelBuilder.Entity("CrudCharts.Models.ApontamentoDeServico", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<TimeSpan>("HoraFinal")
                        .HasColumnName("hora_final")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan>("HoraInicial")
                        .HasColumnName("hora_inicial")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.HasKey("CdFilial", "Id");

                    b.HasIndex("CdFilial", "CdFuncionario");

                    b.HasIndex("CdFilial", "NrOs");

                    b.ToTable("apontamento_de_servico");
                });

            modelBuilder.Entity("CrudCharts.Models.AuditorEstoqueC", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime?>("DtHrFinalizacao")
                        .HasColumnName("dt_hr_finalizacao");

                    b.Property<DateTime?>("DtHrInicio")
                        .HasColumnName("dt_hr_inicio");

                    b.Property<int?>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int?>("NrPedidoCompra")
                        .HasColumnName("nr_pedido_compra");

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("NrPedidoCompra");

                    b.HasIndex("CdFilial", "NrOs");

                    b.ToTable("auditor_estoque_c");
                });

            modelBuilder.Entity("CrudCharts.Models.AuditorEstoqueI", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdAuditorC")
                        .HasColumnName("id_auditor_c");

                    b.Property<int>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<decimal?>("QtAtual")
                        .HasColumnName("qt_atual")
                        .HasColumnType("numeric(15,4)");

                    b.Property<decimal?>("QtDif")
                        .HasColumnName("qt_dif")
                        .HasColumnType("numeric(15,4)");

                    b.HasKey("CdFilial", "IdAuditorC", "NrSequencial");

                    b.ToTable("auditor_estoque_i");
                });

            modelBuilder.Entity("CrudCharts.Models.AutorizaXml", b =>
                {
                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj")
                        .HasMaxLength(18);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(120);

                    b.HasKey("Cnpj");

                    b.ToTable("autoriza_xml");
                });

            modelBuilder.Entity("CrudCharts.Models.Banco", b =>
                {
                    b.Property<int>("CdBanco")
                        .HasColumnName("cd_banco");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmArqBoleto")
                        .HasColumnName("nm_arq_boleto")
                        .HasMaxLength(20);

                    b.Property<string>("NmBanco")
                        .IsRequired()
                        .HasColumnName("nm_banco")
                        .HasMaxLength(80);

                    b.HasKey("CdBanco");

                    b.ToTable("banco");
                });

            modelBuilder.Entity("CrudCharts.Models.BeneficioFiscal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("CodAjur")
                        .HasColumnName("cod_ajur")
                        .HasMaxLength(10);

                    b.Property<string>("DescAjur")
                        .HasColumnName("desc_ajur")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("DtFim")
                        .HasColumnName("dt_fim")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtIni")
                        .HasColumnName("dt_ini")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("beneficio_fiscal");
                });

            modelBuilder.Entity("CrudCharts.Models.Caixa", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<string>("Agencia")
                        .HasColumnName("agencia")
                        .HasMaxLength(10);

                    b.Property<int?>("CdContaContabil")
                        .HasColumnName("cd_conta_contabil");

                    b.Property<int?>("CdUsr")
                        .HasColumnName("cd_usr");

                    b.Property<string>("Cidade")
                        .HasColumnName("cidade")
                        .HasMaxLength(30);

                    b.Property<string>("Conta")
                        .HasColumnName("conta")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(80);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(40);

                    b.Property<string>("Estado")
                        .HasColumnName("estado")
                        .HasMaxLength(2);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(15);

                    b.Property<string>("FlTipo")
                        .IsRequired()
                        .HasColumnName("fl_tipo")
                        .HasMaxLength(1);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(15);

                    b.Property<string>("Gerente")
                        .HasColumnName("gerente")
                        .HasMaxLength(40);

                    b.Property<string>("Http")
                        .HasColumnName("http")
                        .HasMaxLength(80);

                    b.Property<decimal?>("Limite")
                        .HasColumnName("limite")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("NmCaixa")
                        .IsRequired()
                        .HasColumnName("nm_caixa")
                        .HasMaxLength(50);

                    b.Property<decimal?>("SaldoAnterior")
                        .HasColumnName("saldo_anterior")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdCaixa");

                    b.HasIndex("CdContaContabil");

                    b.ToTable("caixa");
                });

            modelBuilder.Entity("CrudCharts.Models.Cargo", b =>
                {
                    b.Property<int>("CdCargo")
                        .HasColumnName("cd_cargo");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(40);

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'2018-10-26'::date");

                    b.Property<string>("FlComissaoTotal")
                        .HasColumnName("fl_comissao_total")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlLiberaLimite")
                        .HasColumnName("fl_libera_limite");

                    b.HasKey("CdCargo", "CdFilial");

                    b.HasIndex("CdFilial");

                    b.ToTable("cargo");
                });

            modelBuilder.Entity("CrudCharts.Models.CartaCorrecao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("ChaveAcessoNfe")
                        .HasColumnName("chave_acesso_nfe")
                        .HasMaxLength(44);

                    b.Property<string>("Correcao")
                        .HasColumnName("correcao");

                    b.Property<DateTime?>("DtAutorizacao")
                        .HasColumnName("dt_autorizacao")
                        .HasColumnType("date");

                    b.Property<string>("FlEntSai")
                        .IsRequired()
                        .HasColumnName("fl_ent_sai")
                        .HasMaxLength(1);

                    b.Property<TimeSpan?>("HrAutorizacao")
                        .HasColumnName("hr_autorizacao")
                        .HasColumnType("time without time zone");

                    b.Property<int>("IdNf")
                        .HasColumnName("id_nf");

                    b.Property<string>("Protocolo")
                        .HasColumnName("protocolo")
                        .HasMaxLength(20);

                    b.Property<int>("Sequencia")
                        .HasColumnName("sequencia");

                    b.Property<string>("Xml")
                        .HasColumnName("xml");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNf", "FlEntSai", "Sequencia")
                        .IsUnique()
                        .HasName("unq1_carta_correcao");

                    b.ToTable("carta_correcao");
                });

            modelBuilder.Entity("CrudCharts.Models.CartaCorrecaoHist", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdMensagem")
                        .HasColumnName("cd_mensagem")
                        .HasMaxLength(4);

                    b.Property<string>("ContAnt")
                        .HasColumnName("cont_ant");

                    b.Property<string>("ContAtu")
                        .HasColumnName("cont_atu");

                    b.Property<int?>("IdCartaCorrecao")
                        .HasColumnName("id_carta_correcao");

                    b.Property<string>("NmCampo")
                        .HasColumnName("nm_campo")
                        .HasMaxLength(20);

                    b.Property<string>("NmTabela")
                        .HasColumnName("nm_tabela")
                        .HasMaxLength(20);

                    b.Property<string>("NrSequenciaItem")
                        .HasColumnName("nr_sequencia_item")
                        .HasMaxLength(4);

                    b.HasKey("IdGeral");

                    b.HasIndex("IdCartaCorrecao", "NmTabela", "NmCampo", "CdMensagem", "NrSequenciaItem")
                        .IsUnique()
                        .HasName("unq1_carta_correcao_hist");

                    b.ToTable("carta_correcao_hist");
                });

            modelBuilder.Entity("CrudCharts.Models.Cest", b =>
                {
                    b.Property<int>("CdCest")
                        .HasColumnName("cd_cest");

                    b.Property<string>("Cest1")
                        .IsRequired()
                        .HasColumnName("cest")
                        .HasMaxLength(7);

                    b.Property<string>("DescricaoCest")
                        .IsRequired()
                        .HasColumnName("descricao_cest")
                        .HasMaxLength(999);

                    b.HasKey("CdCest");

                    b.ToTable("cest");
                });

            modelBuilder.Entity("CrudCharts.Models.Cfop", b =>
                {
                    b.Property<string>("Cfop1")
                        .HasColumnName("cfop")
                        .HasMaxLength(5);

                    b.Property<string>("Aplicacao")
                        .HasColumnName("aplicacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(200);

                    b.HasKey("Cfop1");

                    b.ToTable("cfop");
                });

            modelBuilder.Entity("CrudCharts.Models.CfopRegra", b =>
                {
                    b.Property<int>("CdCfopRegra")
                        .HasColumnName("cd_cfop_regra");

                    b.Property<string>("NmCfopRegra")
                        .IsRequired()
                        .HasColumnName("nm_cfop_regra")
                        .HasMaxLength(80);

                    b.HasKey("CdCfopRegra");

                    b.ToTable("cfop_regra");
                });

            modelBuilder.Entity("CrudCharts.Models.Cidade", b =>
                {
                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdIbge")
                        .HasColumnName("cd_ibge");

                    b.Property<int?>("CdPais")
                        .HasColumnName("cd_pais");

                    b.Property<int?>("CdRegiao")
                        .HasColumnName("cd_regiao");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmCidade")
                        .IsRequired()
                        .HasColumnName("nm_cidade")
                        .HasMaxLength(40);

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnName("uf")
                        .HasMaxLength(3);

                    b.HasKey("CdCidade");

                    b.HasIndex("CdCidade")
                        .HasName("ind_cd_cidade");

                    b.HasIndex("CdRegiao");

                    b.HasIndex("NmCidade")
                        .HasName("ind_nm_cidade");

                    b.ToTable("cidade");
                });

            modelBuilder.Entity("CrudCharts.Models.ClassListaServico", b =>
                {
                    b.Property<string>("CdListaServico")
                        .HasColumnName("cd_lista_servico")
                        .HasMaxLength(4);

                    b.Property<string>("NmListaServico")
                        .HasColumnName("nm_lista_servico")
                        .HasMaxLength(1000);

                    b.HasKey("CdListaServico");

                    b.ToTable("class_lista_servico");
                });

            modelBuilder.Entity("CrudCharts.Models.Cliente", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<string>("Cargo")
                        .HasColumnName("cargo")
                        .HasMaxLength(15);

                    b.Property<string>("CargoConjuge")
                        .HasColumnName("cargo_conjuge")
                        .HasMaxLength(15);

                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdContaContabil")
                        .HasColumnName("cd_conta_contabil");

                    b.Property<int?>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int?>("CdFuncProtestou")
                        .HasColumnName("cd_func_protestou");

                    b.Property<short>("CdGrupoCliente")
                        .HasColumnName("cd_grupo_cliente");

                    b.Property<int?>("CdVendedor")
                        .HasColumnName("cd_vendedor");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("CgcCpf")
                        .HasColumnName("cgc_cpf")
                        .HasMaxLength(18);

                    b.Property<int?>("CodFuncBloqueou")
                        .HasColumnName("cod_func_bloqueou");

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(20);

                    b.Property<string>("CpfConjuge")
                        .HasColumnName("cpf_conjuge")
                        .HasMaxLength(18);

                    b.Property<DateTime?>("DtAdmissao")
                        .HasColumnName("dt_admissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtAdmissaoConjuge")
                        .HasColumnName("dt_admissao_conjuge")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtAniversario")
                        .HasColumnName("dt_aniversario")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtNascConj")
                        .HasColumnName("dt_nasc_conj")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtSpc")
                        .HasColumnName("dt_spc")
                        .HasColumnType("date");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(200);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(80);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<string>("FlAgricultor")
                        .HasColumnName("fl_agricultor")
                        .HasMaxLength(1);

                    b.Property<string>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlBloqueado")
                        .HasColumnName("fl_bloqueado");

                    b.Property<string>("FlClienteRedeUniagro")
                        .HasColumnName("fl_cliente_rede_uniagro")
                        .HasMaxLength(1);

                    b.Property<string>("FlClifor")
                        .HasColumnName("fl_clifor")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlContNcont")
                        .HasColumnName("fl_cont_ncont");

                    b.Property<decimal?>("FlEsLcilindrico")
                        .HasColumnName("fl_es_lcilindrico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlEsLeixo")
                        .HasColumnName("fl_es_leixo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlEsLesferico")
                        .HasColumnName("fl_es_lesferico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlEsPcilindrico")
                        .HasColumnName("fl_es_pcilindrico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlEsPeixo")
                        .HasColumnName("fl_es_peixo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlEsPesferico")
                        .HasColumnName("fl_es_pesferico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<bool?>("FlExibeObs")
                        .HasColumnName("fl_exibe_obs");

                    b.Property<string>("FlImprimirFatura")
                        .HasColumnName("fl_imprimir_fatura")
                        .HasMaxLength(1);

                    b.Property<decimal?>("FlOdLcilindrico")
                        .HasColumnName("fl_od_lcilindrico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlOdLeixo")
                        .HasColumnName("fl_od_leixo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlOdLesferico")
                        .HasColumnName("fl_od_lesferico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlOdPcilindrico")
                        .HasColumnName("fl_od_pcilindrico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlOdPeixo")
                        .HasColumnName("fl_od_peixo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("FlOdPesferico")
                        .HasColumnName("fl_od_pesferico")
                        .HasColumnType("numeric(18,4)");

                    b.Property<bool?>("FlProtestado")
                        .HasColumnName("fl_protestado");

                    b.Property<bool?>("FlSimples")
                        .HasColumnName("fl_simples");

                    b.Property<bool?>("FlSpc")
                        .HasColumnName("fl_spc");

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(20);

                    b.Property<string>("FoneCom")
                        .HasColumnName("fone_com")
                        .HasMaxLength(20);

                    b.Property<string>("FoneTrabalho")
                        .HasColumnName("fone_trabalho")
                        .HasMaxLength(20);

                    b.Property<string>("FoneTrabalhoConjuge")
                        .HasColumnName("fone_trabalho_conjuge")
                        .HasMaxLength(15);

                    b.Property<string>("HashClienteD2")
                        .HasColumnName("hash_cliente_d2")
                        .HasMaxLength(70);

                    b.Property<string>("Im")
                        .HasColumnName("im")
                        .HasMaxLength(10);

                    b.Property<string>("Inscricao")
                        .HasColumnName("inscricao")
                        .HasMaxLength(18);

                    b.Property<string>("InscricaoSuframa")
                        .HasColumnName("inscricao_suframa")
                        .HasMaxLength(9);

                    b.Property<decimal?>("LimiteCredito")
                        .HasColumnName("limite_credito")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("LocalNasc")
                        .HasColumnName("local_nasc")
                        .HasMaxLength(30);

                    b.Property<string>("LocalTrabalho")
                        .HasColumnName("local_trabalho")
                        .HasMaxLength(40);

                    b.Property<string>("LocalTrabalhoConjuge")
                        .HasColumnName("local_trabalho_conjuge")
                        .HasMaxLength(20);

                    b.Property<string>("MotivoBloqueio")
                        .HasColumnName("motivo_bloqueio");

                    b.Property<string>("MotivoProtesto")
                        .HasColumnName("motivo_protesto");

                    b.Property<string>("NmClifor")
                        .IsRequired()
                        .HasColumnName("nm_clifor")
                        .HasMaxLength(80);

                    b.Property<string>("NmConjuge")
                        .HasColumnName("nm_conjuge")
                        .HasMaxLength(75);

                    b.Property<string>("NmFantasia")
                        .HasColumnName("nm_fantasia")
                        .HasMaxLength(80);

                    b.Property<string>("NmMae")
                        .HasColumnName("nm_mae")
                        .HasMaxLength(80);

                    b.Property<string>("NmPai")
                        .HasColumnName("nm_pai")
                        .HasMaxLength(80);

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasMaxLength(50);

                    b.Property<string>("ObsConj")
                        .HasColumnName("obs_conj");

                    b.Property<string>("ObservacaoClifor")
                        .HasColumnName("observacao_clifor");

                    b.Property<string>("PessoaContato")
                        .HasColumnName("pessoa_contato")
                        .HasMaxLength(40);

                    b.Property<string>("Ref1")
                        .HasColumnName("ref_1")
                        .HasMaxLength(20);

                    b.Property<string>("Ref2")
                        .HasColumnName("ref_2")
                        .HasMaxLength(20);

                    b.Property<string>("Ref3")
                        .HasColumnName("ref_3")
                        .HasMaxLength(20);

                    b.Property<string>("Ref4")
                        .HasColumnName("ref_4")
                        .HasMaxLength(20);

                    b.Property<decimal?>("RendaConjuge")
                        .HasColumnName("renda_conjuge")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("RgConjuge")
                        .HasColumnName("rg_conjuge")
                        .HasMaxLength(18);

                    b.Property<decimal?>("Salario")
                        .HasColumnName("salario")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("TelRef1")
                        .HasColumnName("tel_ref_1")
                        .HasMaxLength(15);

                    b.Property<string>("TelRef2")
                        .HasColumnName("tel_ref_2")
                        .HasMaxLength(15);

                    b.Property<string>("TelRef3")
                        .HasColumnName("tel_ref_3")
                        .HasMaxLength(20);

                    b.Property<string>("TelRef4")
                        .HasColumnName("tel_ref_4")
                        .HasMaxLength(20);

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasMaxLength(48);

                    b.Property<string>("TpPessoa")
                        .HasColumnName("tp_pessoa")
                        .HasMaxLength(1);

                    b.Property<string>("TrabConj")
                        .HasColumnName("trab_conj")
                        .HasMaxLength(40);

                    b.HasKey("CdFilial", "CdCliente");

                    b.HasIndex("CdCidade")
                        .HasName("ind_cliecidade");

                    b.HasIndex("CdCliente")
                        .IsUnique()
                        .HasName("unq_cliente_codigo");

                    b.HasIndex("CdContaContabil");

                    b.HasIndex("CgcCpf")
                        .HasName("ind_cliente_cgc_cpf");

                    b.HasIndex("NmClifor")
                        .HasName("ind_nm_cliente");

                    b.HasIndex("CdFilial", "CdVendedor");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteContato", b =>
                {
                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("CdContato")
                        .HasColumnName("cd_contato");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.HasKey("CdCliente", "CdContato");

                    b.HasIndex("CdContato");

                    b.HasIndex("CdFilial", "CdCliente");

                    b.ToTable("cliente_contato");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteEntrega", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(80);

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(80);

                    b.Property<string>("EnderecoComplemento")
                        .HasColumnName("endereco_complemento")
                        .HasMaxLength(20);

                    b.Property<string>("EnderecoLogradouro")
                        .HasColumnName("endereco_logradouro")
                        .HasMaxLength(80);

                    b.Property<string>("EnderecoNumero")
                        .HasColumnName("endereco_numero")
                        .HasMaxLength(80);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<string>("NmLocal")
                        .IsRequired()
                        .HasColumnName("nm_local")
                        .HasMaxLength(80);

                    b.Property<string>("NrAutorizacao")
                        .HasColumnName("nr_autorizacao")
                        .HasMaxLength(50);

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(20);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdCidade");

                    b.HasIndex("CdCliente", "NrSequencia")
                        .IsUnique()
                        .HasName("unq1_cliente_entrega");

                    b.ToTable("cliente_entrega");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteGrupo", b =>
                {
                    b.Property<short>("CdGrupoCliente")
                        .HasColumnName("cd_grupo_cliente");

                    b.Property<string>("NmGrupoCliente")
                        .IsRequired()
                        .HasColumnName("nm_grupo_cliente")
                        .HasMaxLength(40);

                    b.HasKey("CdGrupoCliente");

                    b.HasIndex("NmGrupoCliente")
                        .IsUnique()
                        .HasName("idx_nm_grupo_cliente");

                    b.ToTable("cliente_grupo");
                });

            modelBuilder.Entity("CrudCharts.Models.ClientePropriedade", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("CdPropriedade")
                        .HasColumnName("cd_propriedade");

                    b.HasKey("CdFilial", "CdCliente", "CdPropriedade");

                    b.HasIndex("CdPropriedade");

                    b.ToTable("cliente_propriedade");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteResumoFinanceiro", b =>
                {
                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtUltimaCompra")
                        .HasColumnName("dt_ultima_compra")
                        .HasColumnType("date");

                    b.Property<decimal?>("VlAVencer")
                        .HasColumnName("vl_a_vencer")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("VlAtrasado")
                        .HasColumnName("vl_atrasado")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("VlChequePre")
                        .HasColumnName("vl_cheque_pre")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("VlLimite")
                        .HasColumnName("vl_limite")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("CdCliente", "CdFilial");

                    b.HasIndex("CdFilial");

                    b.ToTable("cliente_resumo_financeiro");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteResumoFinanceiroLog", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<char>("FlStatus")
                        .HasColumnName("fl_status");

                    b.HasKey("CdFilial");

                    b.ToTable("cliente_resumo_financeiro_log");
                });

            modelBuilder.Entity("CrudCharts.Models.Clieveic", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<int>("AnoFabricacao")
                        .HasColumnName("ano_fabricacao");

                    b.Property<int>("CdMontadora")
                        .HasColumnName("cd_montadora");

                    b.Property<int?>("CdVeiculo")
                        .HasColumnName("cd_veiculo");

                    b.Property<string>("Cor")
                        .HasColumnName("cor")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<bool?>("FlProprietario")
                        .HasColumnName("fl_proprietario");

                    b.Property<string>("Motor")
                        .HasColumnName("motor")
                        .HasMaxLength(20);

                    b.Property<string>("NmVeiculo")
                        .IsRequired()
                        .HasColumnName("nm_veiculo")
                        .HasMaxLength(40);

                    b.Property<string>("NrChassi")
                        .HasColumnName("nr_chassi")
                        .HasMaxLength(30);

                    b.Property<string>("NrFrota")
                        .HasColumnName("nr_frota")
                        .HasMaxLength(11);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("Renavan")
                        .HasColumnName("renavan")
                        .HasMaxLength(11);

                    b.HasKey("CdFilial", "CdCliente", "PlacaVeiculo");

                    b.HasIndex("PlacaVeiculo")
                        .HasName("idx_placa");

                    b.HasIndex("CdFilial", "CdMontadora");

                    b.ToTable("clieveic");
                });

            modelBuilder.Entity("CrudCharts.Models.CobBordero", b =>
                {
                    b.Property<int>("CdBordero")
                        .HasColumnName("cd_bordero");

                    b.Property<int>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<DateTime>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtEnvioRemessa")
                        .HasColumnName("dt_envio_remessa")
                        .HasColumnType("date");

                    b.HasKey("CdBordero");

                    b.HasIndex("CdConvenio");

                    b.HasIndex("DtCadastro")
                        .HasName("cob_bordero_idx");

                    b.ToTable("cob_bordero");
                });

            modelBuilder.Entity("CrudCharts.Models.CobBorderoParcela", b =>
                {
                    b.Property<long>("IdParcela")
                        .HasColumnName("id_parcela");

                    b.Property<int>("CdBordero")
                        .HasColumnName("cd_bordero");

                    b.HasKey("IdParcela", "CdBordero");

                    b.HasIndex("CdBordero");

                    b.ToTable("cob_bordero_parcela");
                });

            modelBuilder.Entity("CrudCharts.Models.CobConvenio", b =>
                {
                    b.Property<int>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<int?>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<string>("CdInstrucao1")
                        .HasColumnName("cd_instrucao1")
                        .HasMaxLength(2);

                    b.Property<string>("CdInstrucao2")
                        .HasColumnName("cd_instrucao2")
                        .HasMaxLength(2);

                    b.Property<string>("Diretorio")
                        .HasColumnName("diretorio")
                        .HasMaxLength(150);

                    b.Property<string>("DiretorioRemessa")
                        .HasColumnName("diretorio_remessa")
                        .HasMaxLength(200);

                    b.Property<string>("DiretorioRetorno")
                        .HasColumnName("diretorio_retorno")
                        .HasMaxLength(200);

                    b.Property<string>("FlAceite")
                        .IsRequired()
                        .HasColumnName("fl_aceite")
                        .HasMaxLength(1);

                    b.Property<string>("FlDebAutomatico")
                        .HasColumnName("fl_deb_automatico")
                        .HasMaxLength(1);

                    b.Property<string>("FlEmissor")
                        .IsRequired()
                        .HasColumnName("fl_emissor")
                        .HasMaxLength(1);

                    b.Property<string>("FlNrNfs")
                        .HasColumnName("fl_nr_nfs")
                        .HasMaxLength(1);

                    b.Property<string>("FlPadraoRemessa")
                        .HasColumnName("fl_padrao_remessa")
                        .HasMaxLength(1);

                    b.Property<string>("FlProtesto")
                        .IsRequired()
                        .HasColumnName("fl_protesto")
                        .HasMaxLength(1);

                    b.Property<string>("FlRemessa")
                        .IsRequired()
                        .HasColumnName("fl_remessa")
                        .HasMaxLength(1);

                    b.Property<string>("FlRetornoRemessa")
                        .IsRequired()
                        .HasColumnName("fl_retorno_remessa")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlSincNrSeq")
                        .HasColumnName("fl_sinc_nr_seq");

                    b.Property<string>("LayoutBoleto")
                        .HasColumnName("layout_boleto")
                        .HasMaxLength(200);

                    b.Property<string>("LocalPagamento")
                        .IsRequired()
                        .HasColumnName("local_pagamento")
                        .HasMaxLength(300);

                    b.Property<string>("Mensagem")
                        .HasColumnName("mensagem");

                    b.Property<string>("MensagemProtesto")
                        .HasColumnName("mensagem_protesto");

                    b.Property<string>("NmAgencia")
                        .HasColumnName("nm_agencia")
                        .HasMaxLength(80);

                    b.Property<string>("NmBanco")
                        .HasColumnName("nm_banco")
                        .HasMaxLength(80);

                    b.Property<string>("NmConvenio")
                        .IsRequired()
                        .HasColumnName("nm_convenio")
                        .HasMaxLength(40);

                    b.Property<string>("NrAgencia")
                        .HasColumnName("nr_agencia")
                        .HasMaxLength(10);

                    b.Property<int>("NrBanco")
                        .HasColumnName("nr_banco");

                    b.Property<string>("NrConta")
                        .HasColumnName("nr_conta")
                        .HasMaxLength(10);

                    b.Property<string>("NrConvenio")
                        .IsRequired()
                        .HasColumnName("nr_convenio")
                        .HasMaxLength(15);

                    b.Property<int?>("NrDiasBaixa")
                        .HasColumnName("nr_dias_baixa");

                    b.Property<short>("NrDiasProtesto")
                        .HasColumnName("nr_dias_protesto");

                    b.Property<string>("NrDvAgencia")
                        .HasColumnName("nr_dv_agencia")
                        .HasMaxLength(2);

                    b.Property<string>("NrDvBanco")
                        .HasColumnName("nr_dv_banco")
                        .HasMaxLength(2);

                    b.Property<string>("NrDvConta")
                        .HasColumnName("nr_dv_conta")
                        .HasMaxLength(2);

                    b.Property<long>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<long?>("NrUltimaRemessa")
                        .HasColumnName("nr_ultima_remessa");

                    b.Property<decimal?>("OpConta")
                        .HasColumnName("op_conta")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("SgEspecie")
                        .HasColumnName("sg_especie")
                        .HasMaxLength(3);

                    b.Property<string>("TpCobranca")
                        .HasColumnName("tp_cobranca")
                        .HasMaxLength(3);

                    b.Property<string>("UnidadeCedente")
                        .HasColumnName("unidade_cedente")
                        .HasMaxLength(80);

                    b.HasKey("CdConvenio");

                    b.ToTable("cob_convenio");
                });

            modelBuilder.Entity("CrudCharts.Models.CobConvenioAtributo", b =>
                {
                    b.Property<int>("CdAtributo")
                        .HasColumnName("cd_atributo");

                    b.Property<int>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<int?>("CdFormaPgto")
                        .HasColumnName("cd_forma_pgto");

                    b.Property<string>("NmCampo")
                        .IsRequired()
                        .HasColumnName("nm_campo")
                        .HasMaxLength(30);

                    b.Property<string>("NmTituloCampo")
                        .IsRequired()
                        .HasColumnName("nm_titulo_campo")
                        .HasMaxLength(30);

                    b.Property<int>("NrOrdem")
                        .HasColumnName("nr_ordem");

                    b.Property<string>("TipoCampo")
                        .HasColumnName("tipo_campo")
                        .HasMaxLength(20);

                    b.Property<string>("VlAtributo")
                        .HasColumnName("vl_atributo")
                        .HasMaxLength(1000);

                    b.HasKey("CdAtributo");

                    b.HasIndex("CdConvenio", "NmCampo")
                        .IsUnique()
                        .HasName("unq_cob_convenio_atributo");

                    b.ToTable("cob_convenio_atributo");
                });

            modelBuilder.Entity("CrudCharts.Models.CobConvenioFormaPgto", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFormaPgto")
                        .HasColumnName("cd_forma_pgto");

                    b.Property<string>("FlRegistrada")
                        .IsRequired()
                        .HasColumnName("fl_registrada")
                        .HasMaxLength(1);

                    b.Property<string>("NrCarteira")
                        .IsRequired()
                        .HasColumnName("nr_carteira")
                        .HasMaxLength(15);

                    b.Property<string>("SgCarteira")
                        .HasColumnName("sg_carteira")
                        .HasMaxLength(8);

                    b.Property<string>("VariacaoCarteira")
                        .HasColumnName("variacao_carteira")
                        .HasMaxLength(3);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdConvenio", "CdFormaPgto", "CdFilial", "NrCarteira")
                        .IsUnique()
                        .HasName("cob_convenio_forma_pgto_idx");

                    b.ToTable("cob_convenio_forma_pgto");
                });

            modelBuilder.Entity("CrudCharts.Models.CobMotivoMovimentoRetorno", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<string>("CdMotivo")
                        .IsRequired()
                        .HasColumnName("cd_motivo")
                        .HasMaxLength(10);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(255);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMotivo", "CdConvenio")
                        .IsUnique()
                        .HasName("cob_motivo_mvto_retorno_idx");

                    b.ToTable("cob_motivo_movimento_retorno");
                });

            modelBuilder.Entity("CrudCharts.Models.CobMovimentoRetorno", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<string>("CdMovimento")
                        .IsRequired()
                        .HasColumnName("cd_movimento")
                        .HasMaxLength(10);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(255);

                    b.Property<string>("FlTipo")
                        .HasColumnName("fl_tipo")
                        .HasMaxLength(1);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMovimento", "CdConvenio")
                        .IsUnique()
                        .HasName("unq_cob_movimento_retorno");

                    b.ToTable("cob_movimento_retorno");
                });

            modelBuilder.Entity("CrudCharts.Models.CobParcela", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtVcto")
                        .HasColumnName("dt_vcto")
                        .HasColumnType("date");

                    b.Property<string>("IdSistemaOrigem")
                        .IsRequired()
                        .HasColumnName("id_sistema_origem")
                        .HasMaxLength(100);

                    b.Property<string>("Instrucoes")
                        .HasColumnName("instrucoes");

                    b.Property<string>("NmCedente")
                        .IsRequired()
                        .HasColumnName("nm_cedente")
                        .HasMaxLength(1000);

                    b.Property<string>("NmEspecie")
                        .HasColumnName("nm_especie")
                        .HasMaxLength(10);

                    b.Property<string>("NrCarteira")
                        .HasColumnName("nr_carteira")
                        .HasMaxLength(10);

                    b.Property<string>("NrDocumento")
                        .HasColumnName("nr_documento")
                        .HasMaxLength(15);

                    b.Property<string>("NrNossoNumero")
                        .HasColumnName("nr_nosso_numero")
                        .HasMaxLength(50);

                    b.Property<int?>("NrSequencialRemessa")
                        .HasColumnName("nr_sequencial_remessa");

                    b.Property<string>("Observacoes")
                        .HasColumnName("observacoes");

                    b.Property<decimal>("VlAbatimento")
                        .HasColumnName("vl_abatimento")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("VlJuros")
                        .HasColumnName("vl_juros")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("VlMora")
                        .HasColumnName("vl_mora")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("VlOutrasDeducoes")
                        .HasColumnName("vl_outras_deducoes")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("VlOutrosAcrescimos")
                        .HasColumnName("vl_outros_acrescimos")
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("VlParcela")
                        .HasColumnName("vl_parcela")
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdConvenio");

                    b.HasIndex("IdSistemaOrigem")
                        .IsUnique()
                        .HasName("unq_cob_parcela_id_origem");

                    b.ToTable("cob_parcela");
                });

            modelBuilder.Entity("CrudCharts.Models.CobRetorno", b =>
                {
                    b.Property<long>("CdRetorno")
                        .HasColumnName("cd_retorno");

                    b.Property<string>("Arquivo")
                        .HasColumnName("arquivo");

                    b.Property<long?>("CdConvenio")
                        .HasColumnName("cd_convenio");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("FlProcessado")
                        .HasColumnName("fl_processado")
                        .HasMaxLength(1);

                    b.Property<string>("NrRetorno")
                        .IsRequired()
                        .HasColumnName("nr_retorno")
                        .HasMaxLength(20);

                    b.HasKey("CdRetorno");

                    b.HasIndex("CdFilial");

                    b.HasIndex("NrRetorno")
                        .IsUnique()
                        .HasName("cob_retorno_nr_retorno_idx");

                    b.ToTable("cob_retorno");
                });

            modelBuilder.Entity("CrudCharts.Models.CobRetornoParcela", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdMotivoMovimentoRetorno1")
                        .HasColumnName("cd_motivo_movimento_retorno1")
                        .HasMaxLength(10);

                    b.Property<string>("CdMotivoMovimentoRetorno2")
                        .HasColumnName("cd_motivo_movimento_retorno2")
                        .HasMaxLength(10);

                    b.Property<string>("CdMotivoMovimentoRetorno3")
                        .HasColumnName("cd_motivo_movimento_retorno3")
                        .HasMaxLength(10);

                    b.Property<string>("CdMotivoMovimentoRetorno4")
                        .HasColumnName("cd_motivo_movimento_retorno4")
                        .HasMaxLength(10);

                    b.Property<string>("CdMotivoMovimentoRetorno5")
                        .HasColumnName("cd_motivo_movimento_retorno5")
                        .HasMaxLength(10);

                    b.Property<string>("CdMovimentoRetorno")
                        .IsRequired()
                        .HasColumnName("cd_movimento_retorno")
                        .HasMaxLength(10);

                    b.Property<long>("CdRetorno")
                        .HasColumnName("cd_retorno");

                    b.Property<DateTime?>("DtCredito")
                        .HasColumnName("dt_credito")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtDebitoTarifa")
                        .HasColumnName("dt_debito_tarifa")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtOcorrencia")
                        .HasColumnName("dt_ocorrencia")
                        .HasColumnType("date");

                    b.Property<string>("FlProcessado")
                        .HasColumnName("fl_processado")
                        .HasMaxLength(1);

                    b.Property<string>("IdParcela")
                        .HasColumnName("id_parcela")
                        .HasMaxLength(100);

                    b.Property<string>("NrNossoNumero")
                        .IsRequired()
                        .HasColumnName("nr_nosso_numero")
                        .HasMaxLength(50);

                    b.Property<decimal>("VlAbatimento")
                        .HasColumnName("vl_abatimento")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlDespesaCobranca")
                        .HasColumnName("vl_despesa_cobranca")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlIof")
                        .HasColumnName("vl_iof")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlLiquido")
                        .HasColumnName("vl_liquido")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlOutrasDespesas")
                        .HasColumnName("vl_outras_despesas")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlOutrosCreditos")
                        .HasColumnName("vl_outros_creditos")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlPago")
                        .HasColumnName("vl_pago")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal>("VlTarifa")
                        .HasColumnName("vl_tarifa")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdRetorno");

                    b.HasIndex("NrNossoNumero", "CdRetorno", "CdMovimentoRetorno")
                        .IsUnique()
                        .HasName("cob_retorno_parcela_idx");

                    b.ToTable("cob_retorno_parcela");
                });

            modelBuilder.Entity("CrudCharts.Models.CodigoTributacaoMunicipio", b =>
                {
                    b.Property<int>("CdTributacaoMunicipio")
                        .HasColumnName("cd_tributacao_municipio");

                    b.Property<string>("NmTributacaoMunicipio")
                        .IsRequired()
                        .HasColumnName("nm_tributacao_municipio")
                        .HasMaxLength(100);

                    b.HasKey("CdTributacaoMunicipio");

                    b.ToTable("codigo_tributacao_municipio");
                });

            modelBuilder.Entity("CrudCharts.Models.Comissao", b =>
                {
                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("CdGrupoComissao")
                        .HasColumnName("cd_grupo_comissao");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("'2018-10-26'::date");

                    b.Property<bool?>("FlComissaoAbaixoMin")
                        .HasColumnName("fl_comissao_abaixo_min");

                    b.Property<decimal?>("PcMinimo")
                        .HasColumnName("pc_minimo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcSobreComissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pc_sobre_comissao")
                        .HasColumnType("numeric(9,2)")
                        .HasDefaultValueSql("100");

                    b.HasKey("CdFuncionario", "CdGrupoComissao", "CdFilial");

                    b.HasIndex("CdGrupoComissao");

                    b.HasIndex("CdFilial", "CdFuncionario");

                    b.ToTable("comissao");
                });

            modelBuilder.Entity("CrudCharts.Models.ComissaoFunc", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("NrParcela")
                        .HasColumnName("nr_parcela");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao");

                    b.Property<DateTime?>("DtUltPgto")
                        .HasColumnName("dt_ult_pgto");

                    b.Property<DateTime>("DtVcto")
                        .HasColumnName("dt_vcto");

                    b.Property<int?>("NrCupom")
                        .HasColumnName("nr_cupom");

                    b.Property<int?>("NrNf")
                        .HasColumnName("nr_nf");

                    b.Property<int?>("NrSr")
                        .HasColumnName("nr_sr");

                    b.Property<decimal>("PcComissao")
                        .HasColumnName("pc_comissao")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal>("PcComissaoGrupo")
                        .HasColumnName("pc_comissao_grupo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcMinimo")
                        .HasColumnName("pc_minimo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcMinimoComissao")
                        .HasColumnName("pc_minimo_comissao")
                        .HasColumnType("numeric(9,2)");

                    b.Property<double?>("PcParcela")
                        .HasColumnName("pc_parcela");

                    b.Property<decimal>("PcSobreComissao")
                        .HasColumnName("pc_sobre_comissao")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal>("VlBase")
                        .HasColumnName("vl_base")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("VlComissao")
                        .HasColumnName("vl_comissao")
                        .HasColumnType("numeric(9,4)");

                    b.Property<decimal?>("VlPago")
                        .HasColumnName("vl_pago")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("CdFilial", "NrDocumento", "NrSequencia", "CdFuncionario", "NrParcela");

                    b.HasIndex("NrDocumento")
                        .HasName("ind_comissao_func_doc");

                    b.ToTable("comissao_func");
                });

            modelBuilder.Entity("CrudCharts.Models.ComissaoFuncDev", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("NrParcela")
                        .HasColumnName("nr_parcela");

                    b.Property<int>("NrSequenciaDev")
                        .HasColumnName("nr_sequencia_dev");

                    b.Property<int>("IdNfecDev")
                        .HasColumnName("id_nfec_dev");

                    b.Property<double>("PcComissao")
                        .HasColumnName("pc_comissao");

                    b.Property<double>("VlBase")
                        .HasColumnName("vl_base");

                    b.Property<double>("VlComissao")
                        .HasColumnName("vl_comissao");

                    b.HasKey("CdFilial", "NrDocumento", "NrSequencia", "CdFuncionario", "NrParcela", "NrSequenciaDev");

                    b.HasIndex("IdNfecDev");

                    b.ToTable("comissao_func_dev");
                });

            modelBuilder.Entity("CrudCharts.Models.ConfEstudoLucratividade", b =>
                {
                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<double?>("PcAliqSimplesNacional")
                        .HasColumnName("pc_aliq_simples_nacional");

                    b.Property<double?>("PcCsll")
                        .HasColumnName("pc_csll");

                    b.Property<double?>("PcCustoFixo")
                        .HasColumnName("pc_custo_fixo");

                    b.Property<double?>("PcDeQuebra")
                        .HasColumnName("pc_de_quebra");

                    b.Property<double?>("PcDespesasOperacionais")
                        .HasColumnName("pc_despesas_operacionais");

                    b.Property<double?>("PcIrrj")
                        .HasColumnName("pc_irrj");

                    b.Property<double?>("PcOutrasDespesas")
                        .HasColumnName("pc_outras_despesas");

                    b.HasKey("CdProduto");

                    b.ToTable("conf_estudo_lucratividade");
                });

            modelBuilder.Entity("CrudCharts.Models.ConfSpedPisCofins", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CodIncTrib")
                        .HasColumnName("cod_inc_trib");

                    b.Property<int?>("CodTipoCont")
                        .HasColumnName("cod_tipo_cont");

                    b.Property<string>("CodVer")
                        .HasColumnName("cod_ver")
                        .HasMaxLength(10);

                    b.Property<string>("FlBasePisLucroVeic")
                        .HasColumnName("fl_base_pis_lucro_veic")
                        .HasMaxLength(1);

                    b.Property<int?>("IndAproCred")
                        .HasColumnName("ind_apro_cred");

                    b.Property<string>("IndAtiv")
                        .IsRequired()
                        .HasColumnName("ind_ativ")
                        .HasMaxLength(1);

                    b.Property<int?>("IndEscri")
                        .HasColumnName("ind_escri");

                    b.Property<string>("IndNatPj")
                        .HasColumnName("ind_nat_pj")
                        .HasMaxLength(2);

                    b.Property<int?>("IndRegCu")
                        .HasColumnName("ind_reg_cu");

                    b.Property<string>("IndSitEsp")
                        .HasColumnName("ind_sit_esp")
                        .HasMaxLength(1);

                    b.Property<string>("TipoEscrit")
                        .IsRequired()
                        .HasColumnName("tipo_escrit")
                        .HasMaxLength(1);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial");

                    b.ToTable("conf_sped_pis_cofins");
                });

            modelBuilder.Entity("CrudCharts.Models.Construcao", b =>
                {
                    b.Property<int>("CdConstrucao")
                        .HasColumnName("cd_construcao");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmConstrucao")
                        .IsRequired()
                        .HasColumnName("nm_construcao")
                        .HasMaxLength(80);

                    b.HasKey("CdConstrucao");

                    b.ToTable("construcao");
                });

            modelBuilder.Entity("CrudCharts.Models.Consulta", b =>
                {
                    b.Property<int>("IdConsulta")
                        .HasColumnName("id_consulta");

                    b.Property<int>("CampoInicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("campo_inicial")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("CdConexao")
                        .HasColumnName("cd_conexao");

                    b.Property<string>("ComandoSql")
                        .IsRequired()
                        .HasColumnName("comando_sql");

                    b.Property<long?>("IdAcaoCadastro")
                        .HasColumnName("id_acao_cadastro");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnName("identificador")
                        .HasMaxLength(18);

                    b.Property<string>("SqlAgrupamento")
                        .HasColumnName("sql_agrupamento");

                    b.Property<string>("TabelaCadastro")
                        .HasColumnName("tabela_cadastro")
                        .HasMaxLength(50);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnName("titulo")
                        .HasMaxLength(100);

                    b.HasKey("IdConsulta");

                    b.HasIndex("IdAcaoCadastro");

                    b.HasIndex("Identificador")
                        .IsUnique()
                        .HasName("unq_consulta_id");

                    b.ToTable("consulta");
                });

            modelBuilder.Entity("CrudCharts.Models.ConsultaCampo", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("IdConsulta")
                        .HasColumnName("id_consulta");

                    b.Property<string>("NmCampo")
                        .IsRequired()
                        .HasColumnName("nm_campo")
                        .HasMaxLength(30);

                    b.Property<string>("NmTitulo")
                        .HasColumnName("nm_titulo")
                        .HasMaxLength(100);

                    b.Property<int?>("NrPosicao")
                        .HasColumnName("nr_posicao");

                    b.Property<int?>("TamanhoCampo")
                        .HasColumnName("tamanho_campo");

                    b.Property<string>("TipoCampo")
                        .HasColumnName("tipo_campo")
                        .HasMaxLength(20);

                    b.HasKey("IdGeral");

                    b.HasIndex("IdConsulta", "NmCampo")
                        .IsUnique()
                        .HasName("unq_consulta_campo");

                    b.ToTable("consulta_campo");
                });

            modelBuilder.Entity("CrudCharts.Models.Contabilista", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdContabilista")
                        .HasColumnName("cd_contabilista");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("CnpjEscritorioCont")
                        .HasColumnName("cnpj_escritorio_cont")
                        .HasMaxLength(18);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(20);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasMaxLength(14);

                    b.Property<string>("Crc")
                        .IsRequired()
                        .HasColumnName("crc")
                        .HasMaxLength(15);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(60);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(16);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(16);

                    b.Property<string>("NmContabilista")
                        .IsRequired()
                        .HasColumnName("nm_contabilista")
                        .HasMaxLength(100);

                    b.Property<int?>("Numero")
                        .HasColumnName("numero");

                    b.HasKey("CdFilial", "CdContabilista");

                    b.ToTable("contabilista");
                });

            modelBuilder.Entity("CrudCharts.Models.ContaContabil", b =>
                {
                    b.Property<int>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<int?>("CdHistorico")
                        .HasColumnName("cd_historico");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmConta")
                        .IsRequired()
                        .HasColumnName("nm_conta")
                        .HasMaxLength(50);

                    b.HasKey("CdConta");

                    b.ToTable("conta_contabil");
                });

            modelBuilder.Entity("CrudCharts.Models.Contato", b =>
                {
                    b.Property<int>("IdContato")
                        .HasColumnName("id_contato");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(80);

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Departamento")
                        .HasColumnName("departamento")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("DtNascimento")
                        .HasColumnName("dt_nascimento")
                        .HasColumnType("date");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(70);

                    b.Property<string>("EnderecoComplemento")
                        .HasColumnName("endereco_complemento")
                        .HasMaxLength(20);

                    b.Property<string>("EnderecoLogradouro")
                        .HasColumnName("endereco_logradouro")
                        .HasMaxLength(80);

                    b.Property<short?>("EnderecoNumero")
                        .HasColumnName("endereco_numero");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<string>("FoneComercial")
                        .HasColumnName("fone_comercial")
                        .HasMaxLength(20);

                    b.Property<string>("NmContato")
                        .HasColumnName("nm_contato")
                        .HasMaxLength(60);

                    b.Property<string>("Obs")
                        .HasColumnName("obs")
                        .HasMaxLength(255);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(20);

                    b.Property<int>("TpContato")
                        .HasColumnName("tp_contato");

                    b.HasKey("IdContato");

                    b.HasIndex("CdCidade");

                    b.ToTable("contato");
                });

            modelBuilder.Entity("CrudCharts.Models.Crptitulo", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdTipoConta")
                        .HasColumnName("cd_tipo_conta");

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<string>("NrTitulo")
                        .HasColumnName("nr_titulo")
                        .HasMaxLength(15);

                    b.Property<int>("Parcela")
                        .HasColumnName("parcela");

                    b.Property<int>("CdBanco")
                        .HasColumnName("cd_banco");

                    b.Property<int>("CdBancoOri")
                        .HasColumnName("cd_banco_ori");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int?>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<int?>("CdFrenteCaixaCarne")
                        .HasColumnName("cd_frente_caixa_carne");

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("CdTipocobr")
                        .HasColumnName("cd_tipocobr");

                    b.Property<int>("CdTipocobrOri")
                        .HasColumnName("cd_tipocobr_ori");

                    b.Property<int>("CdVendedor")
                        .HasColumnName("cd_vendedor");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtUltPgto")
                        .HasColumnName("dt_ult_pgto")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtVcto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_vcto")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtVctoOri")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_vcto_ori")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FlImprimeCarne")
                        .HasColumnName("fl_imprime_carne")
                        .HasMaxLength(1);

                    b.Property<string>("FlImprimeComprovante")
                        .HasColumnName("fl_imprime_comprovante")
                        .HasMaxLength(1);

                    b.Property<string>("FlPrevRealizado")
                        .HasColumnName("fl_prev_realizado")
                        .HasMaxLength(1);

                    b.Property<string>("FlReparcelado")
                        .HasColumnName("fl_reparcelado")
                        .HasMaxLength(1);

                    b.Property<string>("MotivoAlteracao")
                        .HasColumnName("motivo_alteracao")
                        .HasMaxLength(120);

                    b.Property<string>("MotivoAlteracaoValor")
                        .HasColumnName("motivo_alteracao_valor");

                    b.Property<int?>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<long?>("NrNfEcf")
                        .HasColumnName("nr_nf_ecf");

                    b.Property<string>("NrSe")
                        .HasColumnName("nr_se")
                        .HasMaxLength(3);

                    b.Property<int?>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<string>("NrTituloReparcelado")
                        .HasColumnName("nr_titulo_reparcelado")
                        .HasMaxLength(15);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal?>("PcParcela")
                        .HasColumnName("pc_parcela")
                        .HasColumnType("numeric(5,2)");

                    b.Property<double?>("PcParcelaTotal")
                        .HasColumnName("pc_parcela_total");

                    b.Property<int>("PrazoParcela")
                        .HasColumnName("prazo_parcela");

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaixasNominal")
                        .HasColumnName("vl_baixas_nominal")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlComissao")
                        .HasColumnName("vl_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontos")
                        .HasColumnName("vl_descontos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDevolucoes")
                        .HasColumnName("vl_devolucoes")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlJuros")
                        .HasColumnName("vl_juros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlMulta")
                        .HasColumnName("vl_multa")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlNominal")
                        .HasColumnName("vl_nominal")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSaldo")
                        .HasColumnName("vl_saldo")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdTipoConta", "CdClifor", "NrTitulo", "Parcela");

                    b.HasIndex("CdClifor")
                        .HasName("idx_crptitulo_cliente");

                    b.HasIndex("CdConta");

                    b.HasIndex("NrDocumento")
                        .HasName("crptitulo_idx_nr_documento");

                    b.HasIndex("NrTitulo")
                        .HasName("ind_crptitulo_numero");

                    b.HasIndex("NrTituloReparcelado")
                        .HasName("crptitulo_idx_nr_reparcelado");

                    b.HasIndex("CdTipoConta", "NrDocumento", "NrNfEcf", "NrSequencial")
                        .HasName("idx_crptitulo_nr_nf");

                    b.ToTable("crptitulo");
                });

            modelBuilder.Entity("CrudCharts.Models.CrptituloAgrupado", b =>
                {
                    b.Property<int>("CdFilialO")
                        .HasColumnName("cd_filial_o");

                    b.Property<int>("CdTipoContaO")
                        .HasColumnName("cd_tipo_conta_o");

                    b.Property<string>("NrTituloO")
                        .HasColumnName("nr_titulo_o")
                        .HasMaxLength(15);

                    b.Property<int>("ParcelaO")
                        .HasColumnName("parcela_o");

                    b.Property<int>("CdCliforO")
                        .HasColumnName("cd_clifor_o");

                    b.Property<int?>("CdCliforD")
                        .HasColumnName("cd_clifor_d");

                    b.Property<int?>("CdFilialD")
                        .HasColumnName("cd_filial_d");

                    b.Property<int?>("CdTipoContaD")
                        .HasColumnName("cd_tipo_conta_d");

                    b.Property<DateTime?>("DtAgrupamento")
                        .HasColumnName("dt_agrupamento")
                        .HasColumnType("date");

                    b.Property<string>("NrTituloD")
                        .HasColumnName("nr_titulo_d")
                        .HasMaxLength(15);

                    b.Property<int?>("ParcelaD")
                        .HasColumnName("parcela_d");

                    b.HasKey("CdFilialO", "CdTipoContaO", "NrTituloO", "ParcelaO", "CdCliforO");

                    b.ToTable("crptitulo_agrupado");
                });

            modelBuilder.Entity("CrudCharts.Models.CrptituloFuncionario", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdTipoConta")
                        .HasColumnName("cd_tipo_conta");

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<string>("NrTitulo")
                        .HasColumnName("nr_titulo")
                        .HasMaxLength(15);

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.HasKey("CdFilial", "CdTipoConta", "CdClifor", "NrTitulo", "CdFuncionario");

                    b.HasIndex("CdFilial", "CdFuncionario");

                    b.ToTable("crptitulo_funcionario");
                });

            modelBuilder.Entity("CrudCharts.Models.CrptituloMovimentoCxa", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdTipoConta")
                        .HasColumnName("cd_tipo_conta");

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<string>("NrTitulo")
                        .HasColumnName("nr_titulo")
                        .HasMaxLength(15);

                    b.Property<int>("Parcela")
                        .HasColumnName("parcela");

                    b.Property<int>("NrLcto")
                        .HasColumnName("nr_lcto");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.HasKey("CdFilial", "CdTipoConta", "CdClifor", "NrTitulo", "Parcela", "NrLcto", "CdCaixa");

                    b.HasIndex("CdFilial", "CdCaixa", "NrLcto");

                    b.HasIndex("CdFilial", "NrLcto", "CdCaixa")
                        .HasName("crptitulo_movimento_cxa_cnc");

                    b.HasIndex("CdFilial", "CdTipoConta", "CdClifor", "NrTitulo", "Parcela")
                        .HasName("crptitulo_movimento_cxa_cccnp");

                    b.ToTable("crptitulo_movimento_cxa");
                });

            modelBuilder.Entity("CrudCharts.Models.Cst", b =>
                {
                    b.Property<string>("CdCst")
                        .HasColumnName("cd_cst")
                        .HasMaxLength(4);

                    b.Property<int?>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<string>("FlCalcPartilha")
                        .HasColumnName("fl_calc_partilha")
                        .HasMaxLength(1);

                    b.Property<string>("FlDiferencaBaseTotal")
                        .HasColumnName("fl_diferenca_base_total")
                        .HasMaxLength(1);

                    b.Property<string>("FlIcm")
                        .HasColumnName("fl_icm")
                        .HasMaxLength(1);

                    b.Property<string>("FlIcmSubst")
                        .HasColumnName("fl_icm_subst")
                        .HasMaxLength(1);

                    b.Property<string>("FlPermiteCredito")
                        .HasColumnName("fl_permite_credito")
                        .HasMaxLength(1);

                    b.Property<string>("FlReducao")
                        .HasColumnName("fl_reducao")
                        .HasMaxLength(1);

                    b.Property<string>("FlSimples")
                        .HasColumnName("fl_simples")
                        .HasMaxLength(1);

                    b.Property<string>("HashCstD3")
                        .HasColumnName("hash_cst_d3")
                        .HasMaxLength(70);

                    b.Property<string>("HashCstP2")
                        .HasColumnName("hash_cst_p2")
                        .HasMaxLength(70);

                    b.Property<string>("NmCst")
                        .IsRequired()
                        .HasColumnName("nm_cst")
                        .HasMaxLength(100);

                    b.HasKey("CdCst");

                    b.HasIndex("CdMensagem");

                    b.ToTable("cst");
                });

            modelBuilder.Entity("CrudCharts.Models.CstIpi", b =>
                {
                    b.Property<string>("CdCstIpi")
                        .HasColumnName("cd_cst_ipi")
                        .HasMaxLength(10);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.Property<char?>("FlEntSai")
                        .HasColumnName("fl_ent_sai");

                    b.Property<char>("FlTributada")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_tributada")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.HasKey("CdCstIpi");

                    b.ToTable("cst_ipi");
                });

            modelBuilder.Entity("CrudCharts.Models.CstPisCofins", b =>
                {
                    b.Property<string>("CdCstPisCofins")
                        .HasColumnName("cd_cst_pis_cofins")
                        .HasMaxLength(10);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(200);

                    b.Property<char?>("FlEntSai")
                        .HasColumnName("fl_ent_sai");

                    b.Property<char>("FlTributada")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_tributada")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.HasKey("CdCstPisCofins");

                    b.ToTable("cst_pis_cofins");
                });

            modelBuilder.Entity("CrudCharts.Models.Custcomp", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("IdNfei")
                        .HasColumnName("id_nfei");

                    b.Property<decimal?>("CustoCompraNomi")
                        .HasColumnName("custo_compra_nomi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CustoCompraSimples")
                        .HasColumnName("custo_compra_simples")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CustoMedioNomi")
                        .HasColumnName("custo_medio_nomi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_lancamento")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FlCustoAlterado")
                        .HasColumnName("fl_custo_alterado")
                        .HasMaxLength(1);

                    b.Property<double>("QtdeNomi")
                        .HasColumnName("qtde_nomi");

                    b.HasKey("CdFilial", "CdProduto", "IdNfei");

                    b.HasIndex("CdProduto")
                        .HasName("idx_custcomp_produto");

                    b.HasIndex("IdNfei");

                    b.ToTable("custcomp");
                });

            modelBuilder.Entity("CrudCharts.Models.CxaAbertura", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<int>("CdCaixaOrigem")
                        .HasColumnName("cd_caixa_origem");

                    b.Property<DateTime>("DtAbertura")
                        .HasColumnName("dt_abertura")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtFechamento")
                        .HasColumnName("dt_fechamento")
                        .HasColumnType("date");

                    b.Property<string>("FlFechado")
                        .IsRequired()
                        .HasColumnName("fl_fechado")
                        .HasMaxLength(1);

                    b.Property<TimeSpan>("HoraAbertura")
                        .HasColumnName("hora_abertura")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("HoraFechamento")
                        .HasColumnName("hora_fechamento")
                        .HasColumnType("time without time zone");

                    b.Property<decimal?>("VlFimCartao")
                        .HasColumnName("vl_fim_cartao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFimCheque")
                        .HasColumnName("vl_fim_cheque")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFimDinheiro")
                        .HasColumnName("vl_fim_dinheiro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFimOutros")
                        .HasColumnName("vl_fim_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("VlIniCartao")
                        .HasColumnName("vl_ini_cartao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("VlIniCheque")
                        .HasColumnName("vl_ini_cheque")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("VlIniDinheiro")
                        .HasColumnName("vl_ini_dinheiro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("VlIniOutros")
                        .HasColumnName("vl_ini_outros")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdCaixa", "CdFuncionario", "NrSequencial");

                    b.ToTable("cxa_abertura");
                });

            modelBuilder.Entity("CrudCharts.Models.CxaAcesso", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<char?>("Exclusao")
                        .HasColumnName("exclusao");

                    b.Property<char?>("Gravacao")
                        .HasColumnName("gravacao");

                    b.Property<char?>("Leitura")
                        .HasColumnName("leitura");

                    b.Property<string>("Obs")
                        .HasColumnName("obs")
                        .HasMaxLength(40);

                    b.HasKey("CdFilial", "CdFuncionario", "CdCaixa");

                    b.ToTable("cxa_acesso");
                });

            modelBuilder.Entity("CrudCharts.Models.CxaConta", b =>
                {
                    b.Property<int>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<string>("CdCompleto")
                        .IsRequired()
                        .HasColumnName("cd_completo")
                        .HasMaxLength(30);

                    b.Property<int?>("CdContaContabil")
                        .HasColumnName("cd_conta_contabil");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdHistorico")
                        .HasColumnName("cd_historico");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<char?>("FlAtivo")
                        .HasColumnName("fl_ativo");

                    b.Property<string>("FlFixvar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_fixvar")
                        .HasDefaultValueSql("'N'::character varying")
                        .HasMaxLength(1);

                    b.Property<string>("FlFranquia")
                        .HasColumnName("fl_franquia")
                        .HasMaxLength(1);

                    b.Property<int>("GrauSuperior")
                        .HasColumnName("grau_superior");

                    b.Property<string>("NmConta")
                        .IsRequired()
                        .HasColumnName("nm_conta")
                        .HasMaxLength(50);

                    b.Property<int>("TpConta")
                        .HasColumnName("tp_conta");

                    b.HasKey("CdConta");

                    b.HasIndex("CdContaContabil");

                    b.ToTable("cxa_conta");
                });

            modelBuilder.Entity("CrudCharts.Models.DocNaoFiscalC", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdEcf")
                        .HasColumnName("cd_ecf");

                    b.Property<int?>("Coo")
                        .HasColumnName("coo");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<string>("FlMfAdicional")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_mf_adicional")
                        .HasDefaultValueSql("'N'::character varying")
                        .HasMaxLength(1);

                    b.Property<int?>("Gnf")
                        .HasColumnName("gnf");

                    b.Property<string>("HashDocNaoFiscalCR6")
                        .HasColumnName("hash_doc_nao_fiscal_c_r6")
                        .HasMaxLength(70);

                    b.Property<string>("HashDocNaoFiscalCR7")
                        .HasColumnName("hash_doc_nao_fiscal_c_r7")
                        .HasMaxLength(70);

                    b.Property<TimeSpan?>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("NrDctoNfsc")
                        .HasColumnName("nr_dcto_nfsc");

                    b.Property<int?>("NrDoc")
                        .HasColumnName("nr_doc");

                    b.Property<string>("TipoDoc")
                        .IsRequired()
                        .HasColumnName("tipo_doc")
                        .HasMaxLength(2);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdEcf");

                    b.ToTable("doc_nao_fiscal_c");
                });

            modelBuilder.Entity("CrudCharts.Models.DocNaoFiscalI", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<long>("IdDocNaoFiscal")
                        .HasColumnName("id_doc_nao_fiscal");

                    b.Property<string>("NmPagamento")
                        .IsRequired()
                        .HasColumnName("nm_pagamento")
                        .HasMaxLength(25);

                    b.Property<decimal?>("VlPago")
                        .HasColumnName("vl_pago")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdDocNaoFiscal");

                    b.ToTable("doc_nao_fiscal_i");
                });

            modelBuilder.Entity("CrudCharts.Models.DocProducao", b =>
                {
                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("CdCancelamento")
                        .HasColumnName("cd_cancelamento");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtProducao")
                        .HasColumnName("dt_producao")
                        .HasColumnType("date");

                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<int>("IdNfsc")
                        .HasColumnName("id_nfsc");

                    b.Property<int?>("NrOrdemProducao")
                        .HasColumnName("nr_ordem_producao");

                    b.Property<double?>("QtProduzido")
                        .HasColumnName("qt_produzido");

                    b.HasKey("NrDocumento");

                    b.HasIndex("CdFilial");

                    b.ToTable("doc_producao");
                });

            modelBuilder.Entity("CrudCharts.Models.Estocagem", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("LocalEstocagem")
                        .HasColumnName("local_estocagem")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmLocal")
                        .IsRequired()
                        .HasColumnName("nm_local")
                        .HasMaxLength(40);

                    b.HasKey("CdFilial", "LocalEstocagem");

                    b.HasIndex("LocalEstocagem")
                        .HasName("ind_local_estocagem");

                    b.ToTable("estocagem");
                });

            modelBuilder.Entity("CrudCharts.Models.Estoque", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("Mes")
                        .HasColumnName("mes");

                    b.Property<int>("Ano")
                        .HasColumnName("ano");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("QtEntradas")
                        .HasColumnName("qt_entradas");

                    b.Property<double?>("QtEntradas2")
                        .HasColumnName("qt_entradas2");

                    b.Property<double?>("QtSaidas")
                        .HasColumnName("qt_saidas");

                    b.Property<double?>("QtSaidas2")
                        .HasColumnName("qt_saidas2");

                    b.Property<double?>("Qtde")
                        .HasColumnName("qtde");

                    b.Property<double?>("Qtde2")
                        .HasColumnName("qtde2");

                    b.HasKey("CdFilial", "CdProduto", "Mes", "Ano");

                    b.HasIndex("Ano")
                        .HasName("idx_estoque_ano");

                    b.HasIndex("CdProduto");

                    b.HasIndex("Mes")
                        .HasName("idx_estoque_mes");

                    b.HasIndex("Ano", "CdFilial", "CdProduto", "Mes")
                        .HasName("ind_estoque_chave");

                    b.ToTable("estoque");
                });

            modelBuilder.Entity("CrudCharts.Models.Filial", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<decimal?>("AliqIcmsSimples")
                        .HasColumnName("aliq_icms_simples")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<char?>("BloquearEdicaoJurosMulta")
                        .HasColumnName("bloquear_edicao_juros_multa");

                    b.Property<bool?>("Calculoconveniost")
                        .HasColumnName("calculoconveniost");

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdClienteConsumidor")
                        .HasColumnName("cd_cliente_consumidor");

                    b.Property<int?>("CdClienteEmpresa")
                        .HasColumnName("cd_cliente_empresa");

                    b.Property<int?>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<int?>("CdCrt")
                        .HasColumnName("cd_crt");

                    b.Property<short?>("CdCtblExporta")
                        .HasColumnName("cd_ctbl_exporta");

                    b.Property<int?>("CdFilialFornecedor")
                        .HasColumnName("cd_filial_fornecedor");

                    b.Property<int?>("CdFornecedorImpostoSt")
                        .HasColumnName("cd_fornecedor_imposto_st");

                    b.Property<int?>("CdImpfiscalAtzEstoque")
                        .HasColumnName("cd_impfiscal_atz_estoque");

                    b.Property<int?>("CdMensagemCupom")
                        .HasColumnName("cd_mensagem_cupom");

                    b.Property<int?>("CdMensagemDav")
                        .HasColumnName("cd_mensagem_dav");

                    b.Property<int?>("CdMensagemDescontoRo")
                        .HasColumnName("cd_mensagem_desconto_ro");

                    b.Property<int?>("CdMensagemDifal")
                        .HasColumnName("cd_mensagem_difal");

                    b.Property<int?>("CdMensagemFcp")
                        .HasColumnName("cd_mensagem_fcp");

                    b.Property<int?>("CdMensagemIcmRetAnt")
                        .HasColumnName("cd_mensagem_icm_ret_ant");

                    b.Property<int?>("CdMensagemIcmStNotaDev")
                        .HasColumnName("cd_mensagem_icm_st_nota_dev");

                    b.Property<int?>("CdMensagemIpiNotaDev")
                        .HasColumnName("cd_mensagem_ipi_nota_dev");

                    b.Property<int?>("CdMensagemPreVenda")
                        .HasColumnName("cd_mensagem_pre_venda");

                    b.Property<int?>("CdMensagemReducao")
                        .HasColumnName("cd_mensagem_reducao");

                    b.Property<int?>("CdMensagemSimples")
                        .HasColumnName("cd_mensagem_simples");

                    b.Property<int?>("CdMensagemTotTrib")
                        .HasColumnName("cd_mensagem_tot_trib");

                    b.Property<int?>("CdOpEntradaProducao")
                        .HasColumnName("cd_op_entrada_producao");

                    b.Property<int?>("CdOpSaidaProducao")
                        .HasColumnName("cd_op_saida_producao");

                    b.Property<string>("CdProdfreteCompra")
                        .HasColumnName("cd_prodfrete_compra")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteComprasC")
                        .HasColumnName("cd_prodfrete_compras_c")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteEntrada")
                        .HasColumnName("cd_prodfrete_entrada")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteEntradasC")
                        .HasColumnName("cd_prodfrete_entradas_c")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteSaida")
                        .HasColumnName("cd_prodfrete_saida")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteSaidasC")
                        .HasColumnName("cd_prodfrete_saidas_c")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteTrans")
                        .HasColumnName("cd_prodfrete_trans")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteVenda")
                        .HasColumnName("cd_prodfrete_venda")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdfreteVendasC")
                        .HasColumnName("cd_prodfrete_vendas_c")
                        .HasMaxLength(15);

                    b.Property<int?>("CdTabelaPrecoPadrao")
                        .HasColumnName("cd_tabela_preco_padrao");

                    b.Property<int?>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<int?>("CdUsrPadrao")
                        .HasColumnName("cd_usr_padrao");

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<bool?>("CfInformaDocumento")
                        .HasColumnName("cf_informa_documento");

                    b.Property<string>("Cgc")
                        .HasColumnName("cgc")
                        .HasMaxLength(18);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("cidade")
                        .HasMaxLength(50);

                    b.Property<string>("CnaeFiscal")
                        .HasColumnName("cnae_fiscal")
                        .HasMaxLength(7);

                    b.Property<string>("CodVersaoEfd")
                        .HasColumnName("cod_versao_efd")
                        .HasMaxLength(3);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(20);

                    b.Property<string>("CstFreteIcmsNcred")
                        .HasColumnName("cst_frete_icms_ncred")
                        .HasMaxLength(4);

                    b.Property<string>("CstFreteIcmscred")
                        .HasColumnName("cst_frete_icmscred")
                        .HasMaxLength(4);

                    b.Property<string>("CustoEmOrcamento")
                        .HasColumnName("custo_em_orcamento")
                        .HasMaxLength(1);

                    b.Property<char?>("DatabaseAuditor")
                        .HasColumnName("database_auditor");

                    b.Property<int?>("DiasJuro")
                        .HasColumnName("dias_juro");

                    b.Property<int?>("DiasMulta")
                        .HasColumnName("dias_multa");

                    b.Property<int?>("DiasVcto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dias_vcto")
                        .HasDefaultValueSql("0");

                    b.Property<string>("DirArqCarneEcf")
                        .HasColumnName("dir_arq_carne_ecf")
                        .HasMaxLength(150);

                    b.Property<string>("DirArqComprovanteEcf")
                        .HasColumnName("dir_arq_comprovante_ecf")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<DateTime?>("DtAtzEstoque")
                        .HasColumnName("dt_atz_estoque")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtUltimaIntegracao")
                        .HasColumnName("dt_ultima_integracao")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(75);

                    b.Property<string>("EmpresaSimples")
                        .HasColumnName("empresa_simples")
                        .HasMaxLength(1);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(16);

                    b.Property<bool?>("FlAdicionaStCustoProduto")
                        .HasColumnName("fl_adiciona_st_custo_produto");

                    b.Property<string>("FlAlteraVendOrc")
                        .HasColumnName("fl_altera_vend_orc")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlAlterarMarkupCadastro")
                        .HasColumnName("fl_alterar_markup_cadastro");

                    b.Property<char>("FlApenasVendedorDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_apenas_vendedor_doc")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<char?>("FlArmazInterfoc")
                        .HasColumnName("fl_armaz_interfoc");

                    b.Property<string>("FlBloqCancelamentoEcf")
                        .HasColumnName("fl_bloq_cancelamento_ecf")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlCalculaComissao")
                        .HasColumnName("fl_calcula_comissao");

                    b.Property<string>("FlCalculaDiferencaIcms")
                        .HasColumnName("fl_calcula_diferenca_icms")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlCalculaPrazoDataSaida")
                        .HasColumnName("fl_calcula_prazo_data_saida");

                    b.Property<string>("FlClienteCnpjDupl")
                        .HasColumnName("fl_cliente_cnpj_dupl")
                        .HasMaxLength(1);

                    b.Property<string>("FlCodCliforDanfe")
                        .HasColumnName("fl_cod_clifor_danfe")
                        .HasMaxLength(1);

                    b.Property<string>("FlComissaoVendabaixa")
                        .HasColumnName("fl_comissao_vendabaixa")
                        .HasMaxLength(1);

                    b.Property<string>("FlConheFreteSt")
                        .HasColumnName("fl_conhe_frete_st")
                        .HasMaxLength(1);

                    b.Property<string>("FlConsProd")
                        .HasColumnName("fl_cons_prod")
                        .HasMaxLength(1);

                    b.Property<char?>("FlContigenciaMunicipal")
                        .HasColumnName("fl_contigencia_municipal");

                    b.Property<string>("FlContribuinte")
                        .HasColumnName("fl_contribuinte")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlControlarEstoq")
                        .HasColumnName("fl_controlar_estoq");

                    b.Property<string>("FlControleContas")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_controle_contas")
                        .HasDefaultValueSql("'N'::character varying")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlControleCredito")
                        .HasColumnName("fl_controle_credito");

                    b.Property<string>("FlCustoFreteSt")
                        .HasColumnName("fl_custo_frete_st")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlDeducaoIcms")
                        .HasColumnName("fl_deducao_icms");

                    b.Property<string>("FlDeducaoPiscofins")
                        .HasColumnName("fl_deducao_piscofins")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlDescontoIncondicionado")
                        .HasColumnName("fl_desconto_incondicionado");

                    b.Property<string>("FlEnviaBlocox")
                        .HasColumnName("fl_envia_blocox")
                        .HasMaxLength(1);

                    b.Property<string>("FlFilialTitCartao")
                        .HasColumnName("fl_filial_tit_cartao")
                        .HasMaxLength(1);

                    b.Property<string>("FlFitossanitarioSira")
                        .HasColumnName("fl_fitossanitario_sira")
                        .HasMaxLength(1);

                    b.Property<string>("FlFlex")
                        .HasColumnName("fl_flex")
                        .HasMaxLength(1);

                    b.Property<string>("FlImpVendedorClienteNfsc")
                        .HasColumnName("fl_imp_vendedor_cliente_nfsc")
                        .HasMaxLength(1);

                    b.Property<char?>("FlImportarVendedorPrimeiro")
                        .HasColumnName("fl_importar_vendedor_primeiro");

                    b.Property<char?>("FlImportarVendedorSegundo")
                        .HasColumnName("fl_importar_vendedor_segundo");

                    b.Property<char?>("FlImportarVendedorTerceiro")
                        .HasColumnName("fl_importar_vendedor_terceiro");

                    b.Property<bool?>("FlImprimeCarneEcf")
                        .HasColumnName("fl_imprime_carne_ecf");

                    b.Property<bool?>("FlImprimeNf")
                        .HasColumnName("fl_imprime_nf");

                    b.Property<bool?>("FlImprimeOrdemEntrega")
                        .HasColumnName("fl_imprime_ordem_entrega");

                    b.Property<bool?>("FlImprimirNfs")
                        .HasColumnName("fl_imprimir_nfs");

                    b.Property<bool?>("FlImprimirOrcEcf")
                        .HasColumnName("fl_imprimir_orc_ecf");

                    b.Property<bool?>("FlIndustria")
                        .HasColumnName("fl_industria");

                    b.Property<bool?>("FlInformarNrNf")
                        .HasColumnName("fl_informar_nr_nf");

                    b.Property<string>("FlItemDuplNfe")
                        .HasColumnName("fl_item_dupl_nfe")
                        .HasMaxLength(1);

                    b.Property<string>("FlItemDuplNfs")
                        .HasColumnName("fl_item_dupl_nfs")
                        .HasMaxLength(1);

                    b.Property<string>("FlManifestoEletronico")
                        .HasColumnName("fl_manifesto_eletronico")
                        .HasMaxLength(1);

                    b.Property<string>("FlMultaPorcentagem")
                        .HasColumnName("fl_multa_porcentagem")
                        .HasMaxLength(1);

                    b.Property<char?>("FlNotaEletronicaMunicipal")
                        .HasColumnName("fl_nota_eletronica_municipal");

                    b.Property<string>("FlOculista")
                        .HasColumnName("fl_oculista")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrcExibirUltVenda")
                        .HasColumnName("fl_orc_exibir_ult_venda")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrcExibirVlCompra")
                        .HasColumnName("fl_orc_exibir_vl_compra")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrcImpVendCliente")
                        .HasColumnName("fl_orc_imp_vend_cliente")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrcProdSemVendedor")
                        .HasColumnName("fl_orc_prod_sem_vendedor")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrcServSemVendedor")
                        .HasColumnName("fl_orc_serv_sem_vendedor")
                        .HasMaxLength(1);

                    b.Property<string>("FlPosVenda")
                        .HasColumnName("fl_pos_venda")
                        .HasMaxLength(1);

                    b.Property<char?>("FlRealPresumido")
                        .HasColumnName("fl_real_presumido");

                    b.Property<string>("FlRedeUniagro")
                        .HasColumnName("fl_rede_uniagro")
                        .HasMaxLength(1);

                    b.Property<string>("FlSeguradora")
                        .HasColumnName("fl_seguradora")
                        .HasMaxLength(1);

                    b.Property<string>("FlSenhaSupervisorDav")
                        .HasColumnName("fl_senha_supervisor_dav")
                        .HasMaxLength(1);

                    b.Property<string>("FlSimplesExcessoReceita")
                        .HasColumnName("fl_simples_excesso_receita")
                        .HasMaxLength(1);

                    b.Property<string>("FlStNotaEsta")
                        .HasColumnName("fl_st_nota_esta")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlUtilizaContaContabil")
                        .HasColumnName("fl_utiliza_conta_contabil");

                    b.Property<char?>("FlUtilizaIntegracao")
                        .HasColumnName("fl_utiliza_integracao");

                    b.Property<string>("FlUtilizaNfce")
                        .HasColumnName("fl_utiliza_nfce")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlUtilizaPaf")
                        .HasColumnName("fl_utiliza_paf");

                    b.Property<bool?>("FlValorDesconto")
                        .HasColumnName("fl_valor_desconto");

                    b.Property<bool?>("FlValorFrete")
                        .HasColumnName("fl_valor_frete");

                    b.Property<bool?>("FlValorSeguro")
                        .HasColumnName("fl_valor_seguro");

                    b.Property<string>("FlVendaOutrosUf")
                        .HasColumnName("fl_venda_outros_uf")
                        .HasMaxLength(1);

                    b.Property<string>("FlVendaPrazoClienteBloq")
                        .HasColumnName("fl_venda_prazo_cliente_bloq")
                        .HasMaxLength(1);

                    b.Property<string>("FlVendaVistaClienteBloq")
                        .HasColumnName("fl_venda_vista_cliente_bloq")
                        .HasMaxLength(1);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(16);

                    b.Property<string>("FusoHorario")
                        .HasColumnName("fuso_horario")
                        .HasMaxLength(6);

                    b.Property<string>("HashFilialE1")
                        .HasColumnName("hash_filial_e1")
                        .HasMaxLength(70);

                    b.Property<string>("HashFilialR1")
                        .HasColumnName("hash_filial_r1")
                        .HasMaxLength(70);

                    b.Property<TimeSpan?>("HrAtzEstoque")
                        .HasColumnName("hr_atz_estoque")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Ie")
                        .HasColumnName("ie")
                        .HasMaxLength(18);

                    b.Property<string>("Im")
                        .HasColumnName("im")
                        .HasMaxLength(10);

                    b.Property<int?>("IndApurIpi")
                        .HasColumnName("ind_apur_ipi");

                    b.Property<string>("IndPerfilSped")
                        .HasColumnName("ind_perfil_sped")
                        .HasMaxLength(1);

                    b.Property<int?>("Modulo")
                        .HasColumnName("modulo");

                    b.Property<string>("NfeConjugada")
                        .HasColumnName("nfe_conjugada")
                        .HasMaxLength(1);

                    b.Property<string>("NmFantasia")
                        .HasColumnName("nm_fantasia")
                        .HasMaxLength(50);

                    b.Property<string>("NmFilial")
                        .IsRequired()
                        .HasColumnName("nm_filial")
                        .HasMaxLength(50);

                    b.Property<string>("NotaEletronica")
                        .HasColumnName("nota_eletronica")
                        .HasMaxLength(1);

                    b.Property<int?>("NrLoteNfe")
                        .HasColumnName("nr_lote_nfe");

                    b.Property<string>("NrSerieProducao")
                        .HasColumnName("nr_serie_producao")
                        .HasMaxLength(3);

                    b.Property<int?>("NrUltNfs")
                        .HasColumnName("nr_ult_nfs");

                    b.Property<int?>("Numero")
                        .HasColumnName("numero");

                    b.Property<decimal?>("PcCofins")
                        .HasColumnName("pc_cofins")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("PcPis")
                        .HasColumnName("pc_pis")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("Suframa")
                        .HasColumnName("suframa")
                        .HasMaxLength(9);

                    b.Property<decimal?>("TaxaJuros")
                        .HasColumnName("taxa_juros")
                        .HasColumnType("numeric(10,3)");

                    b.Property<int?>("TpAmbienteNfe")
                        .HasColumnName("tp_ambiente_nfe");

                    b.Property<char?>("TpAmbienteNfeMunicipal")
                        .HasColumnName("tp_ambiente_nfe_municipal");

                    b.Property<string>("TpCliPadraoVenda")
                        .HasColumnName("tp_cli_padrao_venda")
                        .HasMaxLength(1);

                    b.Property<string>("TpComissao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tp_comissao")
                        .HasDefaultValueSql("'I'::character varying")
                        .HasMaxLength(1);

                    b.Property<string>("TpIcmsEntradaFrete")
                        .HasColumnName("tp_icms_entrada_frete")
                        .HasMaxLength(1);

                    b.Property<string>("TpIcmsSaidaFrete")
                        .HasColumnName("tp_icms_saida_frete")
                        .HasMaxLength(1);

                    b.Property<string>("TpPiscofinsEntradaFrete")
                        .HasColumnName("tp_piscofins_entrada_frete")
                        .HasMaxLength(1);

                    b.Property<string>("TpPiscofinsSaidaFrete")
                        .HasColumnName("tp_piscofins_saida_frete")
                        .HasMaxLength(1);

                    b.Property<int?>("TpSistema")
                        .HasColumnName("tp_sistema");

                    b.Property<int?>("TpStatusNfe")
                        .HasColumnName("tp_status_nfe");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.Property<int?>("VlIdGeral")
                        .HasColumnName("vl_id_geral");

                    b.Property<decimal?>("VlMinCsll")
                        .HasColumnName("vl_min_csll")
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal?>("VlMinInss")
                        .HasColumnName("vl_min_inss")
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal?>("VlMultaContas")
                        .HasColumnName("vl_multa_contas")
                        .HasColumnType("numeric(6,3)");

                    b.HasKey("CdFilial");

                    b.HasIndex("CdConta");

                    b.HasIndex("CdMensagemCupom");

                    b.HasIndex("CdMensagemDav");

                    b.HasIndex("CdMensagemIcmStNotaDev");

                    b.HasIndex("CdMensagemPreVenda");

                    b.HasIndex("CdTabelaPrecoPadrao");

                    b.ToTable("filial");
                });

            modelBuilder.Entity("CrudCharts.Models.FilialBd", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<char>("FlDadosContasDesatualizados")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_dados_contas_desatualizados")
                        .HasDefaultValueSql("'I'::bpchar");

                    b.Property<bool>("FlSincronizarContas")
                        .HasColumnName("fl_sincronizar_contas");

                    b.Property<string>("NmBd")
                        .IsRequired()
                        .HasColumnName("nm_bd")
                        .HasMaxLength(200);

                    b.Property<string>("NmFilial")
                        .IsRequired()
                        .HasColumnName("nm_filial")
                        .HasMaxLength(50);

                    b.Property<string>("NmServidorBd")
                        .IsRequired()
                        .HasColumnName("nm_servidor_bd")
                        .HasMaxLength(100);

                    b.Property<string>("NmUsuario")
                        .IsRequired()
                        .HasColumnName("nm_usuario")
                        .HasMaxLength(50);

                    b.Property<int>("NrMinutosContasDesatualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nr_minutos_contas_desatualizado")
                        .HasDefaultValueSql("10");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("senha")
                        .HasMaxLength(100);

                    b.HasKey("CdFilial");

                    b.ToTable("filial_bd");
                });

            modelBuilder.Entity("CrudCharts.Models.FilialConfNfeNfse", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CertificadoCaminho")
                        .HasColumnName("certificado_caminho")
                        .HasMaxLength(100);

                    b.Property<string>("CertificadoNumeroSerie")
                        .HasColumnName("certificado_numero_serie")
                        .HasMaxLength(60);

                    b.Property<string>("CertificadoSenha")
                        .HasColumnName("certificado_senha")
                        .HasMaxLength(20);

                    b.Property<string>("Csc")
                        .HasColumnName("csc")
                        .HasMaxLength(36);

                    b.Property<string>("EmailNfe")
                        .HasColumnName("email_nfe")
                        .HasMaxLength(100);

                    b.Property<string>("FlEnviaEmail")
                        .HasColumnName("fl_envia_email")
                        .HasMaxLength(1);

                    b.Property<string>("IdCsc")
                        .HasColumnName("id_csc")
                        .HasMaxLength(6);

                    b.Property<string>("Logonfe")
                        .HasColumnName("logonfe")
                        .HasMaxLength(100);

                    b.Property<string>("Logoprefeitura")
                        .HasColumnName("logoprefeitura")
                        .HasMaxLength(100);

                    b.Property<string>("PathSchemaMdfe")
                        .HasColumnName("path_schema_mdfe")
                        .HasMaxLength(100);

                    b.Property<string>("PathSchemaNfe")
                        .HasColumnName("path_schema_nfe")
                        .HasMaxLength(100);

                    b.Property<string>("PathSchemaNfse")
                        .HasColumnName("path_schema_nfse")
                        .HasMaxLength(100);

                    b.Property<string>("PathXmlMdfe")
                        .HasColumnName("path_xml_mdfe")
                        .HasMaxLength(100);

                    b.Property<string>("PathXmlNfe")
                        .HasColumnName("path_xml_nfe")
                        .HasMaxLength(100);

                    b.Property<string>("PathXmlNfse")
                        .HasColumnName("path_xml_nfse")
                        .HasMaxLength(100);

                    b.Property<int?>("RegimeEspecialTribNfse")
                        .HasColumnName("regime_especial_trib_nfse");

                    b.Property<string>("SenhaWebserv")
                        .HasColumnName("senha_webserv")
                        .HasMaxLength(100);

                    b.Property<int?>("TempoEsperaConsulta")
                        .HasColumnName("tempo_espera_consulta");

                    b.Property<int?>("Tentativas")
                        .HasColumnName("tentativas");

                    b.Property<string>("TpAmbienteMdfe")
                        .HasColumnName("tp_ambiente_mdfe")
                        .HasMaxLength(1);

                    b.Property<string>("TpAmbienteNfe")
                        .HasColumnName("tp_ambiente_nfe")
                        .HasMaxLength(1);

                    b.Property<string>("TpAmbienteNfse")
                        .HasColumnName("tp_ambiente_nfse")
                        .HasMaxLength(1);

                    b.Property<string>("UsuarioWebserv")
                        .HasColumnName("usuario_webserv")
                        .HasMaxLength(100);

                    b.Property<string>("VersaoNfe")
                        .HasColumnName("versao_nfe")
                        .HasMaxLength(1);

                    b.Property<bool?>("Visualizar")
                        .HasColumnName("visualizar");

                    b.HasKey("CdFilial");

                    b.ToTable("filial_conf_nfe_nfse");
                });

            modelBuilder.Entity("CrudCharts.Models.FilialEmail", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("NmOrigem")
                        .HasColumnName("nm_origem")
                        .HasMaxLength(50);

                    b.Property<int?>("Porta")
                        .HasColumnName("porta");

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasMaxLength(50);

                    b.Property<string>("ServidorSmtp")
                        .HasColumnName("servidor_smtp")
                        .HasMaxLength(50);

                    b.Property<string>("Ssl")
                        .HasColumnName("ssl")
                        .HasMaxLength(1);

                    b.Property<int?>("TpEmail")
                        .HasColumnName("tp_email");

                    b.Property<string>("Usuario")
                        .HasColumnName("usuario")
                        .HasMaxLength(100);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial", "TpEmail")
                        .IsUnique()
                        .HasName("unq1_filial_email");

                    b.ToTable("filial_email");
                });

            modelBuilder.Entity("CrudCharts.Models.FilialIeSt", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.Property<string>("IeSt")
                        .IsRequired()
                        .HasColumnName("ie_st")
                        .HasMaxLength(18);

                    b.HasKey("CdFilial", "Uf");

                    b.ToTable("filial_ie_st");
                });

            modelBuilder.Entity("CrudCharts.Models.Fornecedor", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int?>("CdContaContabil")
                        .HasColumnName("cd_conta_contabil");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(20);

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj")
                        .HasMaxLength(18);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(70);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(80);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<char?>("FlAgricultor")
                        .HasColumnName("fl_agricultor");

                    b.Property<char?>("FlAtivo")
                        .HasColumnName("fl_ativo");

                    b.Property<bool?>("FlContNcont")
                        .HasColumnName("fl_cont_ncont");

                    b.Property<string>("FlFornecedor")
                        .HasColumnName("fl_fornecedor")
                        .HasMaxLength(1);

                    b.Property<string>("FlSeguradora")
                        .HasColumnName("fl_seguradora")
                        .HasMaxLength(1);

                    b.Property<string>("FlSimples")
                        .HasColumnName("fl_simples")
                        .HasMaxLength(1);

                    b.Property<string>("FlTransportador")
                        .HasColumnName("fl_transportador")
                        .HasMaxLength(1);

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(20);

                    b.Property<string>("Inscricao")
                        .HasColumnName("inscricao")
                        .HasMaxLength(18);

                    b.Property<string>("InscricaoSuframa")
                        .HasColumnName("inscricao_suframa")
                        .HasMaxLength(9);

                    b.Property<string>("NmFantasia")
                        .HasColumnName("nm_fantasia")
                        .HasMaxLength(80);

                    b.Property<string>("NmFornecedor")
                        .IsRequired()
                        .HasColumnName("nm_fornecedor")
                        .HasMaxLength(80);

                    b.Property<string>("Numero")
                        .HasColumnName("numero")
                        .HasMaxLength(50);

                    b.Property<string>("ObservacaoFornecedor")
                        .HasColumnName("observacao_fornecedor");

                    b.Property<string>("PessoaContato")
                        .HasColumnName("pessoa_contato")
                        .HasMaxLength(40);

                    b.Property<string>("Rntrc")
                        .HasColumnName("rntrc")
                        .HasMaxLength(8);

                    b.HasKey("CdFilial", "CdFornecedor");

                    b.HasIndex("CdContaContabil");

                    b.ToTable("fornecedor");
                });

            modelBuilder.Entity("CrudCharts.Models.FornecedorContato", b =>
                {
                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int>("CdContato")
                        .HasColumnName("cd_contato");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.HasKey("CdFornecedor", "CdContato");

                    b.HasIndex("CdContato");

                    b.HasIndex("CdFilial", "CdFornecedor");

                    b.ToTable("fornecedor_contato");
                });

            modelBuilder.Entity("CrudCharts.Models.FornecedorUnmedida", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<string>("UnMedidaForn")
                        .HasColumnName("un_medida_forn")
                        .HasMaxLength(6);

                    b.HasKey("IdGeral");

                    b.ToTable("fornecedor_unmedida");
                });

            modelBuilder.Entity("CrudCharts.Models.Fornprod", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int>("CdProduto")
                        .HasColumnName("cd_produto");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("CdFilial", "CdFornecedor", "CdProduto");

                    b.ToTable("fornprod");
                });

            modelBuilder.Entity("CrudCharts.Models.Fornveic", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<decimal>("Capacidade")
                        .HasColumnName("capacidade")
                        .HasColumnType("numeric(9,2)");

                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int>("CdVeiculo")
                        .HasColumnName("cd_veiculo");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<string>("Observacoes")
                        .HasColumnName("observacoes")
                        .HasMaxLength(2000);

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<decimal>("Tara")
                        .HasColumnName("tara")
                        .HasColumnType("numeric(9,2)");

                    b.Property<int>("TpCarroceria")
                        .HasColumnName("tp_carroceria");

                    b.Property<int>("TpRodado")
                        .HasColumnName("tp_rodado");

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("CdFilial", "CdFornecedor");

                    b.HasIndex("CdFilial", "CdVeiculo");

                    b.HasIndex("CdFornecedor", "CdVeiculo", "PlacaVeiculo")
                        .IsUnique()
                        .HasName("unq_fornveic");

                    b.ToTable("fornveic");
                });

            modelBuilder.Entity("CrudCharts.Models.FrenteCaixa", b =>
                {
                    b.Property<int>("CdFrenteCaixa")
                        .HasColumnName("cd_frente_caixa");

                    b.Property<int>("CdOperacao")
                        .HasColumnName("cd_operacao");

                    b.Property<int>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<string>("Exporta")
                        .IsRequired()
                        .HasColumnName("exporta")
                        .HasMaxLength(200);

                    b.Property<string>("FlUtilizado")
                        .IsRequired()
                        .HasColumnName("fl_utilizado")
                        .HasMaxLength(1);

                    b.Property<string>("Importa")
                        .IsRequired()
                        .HasColumnName("importa")
                        .HasMaxLength(200);

                    b.Property<string>("NmFrenteCaixa")
                        .IsRequired()
                        .HasColumnName("nm_frente_caixa")
                        .HasMaxLength(60);

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasColumnName("nome_arquivo")
                        .HasMaxLength(20);

                    b.HasKey("CdFrenteCaixa");

                    b.HasIndex("CdOperacao");

                    b.HasIndex("CdTabelaPreco");

                    b.ToTable("frente_caixa");
                });

            modelBuilder.Entity("CrudCharts.Models.Funcionario", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("Bairro")
                        .HasColumnName("bairro")
                        .HasMaxLength(30);

                    b.Property<int?>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int?>("CdCargo")
                        .HasColumnName("cd_cargo");

                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdFilialPadrao")
                        .HasColumnName("cd_filial_padrao");

                    b.Property<int?>("CdUsr")
                        .HasColumnName("cd_usr");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Cnh")
                        .HasColumnName("cnh")
                        .HasMaxLength(18);

                    b.Property<decimal?>("CotaMensal")
                        .HasColumnName("cota_mensal")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasMaxLength(18);

                    b.Property<decimal?>("CustoHora")
                        .HasColumnName("custo_hora")
                        .HasColumnType("numeric(9,2)");

                    b.Property<DateTime?>("DtAdmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_admissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtAniversario")
                        .HasColumnName("dt_aniversario")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("EMail")
                        .HasColumnName("e_mail")
                        .HasMaxLength(80);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(80);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<bool?>("FlAlterarFilial")
                        .HasColumnName("fl_alterar_filial");

                    b.Property<char>("FlAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_ativo")
                        .HasDefaultValueSql("'S'::bpchar");

                    b.Property<bool?>("FlControlarAcesso")
                        .HasColumnName("fl_controlar_acesso");

                    b.Property<string>("FlExibeCustos")
                        .HasColumnName("fl_exibe_custos")
                        .HasMaxLength(1);

                    b.Property<bool>("FlMecanico")
                        .HasColumnName("fl_mecanico");

                    b.Property<bool?>("FlNaoAcessaValores")
                        .HasColumnName("fl_nao_acessa_valores");

                    b.Property<bool?>("FlUsuario")
                        .HasColumnName("fl_usuario");

                    b.Property<string>("FlVeSaldoCxaEmpFechamento")
                        .HasColumnName("fl_ve_saldo_cxa_emp_fechamento")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlVendedor")
                        .HasColumnName("fl_vendedor");

                    b.Property<string>("Fone")
                        .HasColumnName("fone")
                        .HasMaxLength(20);

                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasMaxLength(15);

                    b.Property<string>("MsgPadraoNfe")
                        .HasColumnName("msg_padrao_nfe");

                    b.Property<string>("NmFuncionario")
                        .IsRequired()
                        .HasColumnName("nm_funcionario")
                        .HasMaxLength(80);

                    b.Property<string>("NmUsuarioSmtp")
                        .HasColumnName("nm_usuario_smtp")
                        .HasMaxLength(50);

                    b.Property<string>("Pis")
                        .HasColumnName("pis")
                        .HasMaxLength(18);

                    b.Property<int?>("PortaSmtp")
                        .HasColumnName("porta_smtp");

                    b.Property<string>("Rg")
                        .HasColumnName("rg")
                        .HasMaxLength(18);

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasMaxLength(10);

                    b.Property<string>("SenhaSmtp")
                        .HasColumnName("senha_smtp")
                        .HasMaxLength(50);

                    b.Property<string>("SmtpEmail")
                        .HasColumnName("smtp_email")
                        .HasMaxLength(100);

                    b.Property<string>("SslSmtp")
                        .HasColumnName("ssl_smtp")
                        .HasMaxLength(1);

                    b.Property<decimal?>("ValorVenda")
                        .HasColumnName("valor_venda")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("CdFilial", "CdFuncionario");

                    b.HasIndex("CdCargo", "CdFilial");

                    b.ToTable("funcionario");
                });

            modelBuilder.Entity("CrudCharts.Models.GrupoComissao", b =>
                {
                    b.Property<int>("CdGrupoComissao")
                        .HasColumnName("cd_grupo_comissao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(40);

                    b.Property<decimal>("PcComissao")
                        .HasColumnName("pc_comissao")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("CdGrupoComissao");

                    b.ToTable("grupo_comissao");
                });

            modelBuilder.Entity("CrudCharts.Models.GrupoOperacaoEs", b =>
                {
                    b.Property<string>("CdGrupo")
                        .HasColumnName("cd_grupo")
                        .HasMaxLength(2);

                    b.Property<string>("NmGrupo")
                        .HasColumnName("nm_grupo")
                        .HasMaxLength(50);

                    b.HasKey("CdGrupo");

                    b.ToTable("grupo_operacao_es");
                });

            modelBuilder.Entity("CrudCharts.Models.Gruprod", b =>
                {
                    b.Property<int>("CdGruprod")
                        .HasColumnName("cd_gruprod");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmGruprod")
                        .IsRequired()
                        .HasColumnName("nm_gruprod")
                        .HasMaxLength(40);

                    b.HasKey("CdGruprod");

                    b.ToTable("gruprod");
                });

            modelBuilder.Entity("CrudCharts.Models.Hash", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("FlValido")
                        .HasColumnName("fl_valido")
                        .HasMaxLength(1);

                    b.Property<string>("Hash1")
                        .IsRequired()
                        .HasColumnName("HASH")
                        .HasMaxLength(70);

                    b.Property<string>("NmTabela")
                        .IsRequired()
                        .HasColumnName("nm_tabela")
                        .HasMaxLength(30);

                    b.HasKey("IdGeral");

                    b.ToTable("HASH");
                });

            modelBuilder.Entity("CrudCharts.Models.HelpAtz", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao");

                    b.Property<int>("VersaoBd")
                        .HasColumnName("versao_bd");

                    b.Property<string>("VersaoSistema")
                        .IsRequired()
                        .HasColumnName("versao_sistema")
                        .HasMaxLength(12);

                    b.HasKey("IdGeral");

                    b.ToTable("help_atz");
                });

            modelBuilder.Entity("CrudCharts.Models.HelpAtzAlteracao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao");

                    b.Property<int>("IdHelpAtz")
                        .HasColumnName("id_help_atz");

                    b.Property<int?>("IdImagem")
                        .HasColumnName("id_imagem");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnName("titulo");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdHelpAtz");

                    b.ToTable("help_atz_alteracao");
                });

            modelBuilder.Entity("CrudCharts.Models.Impfiscal", b =>
                {
                    b.Property<int>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<int>("CdUsuarioEcf")
                        .HasColumnName("cd_usuario_ecf");

                    b.Property<string>("Cniee")
                        .IsRequired()
                        .HasColumnName("cniee")
                        .HasMaxLength(6);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtInstalacaoSb")
                        .HasColumnName("dt_instalacao_sb")
                        .HasColumnType("date");

                    b.Property<bool>("FlIntervencao")
                        .HasColumnName("fl_intervencao");

                    b.Property<string>("FlLmfAutomatica")
                        .HasColumnName("fl_lmf_automatica")
                        .HasMaxLength(1);

                    b.Property<string>("FlMfAdicional")
                        .IsRequired()
                        .HasColumnName("fl_mf_adicional")
                        .HasMaxLength(1);

                    b.Property<string>("HashImpfiscalE1")
                        .HasColumnName("hash_impfiscal_e1")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR1")
                        .HasColumnName("hash_impfiscal_r1")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR2")
                        .HasColumnName("hash_impfiscal_r2")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR3")
                        .HasColumnName("hash_impfiscal_r3")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR4")
                        .HasColumnName("hash_impfiscal_r4")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR5")
                        .HasColumnName("hash_impfiscal_r5")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR6")
                        .HasColumnName("hash_impfiscal_r6")
                        .HasMaxLength(70);

                    b.Property<string>("HashImpfiscalR7")
                        .HasColumnName("hash_impfiscal_r7")
                        .HasMaxLength(70);

                    b.Property<TimeSpan?>("HrInstalacaoSb")
                        .HasColumnName("hr_instalacao_sb")
                        .HasColumnType("time without time zone");

                    b.Property<string>("NmAPrazo")
                        .HasColumnName("nm_a_prazo")
                        .HasMaxLength(25);

                    b.Property<string>("NmCartao")
                        .HasColumnName("nm_cartao")
                        .HasMaxLength(25);

                    b.Property<string>("NmCheque")
                        .HasColumnName("nm_cheque")
                        .HasMaxLength(25);

                    b.Property<string>("NmConsultaCheque")
                        .HasColumnName("nm_consulta_cheque")
                        .HasMaxLength(25);

                    b.Property<string>("NmDinheiro")
                        .HasColumnName("nm_dinheiro")
                        .HasMaxLength(25);

                    b.Property<string>("NmImpfiscal")
                        .IsRequired()
                        .HasColumnName("nm_impfiscal")
                        .HasMaxLength(40);

                    b.Property<string>("NmMarca")
                        .IsRequired()
                        .HasColumnName("nm_marca")
                        .HasMaxLength(20);

                    b.Property<string>("NmModelo")
                        .IsRequired()
                        .HasColumnName("nm_modelo")
                        .HasMaxLength(20);

                    b.Property<string>("NmOutros")
                        .HasColumnName("nm_outros")
                        .HasMaxLength(25);

                    b.Property<int?>("NrPdv")
                        .HasColumnName("nr_pdv");

                    b.Property<string>("NrSerie")
                        .IsRequired()
                        .HasColumnName("nr_serie")
                        .HasMaxLength(80);

                    b.Property<string>("PortaComunicacao")
                        .IsRequired()
                        .HasColumnName("porta_comunicacao")
                        .HasMaxLength(10);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnName("tipo")
                        .HasMaxLength(10);

                    b.Property<string>("VersaoSb")
                        .IsRequired()
                        .HasColumnName("versao_sb")
                        .HasMaxLength(11);

                    b.HasKey("CdImpfiscal");

                    b.ToTable("impfiscal");
                });

            modelBuilder.Entity("CrudCharts.Models.ImpfiscalAliquota", b =>
                {
                    b.Property<int>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<double>("PcImposto")
                        .HasColumnName("pc_imposto");

                    b.Property<string>("FlImposto")
                        .HasColumnName("fl_imposto")
                        .HasMaxLength(1);

                    b.Property<int?>("NrOrdemEcf")
                        .HasColumnName("nr_ordem_ecf");

                    b.HasKey("CdImpfiscal", "PcImposto", "FlImposto");

                    b.ToTable("impfiscal_aliquota");
                });

            modelBuilder.Entity("CrudCharts.Models.LctoFlex", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdVendedor")
                        .HasColumnName("cd_vendedor");

                    b.Property<DateTime>("DtLcto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_lcto")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FlDebCred")
                        .IsRequired()
                        .HasColumnName("fl_deb_cred")
                        .HasMaxLength(1);

                    b.Property<int?>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int?>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal>("Valor")
                        .HasColumnName("valor")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial", "CdVendedor");

                    b.HasIndex("CdFilial", "NrDocumento", "NrSequencia");

                    b.ToTable("lcto_flex");
                });

            modelBuilder.Entity("CrudCharts.Models.Login", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Senha");

                    b.Property<string>("Usuario")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("CrudCharts.Models.LogSistema", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime?>("DtHrExclusao")
                        .HasColumnName("dt_hr_exclusao")
                        .HasColumnType("date");

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao");

                    b.Property<string>("Tabela")
                        .HasColumnName("tabela")
                        .HasMaxLength(40);

                    b.HasKey("IdGeral");

                    b.ToTable("log_sistema");
                });

            modelBuilder.Entity("CrudCharts.Models.Marca", b =>
                {
                    b.Property<int>("CdMarca")
                        .HasColumnName("cd_marca");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmMarca")
                        .IsRequired()
                        .HasColumnName("nm_marca")
                        .HasMaxLength(40);

                    b.HasKey("CdMarca");

                    b.ToTable("marca");
                });

            modelBuilder.Entity("CrudCharts.Models.Mdfe", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("ArqXml")
                        .HasColumnName("arq_xml");

                    b.Property<int>("CdCidadeCarregamento")
                        .HasColumnName("cd_cidade_carregamento");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdModalidade")
                        .HasColumnName("cd_modalidade");

                    b.Property<string>("CdModelo")
                        .IsRequired()
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<int>("CdProprietarioVeiculo")
                        .HasColumnName("cd_proprietario_veiculo");

                    b.Property<int?>("CdStatusMdfe")
                        .HasColumnName("cd_status_mdfe");

                    b.Property<string>("ChaveAcessoMdfe")
                        .HasColumnName("chave_acesso_mdfe")
                        .HasMaxLength(44);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao");

                    b.Property<int>("IdFornveic")
                        .HasColumnName("id_fornveic");

                    b.Property<int>("NrMdf")
                        .HasColumnName("nr_mdf");

                    b.Property<string>("NrProtocoloMdfe")
                        .HasColumnName("nr_protocolo_mdfe")
                        .HasMaxLength(15);

                    b.Property<string>("NrReciboMdfe")
                        .HasColumnName("nr_recibo_mdfe")
                        .HasMaxLength(15);

                    b.Property<string>("NrSerie")
                        .IsRequired()
                        .HasColumnName("nr_serie")
                        .HasMaxLength(3);

                    b.Property<decimal?>("PesoBrutoCarga")
                        .HasColumnName("peso_bruto_carga")
                        .HasColumnType("numeric(15,4)");

                    b.Property<int?>("QtCt")
                        .HasColumnName("qt_ct");

                    b.Property<int?>("QtCte")
                        .HasColumnName("qt_cte");

                    b.Property<int?>("QtNf")
                        .HasColumnName("qt_nf");

                    b.Property<int?>("QtNfe")
                        .HasColumnName("qt_nfe");

                    b.Property<int>("TpEmissao")
                        .HasColumnName("tp_emissao");

                    b.Property<int>("TpEmitente")
                        .HasColumnName("tp_emitente");

                    b.Property<string>("UfDescarregamento")
                        .IsRequired()
                        .HasColumnName("uf_descarregamento")
                        .HasMaxLength(2);

                    b.Property<decimal?>("VlCarga")
                        .HasColumnName("vl_carga")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdCidadeCarregamento");

                    b.HasIndex("CdModelo");

                    b.HasIndex("NrSerie");

                    b.HasIndex("CdFilial", "CdProprietarioVeiculo");

                    b.HasIndex("CdFilial", "IdFornveic");

                    b.HasIndex("CdFilial", "CdModelo", "NrSerie", "NrMdf")
                        .IsUnique()
                        .HasName("unq_mdfe");

                    b.ToTable("mdfe");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeCondutor", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int?>("CdMotorista")
                        .HasColumnName("cd_motorista");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int?>("IdMdfe")
                        .HasColumnName("id_mdfe");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMotorista");

                    b.HasIndex("IdMdfe");

                    b.HasIndex("CdFilial", "CdFornecedor");

                    b.ToTable("mdfe_condutor");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeDocumento", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int?>("IdMdfe")
                        .HasColumnName("id_mdfe");

                    b.Property<int?>("IdNf")
                        .HasColumnName("id_nf");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial");

                    b.HasIndex("IdMdfe");

                    b.ToTable("mdfe_documento");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeEvento", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("ArqXml")
                        .HasColumnName("arq_xml");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int>("IdMdfe")
                        .HasColumnName("id_mdfe");

                    b.Property<string>("NmEvento")
                        .IsRequired()
                        .HasColumnName("nm_evento")
                        .HasMaxLength(40);

                    b.Property<string>("NrProtocolo")
                        .HasColumnName("nr_protocolo")
                        .HasMaxLength(15);

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int?>("TpEvento")
                        .HasColumnName("tp_evento");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial");

                    b.HasIndex("IdMdfe");

                    b.ToTable("mdfe_evento");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfePercurso", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int>("IdMdfe")
                        .HasColumnName("id_mdfe");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial");

                    b.HasIndex("IdMdfe", "NrSequencia")
                        .IsUnique()
                        .HasName("unq_mdfe_percurso");

                    b.ToTable("mdfe_percurso");
                });

            modelBuilder.Entity("CrudCharts.Models.Medida", b =>
                {
                    b.Property<int>("CdMedida")
                        .HasColumnName("cd_medida");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmMedida")
                        .IsRequired()
                        .HasColumnName("nm_medida")
                        .HasMaxLength(80);

                    b.HasKey("CdMedida");

                    b.ToTable("medida");
                });

            modelBuilder.Entity("CrudCharts.Models.MensagemNota", b =>
                {
                    b.Property<int>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<string>("FlFiscal")
                        .IsRequired()
                        .HasColumnName("fl_fiscal")
                        .HasMaxLength(1);

                    b.Property<char>("FlInformacoesFisco")
                        .HasColumnName("fl_informacoes_fisco");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnName("mensagem");

                    b.Property<string>("NmMensagem")
                        .HasColumnName("nm_mensagem")
                        .HasMaxLength(30);

                    b.HasKey("CdMensagem");

                    b.ToTable("mensagem_nota");
                });

            modelBuilder.Entity("CrudCharts.Models.Modelo", b =>
                {
                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<DateTime>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmModelo")
                        .IsRequired()
                        .HasColumnName("nm_modelo")
                        .HasMaxLength(80);

                    b.HasKey("CdModelo");

                    b.ToTable("modelo");
                });

            modelBuilder.Entity("CrudCharts.Models.ModeloDcto", b =>
                {
                    b.Property<string>("CdModelo")
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<string>("NmModelo")
                        .HasColumnName("nm_modelo")
                        .HasMaxLength(50);

                    b.HasKey("CdModelo");

                    b.ToTable("modelo_dcto");
                });

            modelBuilder.Entity("CrudCharts.Models.Montadora", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdMontadora")
                        .HasColumnName("cd_montadora");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmMontadora")
                        .IsRequired()
                        .HasColumnName("nm_montadora")
                        .HasMaxLength(40);

                    b.HasKey("CdFilial", "CdMontadora");

                    b.ToTable("montadora");
                });

            modelBuilder.Entity("CrudCharts.Models.MotivoDevolucao", b =>
                {
                    b.Property<int>("CdMotivoDevolucao")
                        .HasColumnName("cd_motivo_devolucao");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<string>("NmMotivoDevolucao")
                        .IsRequired()
                        .HasColumnName("nm_motivo_devolucao")
                        .HasMaxLength(50);

                    b.HasKey("CdMotivoDevolucao");

                    b.ToTable("motivo_devolucao");
                });

            modelBuilder.Entity("CrudCharts.Models.Motorista", b =>
                {
                    b.Property<int>("CdMotorista")
                        .HasColumnName("cd_motorista");

                    b.Property<int>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdTransportador")
                        .HasColumnName("cd_transportador");

                    b.Property<string>("Celular")
                        .HasColumnName("celular")
                        .HasMaxLength(15);

                    b.Property<string>("Cnh")
                        .HasColumnName("cnh")
                        .HasMaxLength(11);

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf")
                        .HasMaxLength(11);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasMaxLength(80);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(15);

                    b.HasKey("CdMotorista");

                    b.HasIndex("CdCidade");

                    b.HasIndex("CdFilial", "CdTransportador");

                    b.ToTable("motorista");
                });

            modelBuilder.Entity("CrudCharts.Models.MovimentoCxa", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int>("NrLcto")
                        .HasColumnName("nr_lcto");

                    b.Property<string>("CdAgencia")
                        .HasColumnName("cd_agencia")
                        .HasMaxLength(10);

                    b.Property<int?>("CdBanco")
                        .HasColumnName("cd_banco");

                    b.Property<int?>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int?>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int?>("CdHistorico")
                        .HasColumnName("cd_historico");

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento")
                        .HasMaxLength(1000);

                    b.Property<string>("DctoOrigem")
                        .HasColumnName("dcto_origem")
                        .HasMaxLength(25);

                    b.Property<string>("Destinatario")
                        .HasColumnName("destinatario")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtBomPara")
                        .HasColumnName("dt_bom_para")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtCompensacao")
                        .HasColumnName("dt_compensacao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtInclusao")
                        .HasColumnName("dt_inclusao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtMvto")
                        .HasColumnName("dt_mvto")
                        .HasColumnType("date");

                    b.Property<bool?>("FlCancelado")
                        .HasColumnName("fl_cancelado");

                    b.Property<string>("FlCheque")
                        .IsRequired()
                        .HasColumnName("fl_cheque")
                        .HasMaxLength(1);

                    b.Property<string>("FlCompensado")
                        .HasColumnName("fl_compensado")
                        .HasMaxLength(1);

                    b.Property<string>("FlDestino")
                        .HasColumnName("fl_destino")
                        .HasMaxLength(1);

                    b.Property<string>("FlOrigem")
                        .HasColumnName("fl_origem")
                        .HasMaxLength(1);

                    b.Property<string>("HashA2")
                        .HasColumnName("hash_a2")
                        .HasMaxLength(70);

                    b.Property<string>("HashH2")
                        .HasColumnName("hash_h2")
                        .HasMaxLength(70);

                    b.Property<string>("MotivoDevolucao")
                        .HasColumnName("motivo_devolucao")
                        .HasMaxLength(80);

                    b.Property<string>("NmTitular")
                        .HasColumnName("nm_titular")
                        .HasMaxLength(80);

                    b.Property<string>("NrCc")
                        .HasColumnName("nr_cc")
                        .HasMaxLength(15);

                    b.Property<string>("NrCheque")
                        .HasColumnName("nr_cheque")
                        .HasMaxLength(15);

                    b.Property<int?>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<string>("NrSerie")
                        .HasColumnName("nr_serie")
                        .HasMaxLength(3);

                    b.Property<string>("TpCartao")
                        .HasColumnName("tp_cartao")
                        .HasMaxLength(1);

                    b.Property<short?>("TpIntegracao")
                        .HasColumnName("tp_integracao");

                    b.Property<decimal?>("VlEntrada")
                        .HasColumnName("vl_entrada")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSaida")
                        .HasColumnName("vl_saida")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdCaixa", "NrLcto");

                    b.HasIndex("CdCaixa")
                        .HasName("idx_movimento_cd_caixa");

                    b.HasIndex("CdClifor")
                        .HasName("idx_mvto_cxa_cliente");

                    b.HasIndex("CdConta");

                    b.HasIndex("CdHistorico")
                        .HasName("idx_movimento_cd_historico");

                    b.HasIndex("DctoOrigem")
                        .HasName("idx_movimento_cxa_ori");

                    b.HasIndex("NrDocumento")
                        .HasName("ind_movimento_cxa_nr_documento");

                    b.HasIndex("NrLcto")
                        .HasName("ind_movimento_cxa_max");

                    b.HasIndex("CdCaixa", "CdFilial", "NrLcto")
                        .HasName("ind_movimento_cxa_chave");

                    b.ToTable("movimento_cxa");
                });

            modelBuilder.Entity("CrudCharts.Models.MovimentoCxaVinculo", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdCaixaD")
                        .HasColumnName("cd_caixa_d");

                    b.Property<int>("CdCaixaO")
                        .HasColumnName("cd_caixa_o");

                    b.Property<int>("CdFilialD")
                        .HasColumnName("cd_filial_d");

                    b.Property<int>("CdFilialO")
                        .HasColumnName("cd_filial_o");

                    b.Property<int>("NrLctoD")
                        .HasColumnName("nr_lcto_d");

                    b.Property<int>("NrLctoO")
                        .HasColumnName("nr_lcto_o");

                    b.HasKey("IdGeral");

                    b.ToTable("movimento_cxa_vinculo");
                });

            modelBuilder.Entity("CrudCharts.Models.MovimentoSeguradora", b =>
                {
                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int?>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<int?>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdSeguradora")
                        .HasColumnName("cd_seguradora");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("NrDocumentoOrigem")
                        .HasColumnName("nr_documento_origem");

                    b.Property<int?>("NrLcto")
                        .HasColumnName("nr_lcto");

                    b.Property<decimal?>("VlAbatido")
                        .HasColumnName("vl_abatido")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlFranquia")
                        .HasColumnName("vl_franquia")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("NrDocumento");

                    b.HasIndex("CdFilial", "CdCliente");

                    b.HasIndex("CdFilial", "CdSeguradora");

                    b.HasIndex("CdFilial", "CdCaixa", "NrLcto");

                    b.ToTable("movimento_seguradora");
                });

            modelBuilder.Entity("CrudCharts.Models.Msggrupo", b =>
                {
                    b.Property<int>("CdGruprod")
                        .HasColumnName("cd_gruprod");

                    b.Property<string>("UfOrigem")
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.Property<string>("UfDestino")
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<int?>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("CdGruprod", "UfOrigem", "UfDestino");

                    b.HasIndex("CdMensagem");

                    b.ToTable("msggrupo");
                });

            modelBuilder.Entity("CrudCharts.Models.NfcFrete", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdFilialNfsc")
                        .HasColumnName("cd_filial_nfsc");

                    b.Property<int>("IdFrete")
                        .HasColumnName("id_frete");

                    b.Property<int?>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<int?>("NrDocumentoNfsc")
                        .HasColumnName("nr_documento_nfsc");

                    b.Property<double?>("PcRateio")
                        .HasColumnName("pc_rateio");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdFrete");

                    b.HasIndex("IdNfec");

                    b.HasIndex("CdFilialNfsc", "NrDocumentoNfsc");

                    b.ToTable("nfc_frete");
                });

            modelBuilder.Entity("CrudCharts.Models.NfContabilC", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdModelo")
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<int?>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<string>("CliforCnpjCpf")
                        .HasColumnName("clifor_cnpj_cpf")
                        .HasMaxLength(18);

                    b.Property<string>("CliforIeRg")
                        .HasColumnName("clifor_ie_rg")
                        .HasMaxLength(18);

                    b.Property<decimal?>("CofinsVl")
                        .HasColumnName("cofins_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("CofinsVlBase")
                        .HasColumnName("cofins_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<int?>("CondPgto")
                        .HasColumnName("cond_pgto");

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtEntradaSaida")
                        .HasColumnName("dt_entrada_saida")
                        .HasColumnType("date");

                    b.Property<int?>("EcfCd")
                        .HasColumnName("ecf_cd");

                    b.Property<int?>("EcfNrCooCupom")
                        .HasColumnName("ecf_nr_coo_cupom");

                    b.Property<string>("EcfNrFabricacao")
                        .HasColumnName("ecf_nr_fabricacao")
                        .HasMaxLength(40);

                    b.Property<int?>("EcfNrPdv")
                        .HasColumnName("ecf_nr_pdv");

                    b.Property<string>("FlCancelado")
                        .HasColumnName("fl_cancelado")
                        .HasMaxLength(1);

                    b.Property<string>("FlEntradaSaida")
                        .HasColumnName("fl_entrada_saida")
                        .HasMaxLength(1);

                    b.Property<string>("FlImpresso")
                        .HasColumnName("fl_impresso")
                        .HasMaxLength(1);

                    b.Property<string>("FlSimples")
                        .HasColumnName("fl_simples")
                        .HasMaxLength(1);

                    b.Property<string>("FreteCfop")
                        .HasColumnName("frete_cfop")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FreteVlIcm")
                        .HasColumnName("frete_vl_icm")
                        .HasColumnType("numeric(14,2)");

                    b.Property<TimeSpan?>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<decimal?>("IcmsNormalBase")
                        .HasColumnName("icms_normal_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsNormalVl")
                        .HasColumnName("icms_normal_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsProprioBase")
                        .HasColumnName("icms_proprio_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsProprioVl")
                        .HasColumnName("icms_proprio_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStAntBase")
                        .HasColumnName("icms_st_ant_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStAntVl")
                        .HasColumnName("icms_st_ant_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStBase")
                        .HasColumnName("icms_st_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStVl")
                        .HasColumnName("icms_st_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<int?>("IdNfc")
                        .HasColumnName("id_nfc");

                    b.Property<decimal?>("IpiBase")
                        .HasColumnName("ipi_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IpiVl")
                        .HasColumnName("ipi_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IssBase")
                        .HasColumnName("iss_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IssVl")
                        .HasColumnName("iss_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<string>("NfeChaveAcesso")
                        .HasColumnName("nfe_chave_acesso")
                        .HasMaxLength(44);

                    b.Property<DateTime?>("NfeDtProcessamento")
                        .HasColumnName("nfe_dt_processamento")
                        .HasColumnType("date");

                    b.Property<string>("NfeNrLote")
                        .HasColumnName("nfe_nr_lote")
                        .HasMaxLength(15);

                    b.Property<string>("NfeNrProtocolo")
                        .HasColumnName("nfe_nr_protocolo")
                        .HasMaxLength(50);

                    b.Property<string>("NfeNrRecibo")
                        .HasColumnName("nfe_nr_recibo")
                        .HasMaxLength(15);

                    b.Property<int?>("NfeTpEmissao")
                        .HasColumnName("nfe_tp_emissao");

                    b.Property<string>("NmOperacao")
                        .HasColumnName("nm_operacao")
                        .HasMaxLength(40);

                    b.Property<int?>("NrCupom")
                        .HasColumnName("nr_cupom");

                    b.Property<long?>("NrNf")
                        .HasColumnName("nr_nf");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal?>("PisVl")
                        .HasColumnName("pis_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("PisVlBase")
                        .HasColumnName("pis_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<string>("SerieNf")
                        .HasColumnName("serie_nf")
                        .HasMaxLength(3);

                    b.Property<string>("SubSerie")
                        .HasColumnName("sub_serie")
                        .HasMaxLength(3);

                    b.Property<string>("UfDestino")
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<string>("UfOrigem")
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDescontoItem")
                        .HasColumnName("vl_desconto_item")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDest")
                        .HasColumnName("vl_fcp_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIcmsUfDest")
                        .HasColumnName("vl_icms_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemet")
                        .HasColumnName("vl_icms_uf_remet")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIsentoItens")
                        .HasColumnName("vl_isento_itens")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlMercadorias")
                        .HasColumnName("vl_mercadorias")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlOutrosItens")
                        .HasColumnName("vl_outros_itens")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlSeguro")
                        .HasColumnName("vl_seguro")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNfc", "FlEntradaSaida")
                        .HasName("nf_contabil_c_idx_nfsc");

                    b.HasIndex("CdFilial", "NrNf", "NrCupom", "CdClifor", "SerieNf", "FlEntradaSaida", "EcfCd")
                        .IsUnique()
                        .HasName("unq_nf_contabil_c");

                    b.ToTable("nf_contabil_c");
                });

            modelBuilder.Entity("CrudCharts.Models.NfContabilCfop", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("Cfop")
                        .IsRequired()
                        .HasColumnName("cfop")
                        .HasMaxLength(10);

                    b.Property<string>("Cst")
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<decimal?>("IcmsStVl")
                        .HasColumnName("icms_st_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStVlBase")
                        .HasColumnName("icms_st_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<int>("IdNfContabilC")
                        .HasColumnName("id_nf_contabil_c");

                    b.Property<decimal>("ImpostoAliq")
                        .HasColumnName("imposto_aliq")
                        .HasColumnType("numeric(14,2)");

                    b.Property<string>("ImpostoTipo")
                        .IsRequired()
                        .HasColumnName("imposto_tipo")
                        .HasMaxLength(1);

                    b.Property<decimal?>("ImpostoVl")
                        .HasColumnName("imposto_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("ImpostoVlBase")
                        .HasColumnName("imposto_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("ImpostoVlRedBase")
                        .HasColumnName("imposto_vl_red_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNfContabilC", "Cst", "Cfop", "ImpostoAliq", "ImpostoTipo")
                        .IsUnique()
                        .HasName("unq_nf_contabil_cfop");

                    b.ToTable("nf_contabil_cfop");
                });

            modelBuilder.Entity("CrudCharts.Models.NfContabilI", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdItem")
                        .IsRequired()
                        .HasColumnName("cd_item")
                        .HasMaxLength(15);

                    b.Property<string>("Cfop")
                        .HasColumnName("cfop")
                        .HasMaxLength(10);

                    b.Property<decimal?>("CofinsAliq")
                        .HasColumnName("cofins_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<string>("CofinsCst")
                        .HasColumnName("cofins_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CofinsVl")
                        .HasColumnName("cofins_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("CofinsVlBase")
                        .HasColumnName("cofins_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<string>("Cst")
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<string>("FlCancelado")
                        .HasColumnName("fl_cancelado")
                        .HasMaxLength(1);

                    b.Property<string>("FlProduto")
                        .HasColumnName("fl_produto")
                        .HasMaxLength(1);

                    b.Property<string>("FlSomaTotal")
                        .HasColumnName("fl_soma_total")
                        .HasMaxLength(1);

                    b.Property<decimal?>("IcmsFreteVl")
                        .HasColumnName("icms_frete_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsNormalAliq")
                        .HasColumnName("icms_normal_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsNormalPcRed")
                        .HasColumnName("icms_normal_pc_red")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsNormalVl")
                        .HasColumnName("icms_normal_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsNormalVlBase")
                        .HasColumnName("icms_normal_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsProprioAliq")
                        .HasColumnName("icms_proprio_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsProprioPcRed")
                        .HasColumnName("icms_proprio_pc_red")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsProprioVl")
                        .HasColumnName("icms_proprio_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsProprioVlBase")
                        .HasColumnName("icms_proprio_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStAliqDestino")
                        .HasColumnName("icms_st_aliq_destino")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsStAntVl")
                        .HasColumnName("icms_st_ant_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStAntVlBase")
                        .HasColumnName("icms_st_ant_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStMva")
                        .HasColumnName("icms_st_mva")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsStPcRed")
                        .HasColumnName("icms_st_pc_red")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IcmsStVl")
                        .HasColumnName("icms_st_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IcmsStVlBase")
                        .HasColumnName("icms_st_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<int>("IdNfContabilC")
                        .HasColumnName("id_nf_contabil_c");

                    b.Property<decimal?>("IpiAliq")
                        .HasColumnName("ipi_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<string>("IpiCst")
                        .HasColumnName("ipi_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("IpiVl")
                        .HasColumnName("ipi_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IpiVlBase")
                        .HasColumnName("ipi_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IssAliq")
                        .HasColumnName("iss_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("IssVl")
                        .HasColumnName("iss_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("IssVlBase")
                        .HasColumnName("iss_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<decimal?>("PcFcp")
                        .HasColumnName("pc_fcp")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpSt")
                        .HasColumnName("pc_fcp_st")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpStRetido")
                        .HasColumnName("pc_fcp_st_retido")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpUfDestino")
                        .HasColumnName("pc_fcp_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsInterno")
                        .HasColumnName("pc_icms_interno")
                        .HasColumnType("numeric(2,2)");

                    b.Property<decimal?>("PcIcmsInternoPartilha")
                        .HasColumnName("pc_icms_interno_partilha")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsUfDestino")
                        .HasColumnName("pc_icms_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcReducao")
                        .HasColumnName("pc_reducao")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("PisAliq")
                        .HasColumnName("pis_aliq")
                        .HasColumnType("numeric(6,2)");

                    b.Property<string>("PisCst")
                        .HasColumnName("pis_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("PisVl")
                        .HasColumnName("pis_vl")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("PisVlBase")
                        .HasColumnName("pis_vl_base")
                        .HasColumnType("numeric(14,2)");

                    b.Property<double?>("QtCompraVenda")
                        .HasColumnName("qt_compra_venda");

                    b.Property<double?>("QtItem")
                        .HasColumnName("qt_item");

                    b.Property<string>("UnCompraVenda")
                        .HasColumnName("un_compra_venda")
                        .HasMaxLength(6);

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlAcrescimoRateado")
                        .HasColumnName("vl_acrescimo_rateado")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlBaseFcp")
                        .HasColumnName("vl_base_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpSt")
                        .HasColumnName("vl_base_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpStRetido")
                        .HasColumnName("vl_base_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpUfDestino")
                        .HasColumnName("vl_base_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseUfDestino")
                        .HasColumnName("vl_base_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlContabil")
                        .HasColumnName("vl_contabil")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDescontoRateado")
                        .HasColumnName("vl_desconto_rateado")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDestino")
                        .HasColumnName("vl_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFreteRateado")
                        .HasColumnName("vl_frete_rateado")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIcmsUfDestino")
                        .HasColumnName("vl_icms_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemetente")
                        .HasColumnName("vl_icms_uf_remetente")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlSeguroRateado")
                        .HasColumnName("vl_seguro_rateado")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlUnitario")
                        .HasColumnName("vl_unitario")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlUnitarioCompraVenda")
                        .HasColumnName("vl_unitario_compra_venda")
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNfContabilC")
                        .HasName("nf_contabil_i_id_nf_contabil_c");

                    b.HasIndex("IdNfContabilC", "NrSequencia")
                        .IsUnique()
                        .HasName("unq_nf_contabil_i");

                    b.ToTable("nf_contabil_i");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfec", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<decimal?>("BaseIcmProprioSt")
                        .HasColumnName("base_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("CdBanco")
                        .HasColumnName("cd_banco");

                    b.Property<string>("CdBarrasAdicionalNfe")
                        .HasColumnName("cd_barras_adicional_nfe")
                        .HasMaxLength(36);

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int?>("CdCondpgto")
                        .HasColumnName("cd_condpgto");

                    b.Property<int>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdModelo")
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<string>("CdNatoper")
                        .IsRequired()
                        .HasColumnName("cd_natoper")
                        .HasMaxLength(40);

                    b.Property<int?>("CdOperacao")
                        .HasColumnName("cd_operacao");

                    b.Property<int>("CdTipocobr")
                        .HasColumnName("cd_tipocobr");

                    b.Property<int?>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<string>("CfopFrete")
                        .HasColumnName("cfop_frete")
                        .HasMaxLength(10);

                    b.Property<string>("ChaveAcessoNfe")
                        .HasColumnName("chave_acesso_nfe")
                        .HasMaxLength(44);

                    b.Property<decimal?>("ConhecimentoBaseIcm")
                        .HasColumnName("conhecimento_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoBaseSt")
                        .HasColumnName("conhecimento_base_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlFrete")
                        .HasColumnName("conhecimento_vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlIcm")
                        .HasColumnName("conhecimento_vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlSt")
                        .HasColumnName("conhecimento_vl_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int?>("CupomNrCoo")
                        .HasColumnName("cupom_nr_coo");

                    b.Property<int?>("CupomNrPdv")
                        .HasColumnName("cupom_nr_pdv");

                    b.Property<DateTime?>("DpecDtRegistro")
                        .HasColumnName("dpec_dt_registro")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("DpecHrRegistro")
                        .HasColumnName("dpec_hr_registro")
                        .HasColumnType("time without time zone");

                    b.Property<string>("DpecId")
                        .HasColumnName("dpec_id")
                        .HasMaxLength(10);

                    b.Property<string>("DpecNrRegistro")
                        .HasColumnName("dpec_nr_registro")
                        .HasMaxLength(14);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_lancamento")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtProcessamentoNfe")
                        .HasColumnName("dt_processamento_nfe")
                        .HasColumnType("date");

                    b.Property<string>("EspecieVolumes")
                        .HasColumnName("especie_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("FlCalcularCusto")
                        .HasColumnName("fl_calcular_custo")
                        .HasMaxLength(1);

                    b.Property<string>("FlCdConta")
                        .HasColumnName("fl_cd_conta")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlConhecFrete")
                        .HasColumnName("fl_conhec_frete");

                    b.Property<string>("FlConsumo")
                        .HasColumnName("fl_consumo")
                        .HasMaxLength(1);

                    b.Property<string>("FlContNcont")
                        .HasColumnName("fl_cont_ncont")
                        .HasMaxLength(1);

                    b.Property<string>("FlControlarEstoque")
                        .HasColumnName("fl_controlar_estoque")
                        .HasMaxLength(1);

                    b.Property<string>("FlIgnorarCxaCta")
                        .IsRequired()
                        .HasColumnName("fl_ignorar_cxa_cta")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlImpresso")
                        .HasColumnName("fl_impresso");

                    b.Property<string>("FlSimples")
                        .HasColumnName("fl_simples")
                        .HasMaxLength(1);

                    b.Property<bool>("FlTransferencia")
                        .HasColumnName("fl_transferencia");

                    b.Property<TimeSpan?>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("HrProcessamentoNfe")
                        .HasColumnName("hr_processamento_nfe")
                        .HasColumnType("time without time zone");

                    b.Property<string>("MarcaVolumes")
                        .HasColumnName("marca_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("NrAidf")
                        .HasColumnName("nr_aidf")
                        .HasMaxLength(20);

                    b.Property<long>("NrDcto")
                        .HasColumnName("nr_dcto");

                    b.Property<int?>("NrDctoDevolucao")
                        .HasColumnName("nr_dcto_devolucao");

                    b.Property<string>("NrLoteNfe")
                        .HasColumnName("nr_lote_nfe")
                        .HasMaxLength(15);

                    b.Property<int?>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<string>("NrProtocoloCancNfe")
                        .HasColumnName("nr_protocolo_canc_nfe")
                        .HasMaxLength(15);

                    b.Property<string>("NrProtocoloNfe")
                        .HasColumnName("nr_protocolo_nfe")
                        .HasMaxLength(15);

                    b.Property<string>("NrReciboNfe")
                        .HasColumnName("nr_recibo_nfe")
                        .HasMaxLength(15);

                    b.Property<double?>("NrVolumes")
                        .HasColumnName("nr_volumes");

                    b.Property<string>("Nsu")
                        .HasColumnName("nsu")
                        .HasMaxLength(10);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("Obs2")
                        .HasColumnName("obs2");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<double?>("PesoTotal")
                        .HasColumnName("peso_total");

                    b.Property<string>("PlacaTransp")
                        .HasColumnName("placa_transp")
                        .HasMaxLength(8);

                    b.Property<double?>("QtPecas")
                        .HasColumnName("qt_pecas");

                    b.Property<double?>("QtVolumes")
                        .HasColumnName("qt_volumes");

                    b.Property<string>("SerieNf")
                        .IsRequired()
                        .HasColumnName("serie_nf")
                        .HasMaxLength(3);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("SubSerie")
                        .HasColumnName("sub_serie")
                        .HasMaxLength(3);

                    b.Property<int?>("TpEmissaoNfe")
                        .HasColumnName("tp_emissao_nfe");

                    b.Property<string>("TpFrete")
                        .HasColumnName("tp_frete")
                        .HasMaxLength(1);

                    b.Property<string>("UfDestino")
                        .IsRequired()
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<string>("UfOrigem")
                        .IsRequired()
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.Property<string>("UfPlacaTransp")
                        .HasColumnName("uf_placa_transp")
                        .HasMaxLength(2);

                    b.Property<decimal?>("VlAcresFinanceiro")
                        .HasColumnName("vl_acres_financeiro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlAcrescimos")
                        .HasColumnName("vl_acrescimos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCofins")
                        .HasColumnName("vl_base_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcm")
                        .HasColumnName("vl_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubst")
                        .HasColumnName("vl_base_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstAnt")
                        .HasColumnName("vl_base_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIcmSubstDev")
                        .HasColumnName("vl_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstReal")
                        .HasColumnName("vl_base_icm_subst_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpi")
                        .HasColumnName("vl_base_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpiDev")
                        .HasColumnName("vl_base_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIss")
                        .HasColumnName("vl_base_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBasePis")
                        .HasColumnName("vl_base_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCofins")
                        .HasColumnName("vl_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontoItem")
                        .HasColumnName("vl_desconto_item")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontos")
                        .HasColumnName("vl_descontos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlEntrada")
                        .HasColumnName("vl_entrada")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDest")
                        .HasColumnName("vl_fcp_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFinanciado")
                        .HasColumnName("vl_financiado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcm")
                        .HasColumnName("vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmFrete")
                        .HasColumnName("vl_icm_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmProprioSt")
                        .HasColumnName("vl_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubst")
                        .HasColumnName("vl_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstAnt")
                        .HasColumnName("vl_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIcmSubstDev")
                        .HasColumnName("vl_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstReal")
                        .HasColumnName("vl_icm_subst_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmsUfDest")
                        .HasColumnName("vl_icms_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemet")
                        .HasColumnName("vl_icms_uf_remet")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpiDev")
                        .HasColumnName("vl_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIsentoItens")
                        .HasColumnName("vl_isento_itens")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIss")
                        .HasColumnName("vl_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlMercadorias")
                        .HasColumnName("vl_mercadorias")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutrosItens")
                        .HasColumnName("vl_outros_itens")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPis")
                        .HasColumnName("vl_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSeguro")
                        .HasColumnName("vl_seguro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdClifor")
                        .HasName("idx_nfec_clifor");

                    b.HasIndex("CdConta");

                    b.HasIndex("NrDctoDevolucao")
                        .HasName("idx_nfec_nr_dcto_devolucao");

                    b.HasIndex("NrPedido");

                    b.HasIndex("CdFilial", "NrDcto", "CdClifor", "FlImpresso", "SerieNf")
                        .IsUnique()
                        .HasName("unq1_nfec");

                    b.ToTable("nfec");
                });

            modelBuilder.Entity("CrudCharts.Models.NfecConhecimento", b =>
                {
                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<int?>("TpCte")
                        .HasColumnName("tp_cte");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFreteVolume")
                        .HasColumnName("vl_frete_volume")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPedagio")
                        .HasColumnName("vl_pedagio")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSecCat")
                        .HasColumnName("vl_sec_cat")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("IdNfec");

                    b.ToTable("nfec_conhecimento");
                });

            modelBuilder.Entity("CrudCharts.Models.NfecEnergiaEletrica", b =>
                {
                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<string>("CodCons")
                        .HasColumnName("cod_cons")
                        .HasMaxLength(2);

                    b.Property<string>("CodGrupoTensao")
                        .HasColumnName("cod_grupo_tensao")
                        .HasMaxLength(2);

                    b.Property<int?>("TpLigacao")
                        .HasColumnName("tp_ligacao");

                    b.HasKey("IdNfec");

                    b.ToTable("nfec_energia_eletrica");
                });

            modelBuilder.Entity("CrudCharts.Models.NfecImportacao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdCidadeDesembaraco")
                        .HasColumnName("cd_cidade_desembaraco");

                    b.Property<string>("CgcCpfAdquirente")
                        .HasColumnName("cgc_cpf_adquirente")
                        .HasMaxLength(18);

                    b.Property<DateTime>("DtDesembaraco")
                        .HasColumnName("dt_desembaraco")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtDi")
                        .HasColumnName("dt_di")
                        .HasColumnType("date");

                    b.Property<string>("FlCustoIcm")
                        .HasColumnName("fl_custo_icm")
                        .HasMaxLength(1);

                    b.Property<string>("FlCustoIi")
                        .HasColumnName("fl_custo_ii")
                        .HasMaxLength(1);

                    b.Property<string>("FlCustoIpi")
                        .HasColumnName("fl_custo_ipi")
                        .HasMaxLength(1);

                    b.Property<string>("FlCustoPisCofins")
                        .HasColumnName("fl_custo_pis_cofins")
                        .HasMaxLength(1);

                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<string>("NrDi")
                        .IsRequired()
                        .HasColumnName("nr_di")
                        .HasMaxLength(10);

                    b.Property<decimal?>("TaxaDolar")
                        .HasColumnName("taxa_dolar")
                        .HasColumnType("numeric(9,2)");

                    b.Property<int?>("TpIntermedio")
                        .HasColumnName("tp_intermedio");

                    b.Property<int?>("TpViatransp")
                        .HasColumnName("tp_viatransp");

                    b.Property<string>("UfTerceiro")
                        .HasColumnName("uf_terceiro")
                        .HasMaxLength(3);

                    b.Property<decimal?>("VlAfrmm")
                        .HasColumnName("vl_afrmm")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlBaseIi")
                        .HasColumnName("vl_base_ii")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDespAduaneira")
                        .HasColumnName("vl_desp_aduaneira")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIi")
                        .HasColumnName("vl_ii")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIof")
                        .HasColumnName("vl_iof")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlSiscomex")
                        .HasColumnName("vl_siscomex")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNfec");

                    b.ToTable("nfec_importacao");
                });

            modelBuilder.Entity("CrudCharts.Models.NfecMensagem", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<int?>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnName("mensagem");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMensagem");

                    b.HasIndex("IdNfec");

                    b.ToTable("nfec_mensagem");
                });

            modelBuilder.Entity("CrudCharts.Models.NfeContingencia", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdStatus")
                        .HasColumnName("cd_status");

                    b.Property<DateTime?>("DtFim")
                        .HasColumnName("dt_fim")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtInicio")
                        .HasColumnName("dt_inicio")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("HrFim")
                        .HasColumnName("hr_fim")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("HrInicio")
                        .HasColumnName("hr_inicio")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Motivo")
                        .HasColumnName("motivo")
                        .HasMaxLength(50);

                    b.HasKey("IdGeral");

                    b.ToTable("nfe_contingencia");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfei", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<decimal?>("AlicIcmSubstDev")
                        .HasColumnName("alic_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicIpiDev")
                        .HasColumnName("alic_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AliqCofins")
                        .HasColumnName("aliq_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AliqIcm")
                        .HasColumnName("aliq_icm")
                        .HasColumnType("numeric(9,2)");

                    b.Property<double?>("AliqIcmOri")
                        .HasColumnName("aliq_icm_ori");

                    b.Property<decimal?>("AliqIcmProprioSt")
                        .HasColumnName("aliq_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("AliqIcmProprioStOri")
                        .HasColumnName("aliq_icm_proprio_st_ori");

                    b.Property<decimal?>("AliqIcmSubst")
                        .HasColumnName("aliq_icm_subst")
                        .HasColumnType("numeric(9,2)");

                    b.Property<double?>("AliqIcmSubstOri")
                        .HasColumnName("aliq_icm_subst_ori");

                    b.Property<decimal?>("AliqIcmSubstReal")
                        .HasColumnName("aliq_icm_subst_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AliqIpi")
                        .HasColumnName("aliq_ipi")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqIss")
                        .HasColumnName("aliq_iss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqPis")
                        .HasColumnName("aliq_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AliqUfDestino")
                        .HasColumnName("aliq_uf_destino")
                        .HasColumnType("numeric(6,2)");

                    b.Property<int?>("CdAtualizacao")
                        .HasColumnName("cd_atualizacao");

                    b.Property<int?>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<string>("CdProdserv")
                        .IsRequired()
                        .HasColumnName("cd_prodserv")
                        .HasMaxLength(15);

                    b.Property<string>("Cfop")
                        .HasColumnName("cfop")
                        .HasMaxLength(10);

                    b.Property<string>("CfopOri")
                        .HasColumnName("cfop_ori")
                        .HasMaxLength(10);

                    b.Property<string>("ClassificacaoCtbl")
                        .HasColumnName("classificacao_ctbl")
                        .HasMaxLength(3);

                    b.Property<string>("Compl")
                        .HasColumnName("compl");

                    b.Property<decimal?>("ConhecimentoBaseIcm")
                        .HasColumnName("conhecimento_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoBaseSt")
                        .HasColumnName("conhecimento_base_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlFrete")
                        .HasColumnName("conhecimento_vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlIcm")
                        .HasColumnName("conhecimento_vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ConhecimentoVlSt")
                        .HasColumnName("conhecimento_vl_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Cst")
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<string>("CstCofins")
                        .HasColumnName("cst_cofins")
                        .HasMaxLength(2);

                    b.Property<string>("CstIpi")
                        .HasColumnName("cst_ipi")
                        .HasMaxLength(2);

                    b.Property<string>("CstOri")
                        .HasColumnName("cst_ori")
                        .HasMaxLength(4);

                    b.Property<string>("CstPis")
                        .HasColumnName("cst_pis")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_lancamento")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("FatorConversao")
                        .HasColumnName("fator_conversao");

                    b.Property<string>("FlControlarEstoque")
                        .HasColumnName("fl_controlar_estoque")
                        .HasMaxLength(1);

                    b.Property<string>("FlServico")
                        .HasColumnName("fl_servico")
                        .HasMaxLength(1);

                    b.Property<string>("FlSomaTotal")
                        .HasColumnName("fl_soma_total")
                        .HasMaxLength(1);

                    b.Property<char?>("FlValidado")
                        .HasColumnName("fl_validado");

                    b.Property<decimal?>("IcmsNormalDifPcAliq")
                        .HasColumnName("icms_normal_dif_pc_aliq")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("IcmsNormalDifValor")
                        .HasColumnName("icms_normal_dif_valor")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("IcmsNormalDifVlBase")
                        .HasColumnName("icms_normal_dif_vl_base")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int?>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<decimal?>("MvaDev")
                        .HasColumnName("mva_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("MvaOri")
                        .HasColumnName("mva_ori");

                    b.Property<int?>("NaturezaFrete")
                        .HasColumnName("natureza_frete");

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasMaxLength(50);

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int?>("NrSequenciaDev")
                        .HasColumnName("nr_sequencia_dev");

                    b.Property<decimal?>("PcDesconto")
                        .HasColumnName("pc_desconto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcFcp")
                        .HasColumnName("pc_fcp")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpSt")
                        .HasColumnName("pc_fcp_st")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpStRetido")
                        .HasColumnName("pc_fcp_st_retido")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpUfDestino")
                        .HasColumnName("pc_fcp_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsInterno")
                        .HasColumnName("pc_icms_interno")
                        .HasColumnType("numeric(2,2)");

                    b.Property<decimal?>("PcIcmsInternoPartilha")
                        .HasColumnName("pc_icms_interno_partilha")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsUfDestino")
                        .HasColumnName("pc_icms_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcMarkup")
                        .HasColumnName("pc_markup")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcRedBaseIcm")
                        .HasColumnName("pc_red_base_icm")
                        .HasColumnType("numeric(9,2)");

                    b.Property<double?>("PcRedBaseIcmOri")
                        .HasColumnName("pc_red_base_icm_ori");

                    b.Property<decimal?>("PcRedBaseIcmProprioSt")
                        .HasColumnName("pc_red_base_icm_proprio_st")
                        .HasColumnType("numeric(6,2)");

                    b.Property<double?>("PcRedBaseIcmProprioStOri")
                        .HasColumnName("pc_red_base_icm_proprio_st_ori");

                    b.Property<decimal?>("PcRedBaseIcmSubst")
                        .HasColumnName("pc_red_base_icm_subst")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("PcRedBaseIcmSubstDev")
                        .HasColumnName("pc_red_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("PcRedBaseIcmSubstOri")
                        .HasColumnName("pc_red_base_icm_subst_ori");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<double?>("QtCompra")
                        .HasColumnName("qt_compra");

                    b.Property<double?>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.Property<string>("UnCompra")
                        .HasColumnName("un_compra")
                        .HasMaxLength(6);

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<decimal?>("VlAcrescimoRateado")
                        .HasColumnName("vl_acrescimo_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCofins")
                        .HasColumnName("vl_base_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseFcp")
                        .HasColumnName("vl_base_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpSt")
                        .HasColumnName("vl_base_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpStRetido")
                        .HasColumnName("vl_base_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpUfDestino")
                        .HasColumnName("vl_base_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseIcm")
                        .HasColumnName("vl_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmOri")
                        .HasColumnName("vl_base_icm_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmProprioSt")
                        .HasColumnName("vl_base_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmProprioStOri")
                        .HasColumnName("vl_base_icm_proprio_st_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubst")
                        .HasColumnName("vl_base_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstAnt")
                        .HasColumnName("vl_base_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIcmSubstDev")
                        .HasColumnName("vl_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstOri")
                        .HasColumnName("vl_base_icm_subst_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstReal")
                        .HasColumnName("vl_base_icm_subst_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpi")
                        .HasColumnName("vl_base_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpiDev")
                        .HasColumnName("vl_base_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIss")
                        .HasColumnName("vl_base_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBasePis")
                        .HasColumnName("vl_base_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseUfDestino")
                        .HasColumnName("vl_base_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlCofins")
                        .HasColumnName("vl_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlContabil")
                        .HasColumnName("vl_contabil")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontoRateado")
                        .HasColumnName("vl_desconto_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDestino")
                        .HasColumnName("vl_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFreteRateado")
                        .HasColumnName("vl_frete_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcm")
                        .HasColumnName("vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmFrete")
                        .HasColumnName("vl_icm_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmOri")
                        .HasColumnName("vl_icm_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmProprioSt")
                        .HasColumnName("vl_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmProprioStOri")
                        .HasColumnName("vl_icm_proprio_st_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubst")
                        .HasColumnName("vl_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstAnt")
                        .HasColumnName("vl_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIcmSubstDev")
                        .HasColumnName("vl_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstOri")
                        .HasColumnName("vl_icm_subst_ori")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstReal")
                        .HasColumnName("vl_icm_subst_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmsUfDestino")
                        .HasColumnName("vl_icms_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemetente")
                        .HasColumnName("vl_icms_uf_remetente")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpiDev")
                        .HasColumnName("vl_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIss")
                        .HasColumnName("vl_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutrasDespesas")
                        .HasColumnName("vl_outras_despesas")
                        .HasColumnType("numeric(14,4)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPis")
                        .HasColumnName("vl_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSeguroRateado")
                        .HasColumnName("vl_seguro_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlUnitario")
                        .HasColumnName("vl_unitario")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlUnitarioCompra")
                        .HasColumnName("vl_unitario_compra")
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdConta");

                    b.HasIndex("CdProdserv");

                    b.HasIndex("IdNfec");

                    b.ToTable("nfei");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfeicomplemento", b =>
                {
                    b.Property<int>("IdNfei")
                        .HasColumnName("id_nfei");

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("IdNfei");

                    b.ToTable("nfeicomplemento");
                });

            modelBuilder.Entity("CrudCharts.Models.NfeiImportacao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFabricante")
                        .HasColumnName("cd_fabricante");

                    b.Property<int>("IdNfei")
                        .HasColumnName("id_nfei");

                    b.Property<int>("NrAdicao")
                        .HasColumnName("nr_adicao");

                    b.Property<int>("NrSeqAdicao")
                        .HasColumnName("nr_seq_adicao");

                    b.Property<decimal?>("VlBaseIi")
                        .HasColumnName("vl_base_ii")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDescontoDi")
                        .HasColumnName("vl_desconto_di")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlDespAduaneira")
                        .HasColumnName("vl_desp_aduaneira")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIi")
                        .HasColumnName("vl_ii")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIof")
                        .HasColumnName("vl_iof")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlSiscomex")
                        .HasColumnName("vl_siscomex")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNfei");

                    b.ToTable("nfei_importacao");
                });

            modelBuilder.Entity("CrudCharts.Models.NfeInutilizacao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime>("DtProcessamentoInut")
                        .HasColumnName("dt_processamento_inut")
                        .HasColumnType("date");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnName("motivo")
                        .HasMaxLength(80);

                    b.Property<int>("NrNf")
                        .HasColumnName("nr_nf");

                    b.Property<string>("NrProtocoloInut")
                        .IsRequired()
                        .HasColumnName("nr_protocolo_inut")
                        .HasMaxLength(15);

                    b.Property<string>("SerieNf")
                        .IsRequired()
                        .HasColumnName("serie_nf")
                        .HasMaxLength(3);

                    b.HasKey("IdGeral");

                    b.ToTable("nfe_inutilizacao");
                });

            modelBuilder.Entity("CrudCharts.Models.NfReferenciada", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("FlEntradaSaida")
                        .HasColumnName("fl_entrada_saida")
                        .HasMaxLength(1);

                    b.Property<string>("FlEntradaSaidaRef")
                        .HasColumnName("fl_entrada_saida_ref")
                        .HasMaxLength(1);

                    b.Property<int?>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int?>("NrDocumentoRef")
                        .HasColumnName("nr_documento_ref");

                    b.HasKey("IdGeral");

                    b.HasIndex("FlEntradaSaida", "NrDocumento", "FlEntradaSaidaRef", "NrDocumentoRef")
                        .IsUnique()
                        .HasName("unq1_nf_referenciada");

                    b.ToTable("nf_referenciada");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfsc", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<decimal?>("AlicIcmSimples")
                        .HasColumnName("alic_icm_simples")
                        .HasColumnType("numeric(5,2)");

                    b.Property<double?>("AliqIcmFrete")
                        .HasColumnName("aliq_icm_frete");

                    b.Property<decimal?>("BaseIcmProprioSt")
                        .HasColumnName("base_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("CdBarrasAdicionalNfe")
                        .HasColumnName("cd_barras_adicional_nfe")
                        .HasMaxLength(36);

                    b.Property<int>("CdCancelamento")
                        .HasColumnName("cd_cancelamento");

                    b.Property<int?>("CdCidadeEmbarque")
                        .HasColumnName("cd_cidade_embarque");

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int?>("CdCondpgto")
                        .HasColumnName("cd_condpgto");

                    b.Property<int?>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<string>("CdModelo")
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<string>("CdNatoper")
                        .HasColumnName("cd_natoper")
                        .HasMaxLength(40);

                    b.Property<int?>("CdOperacao")
                        .HasColumnName("cd_operacao");

                    b.Property<int?>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<int?>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<int>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<string>("CfopFrete")
                        .HasColumnName("cfop_frete")
                        .HasMaxLength(10);

                    b.Property<string>("ChaveAcessoNfe")
                        .HasColumnName("chave_acesso_nfe")
                        .HasMaxLength(44);

                    b.Property<decimal?>("ConhecimentoVlFrete")
                        .HasColumnName("conhecimento_vl_frete")
                        .HasColumnType("numeric(9,2)");

                    b.Property<DateTime?>("DpecDtRegistro")
                        .HasColumnName("dpec_dt_registro")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("DpecHrRegistro")
                        .HasColumnName("dpec_hr_registro")
                        .HasColumnType("time without time zone");

                    b.Property<string>("DpecId")
                        .HasColumnName("dpec_id")
                        .HasMaxLength(10);

                    b.Property<string>("DpecNrRegistro")
                        .HasColumnName("dpec_nr_registro")
                        .HasMaxLength(14);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_lancamento")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtProcessamentoNfe")
                        .HasColumnName("dt_processamento_nfe")
                        .HasColumnType("date");

                    b.Property<DateTime>("DtSaida")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_saida")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<int?>("EcfCoo")
                        .HasColumnName("ecf_coo");

                    b.Property<string>("EcfMfAdicional")
                        .HasColumnName("ecf_mf_adicional")
                        .HasMaxLength(1);

                    b.Property<string>("EspecieVolumes")
                        .HasColumnName("especie_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("FlCdConta")
                        .HasColumnName("fl_cd_conta")
                        .HasMaxLength(1);

                    b.Property<string>("FlClisimples")
                        .HasColumnName("fl_clisimples")
                        .HasMaxLength(1);

                    b.Property<string>("FlComplementoIcms")
                        .HasColumnName("fl_complemento_icms")
                        .HasMaxLength(1);

                    b.Property<string>("FlConsumo")
                        .HasColumnName("fl_consumo")
                        .HasMaxLength(1);

                    b.Property<string>("FlContNcont")
                        .HasColumnName("fl_cont_ncont")
                        .HasMaxLength(1);

                    b.Property<string>("FlControlarEstoque")
                        .HasColumnName("fl_controlar_estoque")
                        .HasMaxLength(1);

                    b.Property<string>("FlEmprsimples")
                        .HasColumnName("fl_emprsimples")
                        .HasMaxLength(1);

                    b.Property<string>("FlIgnorarCxaCta")
                        .IsRequired()
                        .HasColumnName("fl_ignorar_cxa_cta")
                        .HasMaxLength(1);

                    b.Property<string>("FlIssRetido")
                        .HasColumnName("fl_iss_retido")
                        .HasMaxLength(1);

                    b.Property<string>("FlPagoFrete")
                        .HasColumnName("fl_pago_frete")
                        .HasMaxLength(1);

                    b.Property<bool>("FlTransferencia")
                        .HasColumnName("fl_transferencia");

                    b.Property<string>("HashNfscR4")
                        .HasColumnName("hash_nfsc_r4")
                        .HasMaxLength(70);

                    b.Property<string>("HashNfscR5")
                        .HasColumnName("hash_nfsc_r5")
                        .HasMaxLength(70);

                    b.Property<string>("HashNfscR7")
                        .HasColumnName("hash_nfsc_r7")
                        .HasMaxLength(70);

                    b.Property<TimeSpan?>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("HrProcessamentoNfe")
                        .HasColumnName("hr_processamento_nfe")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("IdEndEntrega")
                        .HasColumnName("id_end_entrega");

                    b.Property<int?>("IdNfecDevolucao")
                        .HasColumnName("id_nfec_devolucao");

                    b.Property<int?>("Kilometragem")
                        .HasColumnName("kilometragem");

                    b.Property<string>("MarcaVolumes")
                        .HasColumnName("marca_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("NrAidf")
                        .HasColumnName("nr_aidf")
                        .HasMaxLength(20);

                    b.Property<int?>("NrCupom")
                        .HasColumnName("nr_cupom");

                    b.Property<int?>("NrEcf")
                        .HasColumnName("nr_ecf");

                    b.Property<string>("NrLoteNfe")
                        .HasColumnName("nr_lote_nfe")
                        .HasMaxLength(15);

                    b.Property<int?>("NrNf")
                        .HasColumnName("nr_nf");

                    b.Property<int?>("NrOsOri")
                        .HasColumnName("nr_os_ori");

                    b.Property<string>("NrProtocoloCancNfe")
                        .HasColumnName("nr_protocolo_canc_nfe")
                        .HasMaxLength(15);

                    b.Property<string>("NrProtocoloNfe")
                        .HasColumnName("nr_protocolo_nfe")
                        .HasMaxLength(50);

                    b.Property<string>("NrReciboNfe")
                        .HasColumnName("nr_recibo_nfe")
                        .HasMaxLength(15);

                    b.Property<int?>("NrRps")
                        .HasColumnName("nr_rps");

                    b.Property<int?>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<long?>("NrSr")
                        .HasColumnName("nr_sr");

                    b.Property<double?>("NrVolumes")
                        .HasColumnName("nr_volumes");

                    b.Property<string>("Nsu")
                        .HasColumnName("nsu")
                        .HasMaxLength(10);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("Obs2")
                        .HasColumnName("obs2");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<double?>("PesoTotal")
                        .HasColumnName("peso_total");

                    b.Property<string>("PlacaTransp")
                        .HasColumnName("placa_transp")
                        .HasMaxLength(8);

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<double?>("QtPecas")
                        .HasColumnName("qt_pecas");

                    b.Property<double?>("QtVolumes")
                        .HasColumnName("qt_volumes");

                    b.Property<string>("RecintoAlfandegado")
                        .HasColumnName("recinto_alfandegado")
                        .HasMaxLength(60);

                    b.Property<string>("SerieNfs")
                        .HasColumnName("serie_nfs")
                        .HasMaxLength(3);

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<string>("TotalCst")
                        .HasColumnName("total_cst");

                    b.Property<int?>("TpEmissaoNfe")
                        .HasColumnName("tp_emissao_nfe");

                    b.Property<string>("TpFrete")
                        .HasColumnName("tp_frete")
                        .HasMaxLength(1);

                    b.Property<string>("UfDestino")
                        .IsRequired()
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<string>("UfOrigem")
                        .IsRequired()
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.Property<string>("UfPlacaTansp")
                        .HasColumnName("uf_placa_tansp")
                        .HasMaxLength(2);

                    b.Property<string>("UrlServico")
                        .HasColumnName("url_servico")
                        .HasMaxLength(250);

                    b.Property<decimal?>("VlAcresFinanceiro")
                        .HasColumnName("vl_acres_financeiro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlAcrescimos")
                        .HasColumnName("vl_acrescimos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCofins")
                        .HasColumnName("vl_base_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseComissao")
                        .HasColumnName("vl_base_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCsll")
                        .HasColumnName("vl_base_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIcm")
                        .HasColumnName("vl_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSimples")
                        .HasColumnName("vl_base_icm_simples")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubst")
                        .HasColumnName("vl_base_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstAnt")
                        .HasColumnName("vl_base_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIcmSubstDev")
                        .HasColumnName("vl_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseInss")
                        .HasColumnName("vl_base_inss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIpi")
                        .HasColumnName("vl_base_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpiDev")
                        .HasColumnName("vl_base_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIr")
                        .HasColumnName("vl_base_ir")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIss")
                        .HasColumnName("vl_base_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBasePis")
                        .HasColumnName("vl_base_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCofins")
                        .HasColumnName("vl_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlComissao")
                        .HasColumnName("vl_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCsll")
                        .HasColumnName("vl_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlDescontoItem")
                        .HasColumnName("vl_desconto_item")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontos")
                        .HasColumnName("vl_descontos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlEntrada")
                        .HasColumnName("vl_entrada")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDest")
                        .HasColumnName("vl_fcp_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFinanciado")
                        .HasColumnName("vl_financiado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcm")
                        .HasColumnName("vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmFrete")
                        .HasColumnName("vl_icm_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmProprioSt")
                        .HasColumnName("vl_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSimples")
                        .HasColumnName("vl_icm_simples")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubst")
                        .HasColumnName("vl_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstAnt")
                        .HasColumnName("vl_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIcmSubstDev")
                        .HasColumnName("vl_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmsUfDest")
                        .HasColumnName("vl_icms_uf_dest")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemet")
                        .HasColumnName("vl_icms_uf_remet")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlInss")
                        .HasColumnName("vl_inss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpiDev")
                        .HasColumnName("vl_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIr")
                        .HasColumnName("vl_ir")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIsentoItens")
                        .HasColumnName("vl_isento_itens")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIss")
                        .HasColumnName("vl_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIssSubst")
                        .HasColumnName("vl_iss_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlMercadorias")
                        .HasColumnName("vl_mercadorias")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlOutrosItens")
                        .HasColumnName("vl_outros_itens")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPis")
                        .HasColumnName("vl_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSeguro")
                        .HasColumnName("vl_seguro")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTribEstadual")
                        .HasColumnName("vl_trib_estadual")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribImportado")
                        .HasColumnName("vl_trib_importado")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribMunicipal")
                        .HasColumnName("vl_trib_municipal")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribNacional")
                        .HasColumnName("vl_trib_nacional")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("CdFilial", "NrDocumento");

                    b.HasIndex("CdCancelamento")
                        .HasName("idx_nfsc_cancelamento");

                    b.HasIndex("CdClifor")
                        .HasName("idx_nfsc_cliente");

                    b.HasIndex("CdFilial")
                        .HasName("ind_nfsc_filial");

                    b.HasIndex("CdImpfiscal");

                    b.HasIndex("CdModelo");

                    b.HasIndex("CdTabelaPreco");

                    b.HasIndex("DtEmissao")
                        .HasName("idx_nfsc_data");

                    b.HasIndex("IdNfecDevolucao");

                    b.HasIndex("NrDocumento")
                        .HasName("ind_nfsc_doc");

                    b.HasIndex("NrSequencial")
                        .HasName("idx_nfsc_nr_sequencial");

                    b.HasIndex("CdFilial", "CdClifor");

                    b.HasIndex("CdFilial", "NrDocumento")
                        .HasName("nfsc_chave");

                    b.HasIndex("CdFilial", "NrNf")
                        .HasName("idx_nr_nf");

                    b.HasIndex("CdFilial", "NrOsOri")
                        .HasName("idx_nfsc_os");

                    b.HasIndex("NrDocumento", "CdFilial")
                        .IsUnique()
                        .HasName("nfsc_idx_documento_filial");

                    b.ToTable("nfsc");
                });

            modelBuilder.Entity("CrudCharts.Models.NfscMensagem", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnName("mensagem");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMensagem");

                    b.HasIndex("CdFilial", "NrDocumento");

                    b.ToTable("nfsc_mensagem");
                });

            modelBuilder.Entity("CrudCharts.Models.NfscServico", b =>
                {
                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int?>("CdCidadePrestacao")
                        .HasColumnName("cd_cidade_prestacao");

                    b.Property<int?>("CdNatOperacao")
                        .HasColumnName("cd_nat_operacao");

                    b.Property<bool?>("IncentivoCultural")
                        .HasColumnName("incentivo_cultural");

                    b.HasKey("NrDocumento");

                    b.ToTable("nfsc_servico");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfsi", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<decimal?>("AlicCofins")
                        .HasColumnName("alic_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicCsll")
                        .HasColumnName("alic_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicIcm")
                        .HasColumnName("alic_icm")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicIcmProprioSt")
                        .HasColumnName("alic_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicIcmSubst")
                        .HasColumnName("alic_icm_subst")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicIcmSubstDev")
                        .HasColumnName("alic_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicIpi")
                        .HasColumnName("alic_ipi")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicIpiDev")
                        .HasColumnName("alic_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicIrrf")
                        .HasColumnName("alic_irrf")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicIss")
                        .HasColumnName("alic_iss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AlicPis")
                        .HasColumnName("alic_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("AlicUfDestino")
                        .HasColumnName("alic_uf_destino")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int?>("CdCancelamento")
                        .HasColumnName("cd_cancelamento");

                    b.Property<int?>("CdConta")
                        .HasColumnName("cd_conta");

                    b.Property<string>("CdFci")
                        .HasColumnName("cd_fci")
                        .HasMaxLength(36);

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdPedComp")
                        .HasColumnName("cd_ped_comp")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdserv")
                        .IsRequired()
                        .HasColumnName("cd_prodserv")
                        .HasMaxLength(15);

                    b.Property<string>("Cfop")
                        .HasColumnName("cfop")
                        .HasMaxLength(10);

                    b.Property<string>("Compl")
                        .HasColumnName("compl");

                    b.Property<string>("Composicao")
                        .HasColumnName("composicao");

                    b.Property<decimal?>("ConhecimentoVlFrete")
                        .HasColumnName("conhecimento_vl_frete")
                        .HasColumnType("numeric(9,2)");

                    b.Property<string>("Cst")
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<string>("CstCofins")
                        .HasColumnName("cst_cofins")
                        .HasMaxLength(2);

                    b.Property<string>("CstIpi")
                        .HasColumnName("cst_ipi")
                        .HasMaxLength(2);

                    b.Property<string>("CstPis")
                        .HasColumnName("cst_pis")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("FatorConversao")
                        .HasColumnName("fator_conversao");

                    b.Property<string>("FlClassfiscal")
                        .HasColumnName("fl_classfiscal")
                        .HasMaxLength(5);

                    b.Property<string>("FlComissaoInf")
                        .HasColumnName("fl_comissao_inf")
                        .HasMaxLength(1);

                    b.Property<string>("FlComposto")
                        .HasColumnName("fl_composto")
                        .HasMaxLength(1);

                    b.Property<string>("FlControlarEstoque")
                        .HasColumnName("fl_controlar_estoque")
                        .HasMaxLength(1);

                    b.Property<string>("FlServico")
                        .HasColumnName("fl_servico")
                        .HasMaxLength(1);

                    b.Property<string>("FlSomaTotal")
                        .HasColumnName("fl_soma_total")
                        .HasMaxLength(1);

                    b.Property<string>("FlTributacaoInf")
                        .HasColumnName("fl_tributacao_inf")
                        .HasMaxLength(1);

                    b.Property<string>("HashNfsiR5")
                        .HasColumnName("hash_nfsi_r5")
                        .HasMaxLength(70);

                    b.Property<string>("Iat")
                        .HasColumnName("iat")
                        .HasMaxLength(1);

                    b.Property<int?>("Kilometragem")
                        .HasColumnName("kilometragem");

                    b.Property<decimal?>("MvaDev")
                        .HasColumnName("mva_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("NmCest")
                        .HasColumnName("nm_cest")
                        .HasMaxLength(7);

                    b.Property<string>("NmClassFiscal")
                        .HasColumnName("nm_class_fiscal")
                        .HasMaxLength(10);

                    b.Property<string>("NmProdserv")
                        .HasColumnName("nm_prodserv")
                        .HasMaxLength(60);

                    b.Property<int?>("NrItemPedComp")
                        .HasColumnName("nr_item_ped_comp");

                    b.Property<int?>("NrSequenciaDev")
                        .HasColumnName("nr_sequencia_dev");

                    b.Property<int?>("NrSequenciaOsOri")
                        .HasColumnName("nr_sequencia_os_ori");

                    b.Property<decimal?>("PcAcrescimo")
                        .HasColumnName("pc_acrescimo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcComissao")
                        .HasColumnName("pc_comissao")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcDesconto")
                        .HasColumnName("pc_desconto")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcFcp")
                        .HasColumnName("pc_fcp")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpSt")
                        .HasColumnName("pc_fcp_st")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpStRetido")
                        .HasColumnName("pc_fcp_st_retido")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcFcpUfDestino")
                        .HasColumnName("pc_fcp_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsInterno")
                        .HasColumnName("pc_icms_interno")
                        .HasColumnType("numeric(2,2)");

                    b.Property<decimal?>("PcIcmsInternoPartilha")
                        .HasColumnName("pc_icms_interno_partilha")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcIcmsUfDestino")
                        .HasColumnName("pc_icms_uf_destino")
                        .HasColumnType("numeric(4,4)");

                    b.Property<decimal?>("PcRedBaseIcm")
                        .HasColumnName("pc_red_base_icm")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcRedBaseIcmProprioSt")
                        .HasColumnName("pc_red_base_icm_proprio_st")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("PcRedBaseIcmSubst")
                        .HasColumnName("pc_red_base_icm_subst")
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("PcRedBaseIcmSubstDev")
                        .HasColumnName("pc_red_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<decimal?>("PrecoMinimo")
                        .HasColumnName("preco_minimo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.Property<double?>("QtTrib")
                        .HasColumnName("qt_trib");

                    b.Property<double?>("QtVenda")
                        .HasColumnName("qt_venda");

                    b.Property<int?>("TpOperacaoVeicNovo")
                        .HasColumnName("tp_operacao_veic_novo");

                    b.Property<string>("Un")
                        .HasColumnName("un")
                        .HasMaxLength(6);

                    b.Property<string>("UnTrib")
                        .HasColumnName("un_trib")
                        .HasMaxLength(6);

                    b.Property<string>("UnVenda")
                        .HasColumnName("un_venda")
                        .HasMaxLength(6);

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlAcrescimoRateado")
                        .HasColumnName("vl_acrescimo_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCofins")
                        .HasColumnName("vl_base_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseComissao")
                        .HasColumnName("vl_base_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseCsll")
                        .HasColumnName("vl_base_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseFcp")
                        .HasColumnName("vl_base_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpSt")
                        .HasColumnName("vl_base_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpStRetido")
                        .HasColumnName("vl_base_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseFcpUfDestino")
                        .HasColumnName("vl_base_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBaseIcm")
                        .HasColumnName("vl_base_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmProprioSt")
                        .HasColumnName("vl_base_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubst")
                        .HasColumnName("vl_base_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIcmSubstAnt")
                        .HasColumnName("vl_base_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIcmSubstDev")
                        .HasColumnName("vl_base_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseInss")
                        .HasColumnName("vl_base_inss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIpi")
                        .HasColumnName("vl_base_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIpiDev")
                        .HasColumnName("vl_base_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseIr")
                        .HasColumnName("vl_base_ir")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBaseIss")
                        .HasColumnName("vl_base_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBasePis")
                        .HasColumnName("vl_base_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBaseUfDestino")
                        .HasColumnName("vl_base_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlCofins")
                        .HasColumnName("vl_cofins")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlComissao")
                        .HasColumnName("vl_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlContabil")
                        .HasColumnName("vl_contabil")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCsll")
                        .HasColumnName("vl_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontoRateado")
                        .HasColumnName("vl_desconto_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFcp")
                        .HasColumnName("vl_fcp")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpSt")
                        .HasColumnName("vl_fcp_st")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpStRetido")
                        .HasColumnName("vl_fcp_st_retido")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFcpUfDestino")
                        .HasColumnName("vl_fcp_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlFreteRateado")
                        .HasColumnName("vl_frete_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcm")
                        .HasColumnName("vl_icm")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmFrete")
                        .HasColumnName("vl_icm_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmProprioSt")
                        .HasColumnName("vl_icm_proprio_st")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubst")
                        .HasColumnName("vl_icm_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmSubstAnt")
                        .HasColumnName("vl_icm_subst_ant")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIcmSubstDev")
                        .HasColumnName("vl_icm_subst_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmsUfDestino")
                        .HasColumnName("vl_icms_uf_destino")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIcmsUfRemetente")
                        .HasColumnName("vl_icms_uf_remetente")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlInss")
                        .HasColumnName("vl_inss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpiDev")
                        .HasColumnName("vl_ipi_dev")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIr")
                        .HasColumnName("vl_ir")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIss")
                        .HasColumnName("vl_iss")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIssSubst")
                        .HasColumnName("vl_iss_subst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlLiquido")
                        .HasColumnName("vl_liquido")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlLiquidoVenda")
                        .HasColumnName("vl_liquido_venda")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlOutros")
                        .HasColumnName("vl_outros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPis")
                        .HasColumnName("vl_pis")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSeguroRateado")
                        .HasColumnName("vl_seguro_rateado")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTrib")
                        .HasColumnName("vl_trib")
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal?>("VlTribEstadual")
                        .HasColumnName("vl_trib_estadual")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribImportado")
                        .HasColumnName("vl_trib_importado")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribMunicipal")
                        .HasColumnName("vl_trib_municipal")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlTribNacional")
                        .HasColumnName("vl_trib_nacional")
                        .HasColumnType("numeric(9,2)");

                    b.HasKey("CdFilial", "NrDocumento", "NrSequencia");

                    b.HasIndex("CdConta");

                    b.HasIndex("CdFilial")
                        .HasName("ind_cd_filial");

                    b.HasIndex("CdProdserv")
                        .HasName("idx_cd_prodserv");

                    b.HasIndex("NrDocumento")
                        .HasName("ind_nfsi_doc");

                    b.HasIndex("CdFilial", "NrDocumento", "NrSequencia")
                        .HasName("ind_nfsi_chave");

                    b.ToTable("nfsi");
                });

            modelBuilder.Entity("CrudCharts.Models.Nfsicomplemento", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("CdFilial", "NrOs", "NrSequencia");

                    b.ToTable("nfsicomplemento");
                });

            modelBuilder.Entity("CrudCharts.Models.NfsiCupom", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<double?>("AlicIcm")
                        .HasColumnName("alic_icm");

                    b.Property<double?>("AlicIcmProprioSt")
                        .HasColumnName("alic_icm_proprio_st");

                    b.Property<double?>("AlicIcmSubst")
                        .HasColumnName("alic_icm_subst");

                    b.Property<string>("Cfop")
                        .HasColumnName("cfop")
                        .HasMaxLength(10);

                    b.Property<string>("Cst")
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<string>("HashNfsiCupomR5")
                        .HasColumnName("hash_nfsi_cupom_r5")
                        .HasMaxLength(70);

                    b.Property<double?>("Mva")
                        .HasColumnName("mva");

                    b.Property<double?>("PcRedBaseIcm")
                        .HasColumnName("pc_red_base_icm");

                    b.Property<double?>("PcRedBaseIcmProprioSt")
                        .HasColumnName("pc_red_base_icm_proprio_st");

                    b.Property<double?>("PcRedBaseIcmSubst")
                        .HasColumnName("pc_red_base_icm_subst");

                    b.Property<int?>("TpImpostoEcf")
                        .HasColumnName("tp_imposto_ecf");

                    b.Property<decimal?>("VlBaseIcm")
                        .HasColumnName("vl_base_icm")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlBaseIcmProprioSt")
                        .HasColumnName("vl_base_icm_proprio_st")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlBaseIcmSubst")
                        .HasColumnName("vl_base_icm_subst")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIcm")
                        .HasColumnName("vl_icm")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIcmProprioSt")
                        .HasColumnName("vl_icm_proprio_st")
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("VlIcmSubst")
                        .HasColumnName("vl_icm_subst")
                        .HasColumnType("numeric(14,2)");

                    b.HasKey("CdFilial", "NrDocumento", "NrSequencia");

                    b.ToTable("nfsi_cupom");
                });

            modelBuilder.Entity("CrudCharts.Models.NfXml", b =>
                {
                    b.Property<int>("IdNf")
                        .HasColumnName("id_nf");

                    b.Property<char>("FlEntSai")
                        .HasColumnName("fl_ent_sai");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Xml")
                        .HasColumnName("xml");

                    b.Property<string>("XmlCanc")
                        .HasColumnName("xml_canc");

                    b.HasKey("IdNf", "FlEntSai");

                    b.ToTable("nf_xml");
                });

            modelBuilder.Entity("CrudCharts.Models.NrSerieNfs", b =>
                {
                    b.Property<string>("NrSerie")
                        .HasColumnName("nr_serie")
                        .HasMaxLength(3);

                    b.Property<string>("EndArquivoFsda")
                        .HasColumnName("end_arquivo_fsda");

                    b.Property<string>("EndArquivoModelo")
                        .HasColumnName("end_arquivo_modelo");

                    b.Property<string>("FlBlocoManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_bloco_manual")
                        .HasDefaultValueSql("'N'::character varying")
                        .HasMaxLength(1);

                    b.Property<string>("NrAidf")
                        .HasColumnName("nr_aidf")
                        .HasMaxLength(20);

                    b.Property<int?>("NrUltNfsaida")
                        .HasColumnName("nr_ult_nfsaida");

                    b.Property<long?>("NrUltNfservico")
                        .HasColumnName("nr_ult_nfservico");

                    b.HasKey("NrSerie");

                    b.ToTable("nr_serie_nfs");
                });

            modelBuilder.Entity("CrudCharts.Models.Nsu", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<string>("FlTipo")
                        .IsRequired()
                        .HasColumnName("fl_tipo")
                        .HasMaxLength(1);

                    b.Property<TimeSpan>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<int>("NrDocumento")
                        .HasColumnName("nr_documento");

                    b.Property<string>("Nsu1")
                        .IsRequired()
                        .HasColumnName("nsu")
                        .HasMaxLength(10);

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasColumnName("serie")
                        .HasMaxLength(3);

                    b.HasKey("IdGeral");

                    b.ToTable("nsu");
                });

            modelBuilder.Entity("CrudCharts.Models.NsuProdutoNegativo", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("IdNsu")
                        .HasColumnName("id_nsu");

                    b.Property<double?>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.HasKey("IdGeral");

                    b.HasIndex("IdNsu");

                    b.ToTable("nsu_produto_negativo");
                });

            modelBuilder.Entity("CrudCharts.Models.OperacaoCfopRegra", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdCfopRegra")
                        .HasColumnName("cd_cfop_regra");

                    b.Property<int>("CdOperacao")
                        .HasColumnName("cd_operacao");

                    b.Property<string>("CfopExtCont")
                        .IsRequired()
                        .HasColumnName("cfop_ext_cont")
                        .HasMaxLength(20);

                    b.Property<string>("CfopExtNcont")
                        .IsRequired()
                        .HasColumnName("cfop_ext_ncont")
                        .HasMaxLength(20);

                    b.Property<string>("CfopIntCont")
                        .IsRequired()
                        .HasColumnName("cfop_int_cont")
                        .HasMaxLength(20);

                    b.Property<string>("CfopIntNcont")
                        .IsRequired()
                        .HasColumnName("cfop_int_ncont")
                        .HasMaxLength(20);

                    b.Property<string>("CfopSubstExtCont")
                        .HasColumnName("cfop_subst_ext_cont")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstExtContRet")
                        .HasColumnName("cfop_subst_ext_cont_ret")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstExtNcont")
                        .HasColumnName("cfop_subst_ext_ncont")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstExtNcontRet")
                        .HasColumnName("cfop_subst_ext_ncont_ret")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstIntCont")
                        .HasColumnName("cfop_subst_int_cont")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstIntContRet")
                        .HasColumnName("cfop_subst_int_cont_ret")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstIntNcont")
                        .HasColumnName("cfop_subst_int_ncont")
                        .HasMaxLength(10);

                    b.Property<string>("CfopSubstIntNcontRet")
                        .HasColumnName("cfop_subst_int_ncont_ret")
                        .HasMaxLength(10);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdCfopRegra");

                    b.HasIndex("CdOperacao", "CdCfopRegra")
                        .IsUnique()
                        .HasName("unq1_operacao_cfop_regra");

                    b.ToTable("operacao_cfop_regra");
                });

            modelBuilder.Entity("CrudCharts.Models.OperacaoEs", b =>
                {
                    b.Property<int>("CdOperacao")
                        .HasColumnName("cd_operacao");

                    b.Property<string>("CdBcCredPiscofins")
                        .HasColumnName("cd_bc_cred_piscofins")
                        .HasMaxLength(2);

                    b.Property<int?>("CdContaMovimento")
                        .HasColumnName("cd_conta_movimento");

                    b.Property<string>("CdGrupoOp")
                        .HasColumnName("cd_grupo_op")
                        .HasMaxLength(2);

                    b.Property<int?>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<string>("CdModelo")
                        .IsRequired()
                        .HasColumnName("cd_modelo")
                        .HasMaxLength(3);

                    b.Property<string>("CdTpCredPiscofins")
                        .HasColumnName("cd_tp_cred_piscofins")
                        .HasMaxLength(3);

                    b.Property<string>("CstCofinsDif")
                        .HasColumnName("cst_cofins_dif")
                        .HasMaxLength(5);

                    b.Property<string>("CstPisDif")
                        .HasColumnName("cst_pis_dif")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Finalidade")
                        .HasColumnName("finalidade")
                        .HasMaxLength(1);

                    b.Property<string>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlCalcularComissao")
                        .HasColumnName("fl_calcular_comissao");

                    b.Property<bool?>("FlCalcularCusto")
                        .HasColumnName("fl_calcular_custo");

                    b.Property<string>("FlCalcularIcms")
                        .HasColumnName("fl_calcular_icms")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlCalcularIpi")
                        .HasColumnName("fl_calcular_ipi");

                    b.Property<string>("FlCalcularIss")
                        .IsRequired()
                        .HasColumnName("fl_calcular_iss")
                        .HasMaxLength(1);

                    b.Property<string>("FlCdConta")
                        .HasColumnName("fl_cd_conta")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlControlarEstoq")
                        .HasColumnName("fl_controlar_estoq");

                    b.Property<string>("FlCreditaIcmProprioSt")
                        .HasColumnName("fl_credita_icm_proprio_st")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlCreditoIcmsSt")
                        .HasColumnName("fl_credito_icms_st");

                    b.Property<bool?>("FlCreditoIpi")
                        .HasColumnName("fl_credito_ipi");

                    b.Property<string>("FlCxaFranquia")
                        .HasColumnName("fl_cxa_franquia")
                        .HasMaxLength(1);

                    b.Property<string>("FlEntSai")
                        .IsRequired()
                        .HasColumnName("fl_ent_sai")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlIgnoraCaixaContas")
                        .HasColumnName("fl_ignora_caixa_contas");

                    b.Property<string>("FlImportacao")
                        .HasColumnName("fl_importacao")
                        .HasMaxLength(1);

                    b.Property<string>("FlIncluiIcmsStBasePis")
                        .HasColumnName("fl_inclui_icms_st_base_pis")
                        .HasMaxLength(1);

                    b.Property<string>("FlIncluiIpiBasePis")
                        .HasColumnName("fl_inclui_ipi_base_pis")
                        .HasMaxLength(1);

                    b.Property<char?>("FlInfoXml")
                        .HasColumnName("fl_info_xml");

                    b.Property<bool>("FlReducaoJuridica")
                        .HasColumnName("fl_reducao_juridica");

                    b.Property<char?>("FlReferenciarNota")
                        .HasColumnName("fl_referenciar_nota");

                    b.Property<string>("FlSugerirPreco")
                        .HasColumnName("fl_sugerir_preco")
                        .HasMaxLength(1);

                    b.Property<bool>("FlTributarFrete")
                        .HasColumnName("fl_tributar_frete");

                    b.Property<int?>("IdTributacaoGrupo")
                        .HasColumnName("id_tributacao_grupo");

                    b.Property<int?>("IdTributacaoGrupoPisCofins")
                        .HasColumnName("id_tributacao_grupo_pis_cofins");

                    b.Property<string>("IndPresencial")
                        .HasColumnName("ind_presencial")
                        .HasMaxLength(1);

                    b.Property<string>("NatOperacao")
                        .IsRequired()
                        .HasColumnName("nat_operacao")
                        .HasMaxLength(40);

                    b.Property<string>("NmOperacao")
                        .HasColumnName("nm_operacao")
                        .HasMaxLength(40);

                    b.HasKey("CdOperacao");

                    b.HasIndex("CdBcCredPiscofins");

                    b.HasIndex("CdContaMovimento");

                    b.HasIndex("CdGrupoOp");

                    b.HasIndex("CdMensagem");

                    b.HasIndex("CdModelo");

                    b.HasIndex("CdTpCredPiscofins");

                    b.HasIndex("IdTributacaoGrupo");

                    b.HasIndex("IdTributacaoGrupoPisCofins");

                    b.ToTable("operacao_es");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoAgrupado", b =>
                {
                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrOsAgrupada")
                        .HasColumnName("nr_os_agrupada");

                    b.HasKey("NrOs", "NrOsAgrupada");

                    b.ToTable("orcamento_agrupado");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoC", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int?>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int>("CdCondpgto")
                        .HasColumnName("cd_condpgto");

                    b.Property<int?>("CdFrenteCaixa")
                        .HasColumnName("cd_frente_caixa");

                    b.Property<int>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.Property<int?>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime?>("DatahoraCancelamento")
                        .HasColumnName("datahora_cancelamento");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtEntrega")
                        .HasColumnName("dt_entrega")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtValidade")
                        .HasColumnName("dt_validade")
                        .HasColumnType("date");

                    b.Property<bool>("FlAgrupado")
                        .HasColumnName("fl_agrupado");

                    b.Property<bool>("FlCancelado")
                        .HasColumnName("fl_cancelado");

                    b.Property<string>("FlDavImpresso")
                        .HasColumnName("fl_dav_impresso")
                        .HasMaxLength(1);

                    b.Property<string>("FlEnviaPaf")
                        .HasColumnName("fl_envia_paf")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlExportaDavPdf")
                        .HasColumnName("fl_exporta_dav_pdf");

                    b.Property<bool>("FlFinalizado")
                        .HasColumnName("fl_finalizado");

                    b.Property<string>("HashOrcamentoCD2")
                        .HasColumnName("hash_orcamento_c_d2")
                        .HasMaxLength(70);

                    b.Property<string>("HashOrcamentoCD3")
                        .HasColumnName("hash_orcamento_c_d3")
                        .HasMaxLength(70);

                    b.Property<int?>("IdEndEntrega")
                        .HasColumnName("id_end_entrega");

                    b.Property<int?>("Kilometragem")
                        .HasColumnName("kilometragem");

                    b.Property<string>("MotivoCancelamento")
                        .HasColumnName("motivo_cancelamento")
                        .HasMaxLength(80);

                    b.Property<string>("NmCidade")
                        .HasColumnName("nm_cidade")
                        .HasMaxLength(40);

                    b.Property<string>("NmClifor")
                        .HasColumnName("nm_clifor")
                        .HasMaxLength(80);

                    b.Property<string>("NmMontadora")
                        .HasColumnName("nm_montadora")
                        .HasMaxLength(40);

                    b.Property<string>("NmVeiculo")
                        .HasColumnName("nm_veiculo")
                        .HasMaxLength(70);

                    b.Property<int?>("NrPreVenda")
                        .HasColumnName("nr_pre_venda");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("PlacaVeiculo")
                        .IsRequired()
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<string>("Problema")
                        .HasColumnName("problema");

                    b.Property<string>("TelMail")
                        .HasColumnName("tel_mail")
                        .HasMaxLength(50);

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasMaxLength(2);

                    b.Property<int?>("UsuarioCancelamento")
                        .HasColumnName("usuario_cancelamento");

                    b.Property<decimal?>("VlAcrescimos")
                        .HasColumnName("vl_acrescimos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontos")
                        .HasColumnName("vl_descontos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlEntrada")
                        .HasColumnName("vl_entrada")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIcmsst")
                        .HasColumnName("vl_icmsst")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlMercadorias")
                        .HasColumnName("vl_mercadorias")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrOs");

                    b.HasIndex("CdSituacao");

                    b.HasIndex("CdTabelaPreco");

                    b.HasIndex("FlAgrupado")
                        .HasName("ind_orcamento_c_agrupado");

                    b.HasIndex("FlCancelado")
                        .HasName("ind_orcamento_c_cancelado");

                    b.HasIndex("FlFinalizado")
                        .HasName("ind_orcamento_c_finalizado");

                    b.HasIndex("NrOs")
                        .HasName("idx_orcamento_c_nr_os");

                    b.HasIndex("UsuarioCancelamento");

                    b.HasIndex("CdFrenteCaixa", "FlDavImpresso")
                        .HasName("idx_orcamento_c_frente_caixa");

                    b.ToTable("orcamento_c");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoContato", b =>
                {
                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("CdContato")
                        .HasColumnName("cd_contato");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.HasKey("NrOs", "CdContato");

                    b.HasIndex("CdContato");

                    b.HasIndex("CdFilial", "NrOs");

                    b.ToTable("orcamento_contato");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoDav", b =>
                {
                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int?>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("FlCancelado")
                        .HasColumnName("fl_cancelado")
                        .HasMaxLength(1);

                    b.Property<string>("HashOrcamentoDavD2")
                        .HasColumnName("hash_orcamento_dav_d2")
                        .HasMaxLength(70);

                    b.Property<string>("HashOrcamentoDavD3")
                        .HasColumnName("hash_orcamento_dav_d3")
                        .HasMaxLength(70);

                    b.Property<string>("MfAdicional")
                        .HasColumnName("mf_adicional")
                        .HasMaxLength(1);

                    b.Property<int?>("NrCcfCupom")
                        .HasColumnName("nr_ccf_cupom");

                    b.Property<int?>("NrCooCupom")
                        .HasColumnName("nr_coo_cupom");

                    b.Property<int?>("NrCooDav")
                        .HasColumnName("nr_coo_dav");

                    b.Property<int?>("NrDav")
                        .HasColumnName("nr_dav");

                    b.Property<decimal?>("VlTotalDav")
                        .HasColumnName("vl_total_dav")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("NrOs", "NrSequencia");

                    b.ToTable("orcamento_dav");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoFrete", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<string>("EspecieVolumes")
                        .HasColumnName("especie_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("MarcaVolumes")
                        .HasColumnName("marca_volumes")
                        .HasMaxLength(15);

                    b.Property<double?>("NrVolumes")
                        .HasColumnName("nr_volumes");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<double?>("PesoTotal")
                        .HasColumnName("peso_total");

                    b.Property<string>("PlacaTransp")
                        .HasColumnName("placa_transp")
                        .HasMaxLength(8);

                    b.Property<double?>("QtVolumes")
                        .HasColumnName("qt_volumes");

                    b.Property<string>("TpFrete")
                        .IsRequired()
                        .HasColumnName("tp_frete")
                        .HasMaxLength(1);

                    b.Property<string>("UfPlacaTransp")
                        .HasColumnName("uf_placa_transp")
                        .HasMaxLength(2);

                    b.HasKey("CdFilial", "NrOs");

                    b.ToTable("orcamento_frete");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoI", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("Box")
                        .HasColumnName("box")
                        .HasMaxLength(10);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasMaxLength(20);

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdOriginal")
                        .HasColumnName("cd_original")
                        .HasMaxLength(20);

                    b.Property<string>("CdPedComp")
                        .HasColumnName("cd_ped_comp")
                        .HasMaxLength(15);

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("FatorConversao")
                        .HasColumnName("fator_conversao");

                    b.Property<string>("FlAlteracao")
                        .HasColumnName("fl_alteracao")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlItemCancelado")
                        .HasColumnName("fl_item_cancelado");

                    b.Property<bool?>("FlReservandoEstoque")
                        .HasColumnName("fl_reservando_estoque");

                    b.Property<string>("FlServico")
                        .HasColumnName("fl_servico")
                        .HasMaxLength(1);

                    b.Property<string>("HashOrcamentoID3")
                        .HasColumnName("hash_orcamento_i_d3")
                        .HasMaxLength(70);

                    b.Property<string>("HrAlteracao")
                        .HasColumnName("hr_alteracao")
                        .HasMaxLength(6);

                    b.Property<int?>("Kilometragem")
                        .HasColumnName("kilometragem");

                    b.Property<string>("LocalEstocagem")
                        .HasColumnName("local_estocagem")
                        .HasMaxLength(40);

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasMaxLength(60);

                    b.Property<int?>("NrItemPedComp")
                        .HasColumnName("nr_item_ped_comp");

                    b.Property<string>("NrSerieEquip")
                        .HasColumnName("nr_serie_equip")
                        .HasMaxLength(32);

                    b.Property<decimal?>("PcAcrescimo")
                        .HasColumnName("pc_acrescimo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("PcDesconto")
                        .HasColumnName("pc_desconto")
                        .HasColumnType("numeric(9,2)");

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<double?>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.Property<double?>("QtVenda")
                        .HasColumnName("qt_venda");

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<string>("UnVenda")
                        .HasColumnName("un_venda")
                        .HasMaxLength(6);

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCusto")
                        .HasColumnName("vl_custo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlLiquido")
                        .HasColumnName("vl_liquido")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrOs", "NrSequencia");

                    b.HasIndex("CdProduto");

                    b.HasIndex("NrOs")
                        .HasName("idx_orcamento_i_nr_os");

                    b.HasIndex("CdFilial", "NrOs")
                        .HasName("orcamento_i_idxcd_filial_nr_os");

                    b.ToTable("orcamento_i");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoIAgrupa", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrSequenciaEquip")
                        .HasColumnName("nr_sequencia_equip");

                    b.Property<int>("NrSequenciaServico")
                        .HasColumnName("nr_sequencia_servico");

                    b.HasKey("CdFilial", "NrOs", "NrSequenciaEquip", "NrSequenciaServico");

                    b.HasIndex("CdFilial", "NrOs", "NrSequenciaServico");

                    b.ToTable("orcamento_i_agrupa");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoImagem", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnName("imagem");

                    b.Property<string>("Obs")
                        .HasColumnName("obs")
                        .HasMaxLength(200);

                    b.HasKey("IdGeral", "NrOs");

                    b.ToTable("orcamento_imagem");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoIReservaEstoque", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<decimal?>("QtReservado")
                        .HasColumnName("qt_reservado")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrOs", "NrSequencia");

                    b.HasIndex("CdProduto")
                        .HasName("reserva_estoque_idx_cd_produto");

                    b.HasIndex("NrOs")
                        .HasName("reserva_estoque_idx_nr_os");

                    b.ToTable("orcamento_i_reserva_estoque");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoNfe", b =>
                {
                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.HasKey("NrOs", "IdNfec");

                    b.HasIndex("IdNfec");

                    b.ToTable("orcamento_nfe");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoSituacao", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<DateTime>("DtModificacao")
                        .HasColumnName("dt_modificacao");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<int>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.HasKey("CdFilial", "NrOs", "DtModificacao");

                    b.HasIndex("DtModificacao")
                        .HasName("idx_orcamento_situacao_data");

                    b.ToTable("orcamento_situacao");
                });

            modelBuilder.Entity("CrudCharts.Models.OrdemProducaoC", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdSituacao")
                        .HasColumnName("cd_situacao")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtPrevisao")
                        .HasColumnName("dt_previsao")
                        .HasColumnType("date");

                    b.Property<string>("NrMaquina")
                        .HasColumnName("nr_maquina")
                        .HasMaxLength(100);

                    b.Property<int>("NrOrdemProducao")
                        .HasColumnName("nr_ordem_producao");

                    b.Property<string>("Turno")
                        .HasColumnName("turno")
                        .HasMaxLength(100);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdFilial", "NrOrdemProducao")
                        .IsUnique()
                        .HasName("unq1_ordem_producao_c");

                    b.ToTable("ordem_producao_c");
                });

            modelBuilder.Entity("CrudCharts.Models.OrdemProducaoI", b =>
                {
                    b.Property<long>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdItem")
                        .IsRequired()
                        .HasColumnName("cd_item")
                        .HasMaxLength(15);

                    b.Property<long>("IdOrdemProducaoC")
                        .HasColumnName("id_ordem_producao_c");

                    b.Property<double?>("QtProducao")
                        .HasColumnName("qt_producao");

                    b.Property<double?>("QtProduzido")
                        .HasColumnName("qt_produzido");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdItem");

                    b.HasIndex("IdOrdemProducaoC", "CdItem")
                        .IsUnique()
                        .HasName("unq_ordem_producao_i");

                    b.ToTable("ordem_producao_i");
                });

            modelBuilder.Entity("CrudCharts.Models.PafecfE3", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<DateTime>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<string>("HashE3")
                        .HasColumnName("hash_e3")
                        .HasMaxLength(70);

                    b.Property<TimeSpan>("Hora")
                        .HasColumnName("hora")
                        .HasColumnType("time without time zone");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdImpfiscal");

                    b.ToTable("pafecf_e3");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoAfvC", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<int?>("CdClifor")
                        .HasColumnName("cd_clifor");

                    b.Property<int>("CdCondpgto")
                        .HasColumnName("cd_condpgto");

                    b.Property<int>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.Property<int?>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtEntrega")
                        .HasColumnName("dt_entrega")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtValidade")
                        .HasColumnName("dt_validade")
                        .HasColumnType("date");

                    b.Property<bool>("FlAgrupado")
                        .HasColumnName("fl_agrupado");

                    b.Property<bool>("FlCancelado")
                        .HasColumnName("fl_cancelado");

                    b.Property<bool>("FlFinalizado")
                        .HasColumnName("fl_finalizado");

                    b.Property<bool?>("FlGerado")
                        .HasColumnName("fl_gerado");

                    b.Property<char?>("FlTransmitido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_transmitido")
                        .HasDefaultValueSql("'N'::bpchar");

                    b.Property<short>("IndicePreco")
                        .HasColumnName("indice_preco");

                    b.Property<string>("MotivoCancelamento")
                        .HasColumnName("motivo_cancelamento")
                        .HasMaxLength(80);

                    b.Property<int?>("NrDavGerada")
                        .HasColumnName("nr_dav_gerada");

                    b.Property<int?>("NrOsGerada")
                        .HasColumnName("nr_os_gerada");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal?>("VlAcrescimos")
                        .HasColumnName("vl_acrescimos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDescontos")
                        .HasColumnName("vl_descontos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlEntrada")
                        .HasColumnName("vl_entrada")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlMercadorias")
                        .HasColumnName("vl_mercadorias")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrPedido");

                    b.ToTable("pedido_afv_c");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoAfvI", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasMaxLength(20);

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdOriginal")
                        .HasColumnName("cd_original")
                        .HasMaxLength(20);

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FlServico")
                        .HasColumnName("fl_servico")
                        .HasMaxLength(1);

                    b.Property<int?>("Kilometragem")
                        .HasColumnName("kilometragem");

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasMaxLength(60);

                    b.Property<decimal?>("PcDesconto")
                        .HasColumnName("pc_desconto")
                        .HasColumnType("numeric(9,2)");

                    b.Property<string>("PlacaVeiculo")
                        .HasColumnName("placa_veiculo")
                        .HasMaxLength(8);

                    b.Property<double?>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(3);

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCusto")
                        .HasColumnName("vl_custo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpi")
                        .HasColumnName("vl_ipi")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlLiquido")
                        .HasColumnName("vl_liquido")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrPedido", "NrSequencia");

                    b.ToTable("pedido_afv_i");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoC", b =>
                {
                    b.Property<int>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<int>("CdCondpgto")
                        .HasColumnName("cd_condpgto");

                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtValidade")
                        .HasColumnName("dt_validade")
                        .HasColumnType("date");

                    b.Property<char>("FlSituacao")
                        .HasColumnName("fl_situacao");

                    b.Property<string>("MotivoCancelamento")
                        .HasColumnName("motivo_cancelamento");

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal?>("VlTotal")
                        .HasColumnName("vl_total")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("NrPedido");

                    b.HasIndex("CdFuncionario")
                        .HasName("ind_pedido_func");

                    b.HasIndex("DtEmissao")
                        .HasName("ind_pedido_data");

                    b.HasIndex("FlSituacao")
                        .HasName("ind_pedido_situacao");

                    b.ToTable("pedido_c");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoFrete", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("Status");

                    b.Property<string>("UfDestino");

                    b.Property<string>("UfOrigem");

                    b.HasKey("Id");

                    b.ToTable("PedidoFrete");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoFrete1", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<int>("CdTransportadora")
                        .HasColumnName("cd_transportadora");

                    b.Property<string>("EspecieVolumes")
                        .HasColumnName("especie_volumes")
                        .HasMaxLength(15);

                    b.Property<string>("MarcaVolumes")
                        .HasColumnName("marca_volumes")
                        .HasMaxLength(15);

                    b.Property<double?>("NrVolumes")
                        .HasColumnName("nr_volumes");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<double?>("PesoTotal")
                        .HasColumnName("peso_total");

                    b.Property<string>("PlacaTransp")
                        .HasColumnName("placa_transp")
                        .HasMaxLength(8);

                    b.Property<double?>("QtVolumes")
                        .HasColumnName("qt_volumes");

                    b.Property<string>("TpFrete")
                        .IsRequired()
                        .HasColumnName("tp_frete")
                        .HasMaxLength(1);

                    b.Property<string>("UfPlacaTransp")
                        .HasColumnName("uf_placa_transp")
                        .HasMaxLength(2);

                    b.HasKey("CdFilial", "NrPedido");

                    b.ToTable("pedido_frete");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoI", b =>
                {
                    b.Property<int>("NrPedido")
                        .HasColumnName("nr_pedido");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("CdProdutoFornecedor")
                        .HasColumnName("cd_produto_fornecedor")
                        .HasMaxLength(25);

                    b.Property<DateTime>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("FatorConversao")
                        .HasColumnName("fator_conversao");

                    b.Property<string>("NmProduto")
                        .HasColumnName("nm_produto")
                        .HasMaxLength(80);

                    b.Property<double?>("QtCompra")
                        .HasColumnName("qt_compra");

                    b.Property<double>("QtProduto")
                        .HasColumnName("qt_produto");

                    b.Property<string>("UnCompra")
                        .HasColumnName("un_compra")
                        .HasMaxLength(6);

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<decimal?>("VlUnitario")
                        .HasColumnName("vl_unitario")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("NrPedido", "NrSequencia");

                    b.HasIndex("CdProduto")
                        .HasName("ind_pedido_i_produto");

                    b.HasIndex("UnMedida");

                    b.HasIndex("NrPedido", "CdProduto")
                        .IsUnique()
                        .HasName("unq_pedido_produto");

                    b.ToTable("pedido_i");
                });

            modelBuilder.Entity("CrudCharts.Models.PerfilAcesso", b =>
                {
                    b.Property<int>("CdPerfil")
                        .HasColumnName("cd_perfil");

                    b.Property<string>("FlAcessoIrrestrito")
                        .HasColumnName("fl_acesso_irrestrito")
                        .HasMaxLength(1);

                    b.Property<string>("FlAtivo")
                        .IsRequired()
                        .HasColumnName("fl_ativo")
                        .HasMaxLength(1);

                    b.Property<string>("NmPerfil")
                        .IsRequired()
                        .HasColumnName("nm_perfil")
                        .HasMaxLength(40);

                    b.HasKey("CdPerfil");

                    b.ToTable("perfil_acesso");
                });

            modelBuilder.Entity("CrudCharts.Models.PlHistorico", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdHistorico")
                        .HasColumnName("cd_historico");

                    b.Property<bool?>("Complemento")
                        .HasColumnName("complemento");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("CdFilial", "CdHistorico");

                    b.ToTable("pl_historico");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdComposto", b =>
                {
                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("CdComposto")
                        .HasColumnName("cd_composto")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmProdcomposto")
                        .IsRequired()
                        .HasColumnName("nm_prodcomposto")
                        .HasMaxLength(62);

                    b.Property<double?>("QtComposto")
                        .HasColumnName("qt_composto");

                    b.Property<double?>("QtLiquido")
                        .HasColumnName("qt_liquido");

                    b.HasKey("CdProduto", "CdComposto");

                    b.ToTable("prod_composto");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdOriginal", b =>
                {
                    b.Property<string>("CdProdutoAlt")
                        .HasColumnName("cd_produto_alt")
                        .HasMaxLength(20);

                    b.Property<string>("CdProdutoOri")
                        .HasColumnName("cd_produto_ori")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("CdProdutoAlt", "CdProdutoOri");

                    b.ToTable("prod_original");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdRelacionado", b =>
                {
                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("CdRelacionado")
                        .HasColumnName("cd_relacionado")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<double?>("QtRelacionado")
                        .HasColumnName("qt_relacionado");

                    b.HasKey("CdProduto", "CdRelacionado");

                    b.ToTable("prod_relacionado");
                });

            modelBuilder.Entity("CrudCharts.Models.Produto", b =>
                {
                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<decimal?>("AliqCsll")
                        .HasColumnName("aliq_csll")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqInss")
                        .HasColumnName("aliq_inss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqIpi")
                        .HasColumnName("aliq_ipi")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqIrrf")
                        .HasColumnName("aliq_irrf")
                        .HasColumnType("numeric(9,2)");

                    b.Property<decimal?>("AliqIss")
                        .HasColumnName("aliq_iss")
                        .HasColumnType("numeric(9,2)");

                    b.Property<string>("Box")
                        .HasColumnName("box")
                        .HasMaxLength(10);

                    b.Property<int?>("CdAplicacao")
                        .HasColumnName("cd_aplicacao");

                    b.Property<int?>("CdCfopRegra")
                        .HasColumnName("cd_cfop_regra");

                    b.Property<string>("CdClassFiscal")
                        .HasColumnName("cd_class_fiscal")
                        .HasMaxLength(5);

                    b.Property<int?>("CdConstrucao")
                        .HasColumnName("cd_construcao");

                    b.Property<int?>("CdContaContabil")
                        .HasColumnName("cd_conta_contabil");

                    b.Property<string>("CdFabricante")
                        .HasColumnName("cd_fabricante")
                        .HasMaxLength(200);

                    b.Property<string>("CdFci")
                        .HasColumnName("cd_fci")
                        .HasMaxLength(36);

                    b.Property<int?>("CdGrupoComissao")
                        .HasColumnName("cd_grupo_comissao");

                    b.Property<int>("CdGruprod")
                        .HasColumnName("cd_gruprod");

                    b.Property<int>("CdMarca")
                        .HasColumnName("cd_marca");

                    b.Property<int?>("CdMedida")
                        .HasColumnName("cd_medida");

                    b.Property<int?>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<string>("CdOriginal")
                        .HasColumnName("cd_original")
                        .HasMaxLength(200);

                    b.Property<string>("CdProdutoAnp")
                        .HasColumnName("cd_produto_anp")
                        .HasMaxLength(9);

                    b.Property<string>("CdProdutoAnvisa")
                        .HasColumnName("cd_produto_anvisa")
                        .HasMaxLength(5);

                    b.Property<int?>("CdSubgruprod")
                        .HasColumnName("cd_subgruprod");

                    b.Property<string>("CdTributacaoIss")
                        .HasColumnName("cd_tributacao_iss")
                        .HasMaxLength(1);

                    b.Property<string>("ClassListaServico")
                        .HasColumnName("class_lista_servico")
                        .HasMaxLength(10);

                    b.Property<int?>("ClassToxicoFito")
                        .HasColumnName("class_toxico_fito");

                    b.Property<string>("CnpjFabricante")
                        .HasColumnName("cnpj_fabricante")
                        .HasMaxLength(20);

                    b.Property<string>("CodAjur")
                        .HasColumnName("cod_ajur")
                        .HasMaxLength(10);

                    b.Property<int?>("CodigoTributacaoMunicipio")
                        .HasColumnName("codigo_tributacao_municipio");

                    b.Property<string>("CstExt")
                        .HasColumnName("cst_ext")
                        .HasMaxLength(3);

                    b.Property<string>("CstInt")
                        .HasColumnName("cst_int")
                        .HasMaxLength(3);

                    b.Property<string>("DescAjur")
                        .HasColumnName("desc_ajur")
                        .HasMaxLength(500);

                    b.Property<int?>("DiasManPrev")
                        .HasColumnName("dias_man_prev");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtCadastro")
                        .HasColumnName("dt_cadastro")
                        .HasColumnType("date");

                    b.Property<string>("EpiFito")
                        .HasColumnName("epi_fito");

                    b.Property<string>("EpocaFito")
                        .HasColumnName("epoca_fito")
                        .HasMaxLength(20);

                    b.Property<string>("EspecificacoesFito")
                        .HasColumnName("especificacoes_fito");

                    b.Property<bool?>("FlAtivo")
                        .HasColumnName("fl_ativo");

                    b.Property<string>("FlCestaBasica")
                        .HasColumnName("fl_cesta_basica")
                        .HasMaxLength(1);

                    b.Property<string>("FlClassfiscal")
                        .HasColumnName("fl_classfiscal")
                        .HasMaxLength(5);

                    b.Property<string>("FlComposto")
                        .HasColumnName("fl_composto")
                        .HasMaxLength(1);

                    b.Property<string>("FlCompostoSomaItens")
                        .HasColumnName("fl_composto_soma_itens")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlConsumo")
                        .HasColumnName("fl_consumo");

                    b.Property<bool>("FlContrato")
                        .HasColumnName("fl_contrato");

                    b.Property<bool?>("FlControlaLote")
                        .HasColumnName("fl_controla_lote");

                    b.Property<bool?>("FlControlaSerie")
                        .HasColumnName("fl_controla_serie");

                    b.Property<bool?>("FlControlarEstoq")
                        .HasColumnName("fl_controlar_estoq");

                    b.Property<char?>("FlEscalaRelevante")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fl_escala_relevante")
                        .HasDefaultValueSql("'S'::bpchar");

                    b.Property<string>("FlFitossanitarioSira")
                        .HasColumnName("fl_fitossanitario_sira")
                        .HasMaxLength(1);

                    b.Property<char?>("FlFracionar")
                        .HasColumnName("fl_fracionar");

                    b.Property<bool?>("FlInfComplemento")
                        .HasColumnName("fl_inf_complemento");

                    b.Property<bool?>("FlOriginal")
                        .HasColumnName("fl_original");

                    b.Property<bool?>("FlPesavel")
                        .HasColumnName("fl_pesavel");

                    b.Property<bool?>("FlRetem")
                        .HasColumnName("fl_retem");

                    b.Property<string>("FlServico")
                        .HasColumnName("fl_servico")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlValidade")
                        .HasColumnName("fl_validade");

                    b.Property<int?>("GarantiaKm")
                        .HasColumnName("garantia_km");

                    b.Property<double?>("GiroMedioEmDias")
                        .HasColumnName("giro_medio_em_dias");

                    b.Property<string>("HashProdutoE2")
                        .HasColumnName("hash_produto_e2")
                        .HasMaxLength(70);

                    b.Property<string>("HashProdutoP2")
                        .HasColumnName("hash_produto_p2")
                        .HasMaxLength(70);

                    b.Property<int?>("IdTribGrupoPiscofins")
                        .HasColumnName("id_trib_grupo_piscofins");

                    b.Property<int?>("IdTributacaoGrupo")
                        .HasColumnName("id_tributacao_grupo");

                    b.Property<int?>("IntervaloFito")
                        .HasColumnName("intervalo_fito");

                    b.Property<string>("LocalEstocagem")
                        .HasColumnName("local_estocagem")
                        .HasMaxLength(10);

                    b.Property<int?>("MesesGarantia")
                        .HasColumnName("meses_garantia");

                    b.Property<int?>("MesesVidaUtil")
                        .HasColumnName("meses_vida_util");

                    b.Property<int?>("MetodoFito")
                        .HasColumnName("metodo_fito");

                    b.Property<string>("NmComercialFito")
                        .HasColumnName("nm_comercial_fito")
                        .HasMaxLength(60);

                    b.Property<string>("NmProduto")
                        .IsRequired()
                        .HasColumnName("nm_produto")
                        .HasMaxLength(120);

                    b.Property<string>("NmReduzido")
                        .HasColumnName("nm_reduzido")
                        .HasMaxLength(60);

                    b.Property<string>("NomeFabricante")
                        .HasColumnName("nome_fabricante")
                        .HasMaxLength(70);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<decimal?>("PcComissao")
                        .HasColumnName("pc_comissao")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("PcLucroLiquido")
                        .HasColumnName("pc_lucro_liquido")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcPrecoVenda")
                        .HasColumnName("pc_preco_venda")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("PcSubstTrib")
                        .HasColumnName("pc_subst_trib")
                        .HasColumnType("numeric(18,4)");

                    b.Property<double?>("PesoLiquido")
                        .HasColumnName("peso_liquido");

                    b.Property<string>("PrecaucoesFito")
                        .HasColumnName("precaucoes_fito");

                    b.Property<double?>("QtCompraMediaMes")
                        .HasColumnName("qt_compra_media_mes");

                    b.Property<int?>("QtDiasValidade")
                        .HasColumnName("qt_dias_validade");

                    b.Property<double?>("QtEstoque")
                        .HasColumnName("qt_estoque");

                    b.Property<double?>("QtEstoqueAnterior")
                        .HasColumnName("qt_estoque_anterior");

                    b.Property<double?>("QtEstoqueMax")
                        .HasColumnName("qt_estoque_max");

                    b.Property<double?>("QtEstoqueMedioMes")
                        .HasColumnName("qt_estoque_medio_mes");

                    b.Property<double?>("QtEstoqueMin")
                        .HasColumnName("qt_estoque_min");

                    b.Property<double?>("QtVendaMediaMes")
                        .HasColumnName("qt_venda_media_mes");

                    b.Property<string>("Tipo")
                        .HasColumnName("tipo")
                        .HasMaxLength(10);

                    b.Property<int?>("TpIntervaloFito")
                        .HasColumnName("tp_intervalo_fito");

                    b.Property<int?>("TpModalidadeFito")
                        .HasColumnName("tp_modalidade_fito");

                    b.Property<string>("TpProduto")
                        .HasColumnName("tp_produto")
                        .HasMaxLength(2);

                    b.Property<string>("UnArmazenagem")
                        .IsRequired()
                        .HasColumnName("un_armazenagem")
                        .HasMaxLength(6);

                    b.Property<string>("UnCompra")
                        .IsRequired()
                        .HasColumnName("un_compra")
                        .HasMaxLength(6);

                    b.Property<string>("UnMedida")
                        .IsRequired()
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.HasKey("CdProduto");

                    b.HasIndex("CdCfopRegra");

                    b.HasIndex("CdClassFiscal");

                    b.HasIndex("CdGrupoComissao");

                    b.HasIndex("CdGruprod");

                    b.HasIndex("CdMarca");

                    b.HasIndex("CdProduto")
                        .HasName("ind_cd_produto");

                    b.HasIndex("CdSubgruprod");

                    b.HasIndex("CodigoTributacaoMunicipio");

                    b.HasIndex("FlComposto")
                        .HasName("ind_produto_composto");

                    b.HasIndex("IdTribGrupoPiscofins");

                    b.HasIndex("IdTributacaoGrupo");

                    b.HasIndex("LocalEstocagem")
                        .HasName("ind_produto_local");

                    b.HasIndex("NmProduto")
                        .HasName("ind_nm_produto");

                    b.HasIndex("TpProduto");

                    b.HasIndex("UnArmazenagem");

                    b.HasIndex("UnCompra");

                    b.HasIndex("UnMedida");

                    b.ToTable("produto");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoAltprec", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int?>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<string>("DescForm")
                        .IsRequired()
                        .HasColumnName("desc_form")
                        .HasMaxLength(60);

                    b.Property<DateTime>("DtAlteracao")
                        .HasColumnName("dt_alteracao")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("HrAlteracao")
                        .HasColumnName("hr_alteracao")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<string>("NmForm")
                        .IsRequired()
                        .HasColumnName("nm_form")
                        .HasMaxLength(40);

                    b.Property<decimal>("PrecoVendaAnt")
                        .HasColumnName("preco_venda_ant")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaFlexMaxAnt")
                        .HasColumnName("preco_venda_flex_max_ant")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaFlexMaxNovo")
                        .HasColumnName("preco_venda_flex_max_novo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaFlexMinAnt")
                        .HasColumnName("preco_venda_flex_min_ant")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaFlexMinNovo")
                        .HasColumnName("preco_venda_flex_min_novo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaMinAnt")
                        .HasColumnName("preco_venda_min_ant")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaMinNovo")
                        .HasColumnName("preco_venda_min_novo")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("PrecoVendaNovo")
                        .HasColumnName("preco_venda_novo")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("IdGeral");

                    b.ToTable("produto_altprec");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoClassFiscal", b =>
                {
                    b.Property<string>("CdClassFiscal")
                        .HasColumnName("cd_class_fiscal")
                        .HasMaxLength(5);

                    b.Property<double?>("AliqIpi")
                        .HasColumnName("aliq_ipi");

                    b.Property<int?>("CdCest")
                        .HasColumnName("cd_cest");

                    b.Property<string>("CdEnquadramentoCompra")
                        .HasColumnName("cd_enquadramento_compra")
                        .HasMaxLength(3);

                    b.Property<string>("CdEnquadramentoVenda")
                        .HasColumnName("cd_enquadramento_venda")
                        .HasMaxLength(3);

                    b.Property<string>("CstCofinsCompra")
                        .HasColumnName("cst_cofins_compra")
                        .HasMaxLength(2);

                    b.Property<string>("CstCofinsVenda")
                        .HasColumnName("cst_cofins_venda")
                        .HasMaxLength(2);

                    b.Property<string>("CstIpiCompra")
                        .HasColumnName("cst_ipi_compra")
                        .HasMaxLength(2);

                    b.Property<string>("CstIpiVenda")
                        .HasColumnName("cst_ipi_venda")
                        .HasMaxLength(2);

                    b.Property<string>("CstPisCompra")
                        .HasColumnName("cst_pis_compra")
                        .HasMaxLength(2);

                    b.Property<string>("CstPisVenda")
                        .HasColumnName("cst_pis_venda")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasColumnType("character(200)");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("FlCalcularPisCofins")
                        .HasColumnName("fl_calcular_pis_cofins")
                        .HasMaxLength(1);

                    b.Property<string>("FlReducaoMvaSimples")
                        .HasColumnName("fl_reducao_mva_simples")
                        .HasMaxLength(1);

                    b.Property<string>("NmClassFiscal")
                        .IsRequired()
                        .HasColumnName("nm_class_fiscal")
                        .HasMaxLength(10);

                    b.Property<string>("UnTrib")
                        .HasColumnName("un_trib")
                        .HasMaxLength(6);

                    b.HasKey("CdClassFiscal");

                    b.ToTable("produto_class_fiscal");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoClassFiscalIbpt", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<decimal?>("AliqEst")
                        .HasColumnName("aliq_est")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("AliqImpFed")
                        .HasColumnName("aliq_imp_fed")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("AliqMun")
                        .HasColumnName("aliq_mun")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("AliqNacFed")
                        .HasColumnName("aliq_nac_fed")
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Codigo")
                        .HasColumnName("codigo")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DtFinal")
                        .HasColumnName("dt_final");

                    b.Property<DateTime?>("DtInicio")
                        .HasColumnName("dt_inicio");

                    b.Property<string>("Fonte")
                        .HasColumnName("fonte")
                        .HasMaxLength(30);

                    b.Property<int?>("Tabela")
                        .HasColumnName("tabela");

                    b.Property<string>("Uf")
                        .HasColumnName("uf")
                        .HasMaxLength(3);

                    b.Property<string>("VersaoIbpt")
                        .HasColumnName("versao_ibpt")
                        .HasMaxLength(10);

                    b.HasKey("IdGeral");

                    b.ToTable("produto_class_fiscal_ibpt");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoClassFiscalMva", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdClassFiscal")
                        .IsRequired()
                        .HasColumnName("cd_class_fiscal")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<double>("Mva")
                        .HasColumnName("mva");

                    b.Property<string>("UfDestino")
                        .IsRequired()
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<string>("UfOrigem")
                        .IsRequired()
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdClassFiscal", "UfOrigem", "UfDestino")
                        .IsUnique()
                        .HasName("unq1_produto_class_fiscal_mva");

                    b.ToTable("produto_class_fiscal_mva");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoCliente", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int?>("AnoFabricacao")
                        .HasColumnName("ano_fabricacao");

                    b.Property<int?>("AnoModelo")
                        .HasColumnName("ano_modelo");

                    b.Property<string>("CdCombustivel")
                        .HasColumnName("cd_combustivel")
                        .HasMaxLength(2);

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("Cor")
                        .HasColumnName("cor")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("DataAquisicao")
                        .HasColumnName("data_aquisicao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EntregaTecnica")
                        .HasColumnName("entrega_tecnica")
                        .HasColumnType("date");

                    b.Property<string>("NrSerie")
                        .IsRequired()
                        .HasColumnName("nr_serie")
                        .HasMaxLength(32);

                    b.Property<string>("NumChassi")
                        .HasColumnName("num_chassi")
                        .HasMaxLength(250);

                    b.Property<int?>("NumDiferencial")
                        .HasColumnName("num_diferencial");

                    b.Property<string>("NumMotor")
                        .HasColumnName("num_motor")
                        .HasMaxLength(250);

                    b.Property<string>("NumTransmissao")
                        .HasColumnName("num_transmissao")
                        .HasMaxLength(100);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<string>("SerieTransmissao")
                        .HasColumnName("serie_transmissao")
                        .HasMaxLength(100);

                    b.Property<string>("Torre")
                        .HasColumnName("torre")
                        .HasMaxLength(100);

                    b.HasKey("CdFilial", "CdCliente", "NrSequencia");

                    b.HasIndex("CdCombustivel");

                    b.HasIndex("CdProduto", "NrSerie")
                        .IsUnique()
                        .HasName("unq_produto_cliente");

                    b.ToTable("produto_cliente");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoFornecedor", b =>
                {
                    b.Property<int>("IdProdutoFornecedor")
                        .HasColumnName("id_produto_fornecedor");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdFornecedor")
                        .HasColumnName("cd_fornecedor");

                    b.Property<string>("CdProdForn")
                        .IsRequired()
                        .HasColumnName("cd_prod_forn")
                        .HasMaxLength(61);

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<int?>("IdUnimportacao")
                        .HasColumnName("id_unimportacao");

                    b.HasKey("IdProdutoFornecedor");

                    b.HasIndex("IdUnimportacao");

                    b.ToTable("produto_fornecedor");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoLote", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(14);

                    b.Property<DateTime?>("DtFabricacao")
                        .HasColumnName("dt_fabricacao")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtLancamentoLote")
                        .HasColumnName("dt_lancamento_lote")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DtValidade")
                        .HasColumnName("dt_validade")
                        .HasColumnType("date");

                    b.Property<int?>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<int?>("IdNfsc")
                        .HasColumnName("id_nfsc");

                    b.Property<string>("NrLote")
                        .IsRequired()
                        .HasColumnName("nr_lote")
                        .HasMaxLength(10);

                    b.Property<int>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<double?>("QtEntrada")
                        .HasColumnName("qt_entrada");

                    b.Property<double?>("QtSaida")
                        .HasColumnName("qt_saida");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdProduto");

                    b.HasIndex("IdNfec", "CdProduto", "NrLote", "NrSequencial", "IdNfsc")
                        .IsUnique()
                        .HasName("unq1_produto_lote");

                    b.ToTable("produto_lote");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoSerie", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int?>("IdNfei")
                        .HasColumnName("id_nfei");

                    b.Property<int?>("NrNfs")
                        .HasColumnName("nr_nfs");

                    b.Property<int?>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int?>("NrSequenciaNfs")
                        .HasColumnName("nr_sequencia_nfs");

                    b.Property<int?>("NrSequenciaOs")
                        .HasColumnName("nr_sequencia_os");

                    b.Property<string>("NrSerie")
                        .IsRequired()
                        .HasColumnName("nr_serie")
                        .HasMaxLength(32);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdProduto");

                    b.HasIndex("IdNfei");

                    b.HasIndex("CdFilial", "CdProduto", "NrSerie", "IdNfei")
                        .IsUnique()
                        .HasName("unq_produto_serie");

                    b.ToTable("produto_serie");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoTipo", b =>
                {
                    b.Property<string>("CdTipo")
                        .HasColumnName("cd_tipo")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(50);

                    b.Property<bool?>("FlControlarEstoq")
                        .HasColumnName("fl_controlar_estoq");

                    b.Property<bool?>("FlInventario")
                        .HasColumnName("fl_inventario");

                    b.Property<bool?>("FlPermiteComposicao")
                        .HasColumnName("fl_permite_composicao");

                    b.Property<string>("FlPermitevenda")
                        .HasColumnName("fl_permitevenda")
                        .HasMaxLength(1);

                    b.HasKey("CdTipo");

                    b.ToTable("produto_tipo");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoUnidade", b =>
                {
                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<string>("UnMedida")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<string>("CdBarras")
                        .HasColumnName("cd_barras")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<double>("FatorConversao")
                        .HasColumnName("fator_conversao");

                    b.Property<string>("FlTipo")
                        .HasColumnName("fl_tipo")
                        .HasMaxLength(1);

                    b.HasKey("CdProduto", "UnMedida");

                    b.HasIndex("CdBarras")
                        .HasName("idx_cd_barras");

                    b.ToTable("produto_unidade");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculo", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int?>("AnoFab")
                        .HasColumnName("ano_fab");

                    b.Property<int?>("AnoMod")
                        .HasColumnName("ano_mod");

                    b.Property<string>("Categoria")
                        .HasColumnName("categoria")
                        .HasMaxLength(20);

                    b.Property<string>("CdCombustivel")
                        .HasColumnName("cd_combustivel")
                        .HasMaxLength(2);

                    b.Property<string>("CdCor")
                        .HasColumnName("cd_cor")
                        .HasMaxLength(2);

                    b.Property<string>("CdCorMontadora")
                        .HasColumnName("cd_cor_montadora")
                        .HasMaxLength(4);

                    b.Property<string>("CdEspecie")
                        .HasColumnName("cd_especie")
                        .HasMaxLength(2);

                    b.Property<string>("CdModeloRenavan")
                        .HasColumnName("cd_modelo_renavan")
                        .HasMaxLength(6);

                    b.Property<int>("CdMontadora")
                        .HasColumnName("cd_montadora");

                    b.Property<int?>("CdRestricao")
                        .HasColumnName("cd_restricao");

                    b.Property<string>("CdTipo")
                        .HasColumnName("cd_tipo")
                        .HasMaxLength(2);

                    b.Property<int>("CdVeiculo")
                        .HasColumnName("cd_veiculo");

                    b.Property<string>("CdVin")
                        .HasColumnName("cd_vin")
                        .HasMaxLength(1);

                    b.Property<string>("Chassi")
                        .HasColumnName("chassi")
                        .HasMaxLength(17);

                    b.Property<int?>("Cilindradas")
                        .HasColumnName("cilindradas");

                    b.Property<string>("Cmkg")
                        .HasColumnName("cmkg")
                        .HasMaxLength(9);

                    b.Property<int?>("CondVeiculo")
                        .HasColumnName("cond_veiculo");

                    b.Property<string>("DistEntreEixos")
                        .HasColumnName("dist_entre_eixos")
                        .HasMaxLength(10);

                    b.Property<string>("FlNovo")
                        .IsRequired()
                        .HasColumnName("fl_novo")
                        .HasMaxLength(1);

                    b.Property<double?>("Km")
                        .HasColumnName("km");

                    b.Property<string>("Motor")
                        .HasColumnName("motor")
                        .HasMaxLength(17);

                    b.Property<string>("NmCorMontadora")
                        .HasColumnName("nm_cor_montadora")
                        .HasMaxLength(40);

                    b.Property<int?>("NrDocumentoNfs")
                        .HasColumnName("nr_documento_nfs");

                    b.Property<string>("NrSerie")
                        .HasColumnName("nr_serie")
                        .HasMaxLength(9);

                    b.Property<string>("Obs")
                        .HasColumnName("obs");

                    b.Property<int?>("Passageiros")
                        .HasColumnName("passageiros");

                    b.Property<decimal?>("PesoBrt")
                        .HasColumnName("peso_brt")
                        .HasColumnType("numeric(15,4)");

                    b.Property<decimal?>("PesoLiq")
                        .HasColumnName("peso_liq")
                        .HasColumnType("numeric(15,4)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnName("placa")
                        .HasMaxLength(8);

                    b.Property<string>("Potencia")
                        .HasColumnName("potencia")
                        .HasMaxLength(10);

                    b.Property<string>("Renavan")
                        .HasColumnName("renavan")
                        .HasMaxLength(11);

                    b.Property<string>("TpPintura")
                        .HasColumnName("tp_pintura")
                        .HasMaxLength(1);

                    b.HasKey("CdFilial", "CdProduto");

                    b.HasIndex("CdCombustivel");

                    b.HasIndex("CdCor");

                    b.HasIndex("CdEspecie");

                    b.HasIndex("CdProduto");

                    b.HasIndex("CdTipo");

                    b.HasIndex("Placa")
                        .IsUnique()
                        .HasName("unq_produto_veiculo_placa");

                    b.HasIndex("CdFilial", "CdMontadora");

                    b.HasIndex("CdFilial", "CdVeiculo");

                    b.ToTable("produto_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculosInjecao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdInjecao")
                        .HasColumnName("cd_injecao");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int>("IdProdutoVeiculos")
                        .HasColumnName("id_produto_veiculos");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdInjecao");

                    b.HasIndex("IdProdutoVeiculos", "CdInjecao")
                        .IsUnique()
                        .HasName("unq_produto_veiculos_injecao");

                    b.ToTable("produto_veiculos_injecao");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculosTransmissao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdTransmissao")
                        .HasColumnName("cd_transmissao");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<int>("IdProdutoVeiculos")
                        .HasColumnName("id_produto_veiculos");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdTransmissao");

                    b.HasIndex("IdProdutoVeiculos", "CdTransmissao")
                        .IsUnique()
                        .HasName("unq_produto_veiculos_transmiss");

                    b.ToTable("produto_veiculos_transmissao");
                });

            modelBuilder.Entity("CrudCharts.Models.Propriedade", b =>
                {
                    b.Property<int>("CdPropriedade")
                        .HasColumnName("cd_propriedade");

                    b.Property<double?>("Area")
                        .HasColumnName("area");

                    b.Property<string>("CaixaPostal")
                        .HasColumnName("caixa_postal")
                        .HasMaxLength(10);

                    b.Property<int?>("CdCidade")
                        .HasColumnName("cd_cidade");

                    b.Property<int?>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int?>("CdContato")
                        .HasColumnName("cd_contato");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("Cep")
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj")
                        .HasMaxLength(18);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(70);

                    b.Property<string>("Endereco")
                        .HasColumnName("endereco")
                        .HasMaxLength(60);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(20);

                    b.Property<string>("Ie")
                        .HasColumnName("ie")
                        .HasMaxLength(18);

                    b.Property<string>("Incra")
                        .HasColumnName("incra")
                        .HasMaxLength(10);

                    b.Property<string>("NmPropriedade")
                        .HasColumnName("nm_propriedade")
                        .HasMaxLength(60);

                    b.Property<string>("Telefone")
                        .HasColumnName("telefone")
                        .HasMaxLength(20);

                    b.HasKey("CdPropriedade");

                    b.HasIndex("CdCidade");

                    b.HasIndex("CdContato");

                    b.HasIndex("CdFilial", "CdCliente");

                    b.ToTable("propriedade");
                });

            modelBuilder.Entity("CrudCharts.Models.ProtocoloIcms", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DtProtocolo")
                        .HasColumnName("dt_protocolo")
                        .HasColumnType("date");

                    b.Property<string>("NrProtocolo")
                        .IsRequired()
                        .HasColumnName("nr_protocolo")
                        .HasMaxLength(10);

                    b.HasKey("IdGeral");

                    b.HasIndex("NrProtocolo")
                        .IsUnique()
                        .HasName("unq1_protocolo_icms");

                    b.ToTable("protocolo_icms");
                });

            modelBuilder.Entity("CrudCharts.Models.ProtocoloIcmsClassFiscal", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdClassFiscal")
                        .IsRequired()
                        .HasColumnName("cd_class_fiscal")
                        .HasMaxLength(5);

                    b.Property<int>("IdProtocolo")
                        .HasColumnName("id_protocolo");

                    b.Property<double?>("MvaEspecifica")
                        .HasColumnName("mva_especifica");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdClassFiscal");

                    b.HasIndex("IdProtocolo", "CdClassFiscal")
                        .IsUnique()
                        .HasName("unq1_protocolo_icms_class_fisca");

                    b.ToTable("protocolo_icms_class_fiscal");
                });

            modelBuilder.Entity("CrudCharts.Models.ReceitaAgro", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrNf")
                        .HasColumnName("nr_nf");

                    b.Property<int>("NrSequencia")
                        .HasColumnName("nr_sequencia");

                    b.Property<int>("NrReceita")
                        .HasColumnName("nr_receita");

                    b.Property<decimal?>("Area")
                        .HasColumnName("area")
                        .HasColumnType("numeric(15,3)");

                    b.Property<int?>("CdAgronomo")
                        .HasColumnName("cd_agronomo");

                    b.Property<int?>("CdCliente")
                        .HasColumnName("cd_cliente");

                    b.Property<int>("CdProdserv")
                        .HasColumnName("cd_prodserv");

                    b.Property<int?>("CdPropriedade")
                        .HasColumnName("cd_propriedade");

                    b.Property<string>("Cultura")
                        .HasColumnName("cultura")
                        .HasMaxLength(100);

                    b.Property<string>("Diagnostico")
                        .HasColumnName("diagnostico");

                    b.Property<string>("Dosagem")
                        .HasColumnName("dosagem")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<string>("Epis")
                        .HasColumnName("epis");

                    b.Property<string>("EpocaAplicacao")
                        .HasColumnName("epoca_aplicacao")
                        .HasMaxLength(80);

                    b.Property<string>("IntervaloSeg")
                        .HasColumnName("intervalo_seg")
                        .HasMaxLength(80);

                    b.Property<int?>("ModalidadeAplicacao")
                        .HasColumnName("modalidade_aplicacao");

                    b.Property<int?>("NrArt")
                        .HasColumnName("nr_art");

                    b.Property<string>("Orientacao")
                        .HasColumnName("orientacao");

                    b.Property<string>("Precaucao")
                        .HasColumnName("precaucao");

                    b.Property<string>("QtAplicacao")
                        .HasColumnName("qt_aplicacao")
                        .HasMaxLength(20);

                    b.Property<decimal>("QtTotal")
                        .HasColumnName("qt_total")
                        .HasColumnType("numeric(15,2)");

                    b.Property<string>("SerieNf")
                        .HasColumnName("serie_nf")
                        .HasMaxLength(3);

                    b.Property<string>("VolumeCalda")
                        .HasColumnName("volume_calda")
                        .HasMaxLength(21);

                    b.HasKey("CdFilial", "NrNf", "NrSequencia", "NrReceita");

                    b.HasIndex("CdPropriedade");

                    b.HasIndex("CdFilial", "CdCliente");

                    b.ToTable("receita_agro");
                });

            modelBuilder.Entity("CrudCharts.Models.Recibo", b =>
                {
                    b.Property<int>("NrRecibo")
                        .HasColumnName("nr_recibo");

                    b.Property<string>("Assinatura")
                        .HasColumnName("assinatura")
                        .HasMaxLength(80);

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtPgto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_pgto")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmPago")
                        .IsRequired()
                        .HasColumnName("nm_pago")
                        .HasMaxLength(100);

                    b.Property<string>("Proveniente")
                        .HasColumnName("proveniente")
                        .HasMaxLength(1023);

                    b.Property<decimal>("VlPago")
                        .HasColumnName("vl_pago")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("NrRecibo");

                    b.ToTable("recibo");
                });

            modelBuilder.Entity("CrudCharts.Models.ReducaoZ", b =>
                {
                    b.Property<int>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<DateTime>("DtReducao")
                        .HasColumnName("dt_reducao")
                        .HasColumnType("date");

                    b.Property<string>("CamArqEstoque")
                        .HasColumnName("cam_arq_estoque")
                        .HasMaxLength(999);

                    b.Property<string>("CamArqReducao")
                        .HasColumnName("cam_arq_reducao")
                        .HasMaxLength(999);

                    b.Property<int>("ContadorZ")
                        .HasColumnName("contador_z");

                    b.Property<int?>("Coo")
                        .HasColumnName("coo");

                    b.Property<int>("Cro")
                        .HasColumnName("cro");

                    b.Property<DateTime?>("DtEmissao")
                        .HasColumnName("dt_emissao")
                        .HasColumnType("date");

                    b.Property<string>("FlEstoqueEnviado")
                        .HasColumnName("fl_estoque_enviado")
                        .HasMaxLength(1);

                    b.Property<string>("FlIncidenciaDescIss")
                        .HasColumnName("fl_incidencia_desc_iss")
                        .HasMaxLength(1);

                    b.Property<string>("FlReducaoEnviada")
                        .HasColumnName("fl_reducao_enviada")
                        .HasMaxLength(1);

                    b.Property<string>("HashReducaoZR2")
                        .HasColumnName("hash_reducao_z_r2")
                        .HasMaxLength(70);

                    b.Property<string>("HashReducaoZR3")
                        .HasColumnName("hash_reducao_z_r3")
                        .HasMaxLength(70);

                    b.Property<TimeSpan?>("HrEmissao")
                        .HasColumnName("hr_emissao")
                        .HasColumnType("time without time zone");

                    b.Property<decimal?>("IcmVlAcrescimo")
                        .HasColumnName("icm_vl_acrescimo")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("IcmVlCancelamento")
                        .HasColumnName("icm_vl_cancelamento")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("IcmVlDesconto")
                        .HasColumnName("icm_vl_desconto")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("IssVlAcrescimo")
                        .HasColumnName("iss_vl_acrescimo")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("IssVlCancelamento")
                        .HasColumnName("iss_vl_cancelamento")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("IssVlDesconto")
                        .HasColumnName("iss_vl_desconto")
                        .HasColumnType("numeric(13,2)");

                    b.Property<string>("MfAdicional")
                        .HasColumnName("mf_adicional")
                        .HasMaxLength(1);

                    b.Property<int>("NrCupomFinal")
                        .HasColumnName("nr_cupom_final");

                    b.Property<int>("NrCupomInicial")
                        .HasColumnName("nr_cupom_inicial");

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlBruto")
                        .HasColumnName("vl_bruto")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlCancelamento")
                        .HasColumnName("vl_cancelamento")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlGt")
                        .HasColumnName("vl_gt")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlNaoIncidente")
                        .HasColumnName("vl_nao_incidente")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlOpnf")
                        .HasColumnName("vl_opnf")
                        .HasColumnType("numeric(13,2)");

                    b.Property<decimal?>("VlSubstituicao")
                        .HasColumnName("vl_substituicao")
                        .HasColumnType("numeric(13,2)");

                    b.HasKey("CdImpfiscal", "DtReducao");

                    b.ToTable("reducao_z");
                });

            modelBuilder.Entity("CrudCharts.Models.Reducaoz1", b =>
                {
                    b.Property<string>("NrSerieEcf")
                        .HasColumnName("nr_serie_ecf")
                        .HasMaxLength(20);

                    b.Property<int>("NrPdv")
                        .HasColumnName("nr_pdv");

                    b.Property<DateTime>("DtReducao")
                        .HasColumnName("dt_reducao")
                        .HasColumnType("date");

                    b.Property<decimal?>("Al01")
                        .HasColumnName("al_01")
                        .HasColumnType("numeric(4,2)");

                    b.Property<decimal?>("Al02")
                        .HasColumnName("al_02")
                        .HasColumnType("numeric(4,2)");

                    b.Property<decimal?>("Al03")
                        .HasColumnName("al_03")
                        .HasColumnType("numeric(4,2)");

                    b.Property<decimal?>("Al04")
                        .HasColumnName("al_04")
                        .HasColumnType("numeric(4,2)");

                    b.Property<decimal?>("Al05")
                        .HasColumnName("al_05")
                        .HasColumnType("numeric(4,2)");

                    b.Property<decimal?>("Al06")
                        .HasColumnName("al_06")
                        .HasColumnType("numeric(4,2)");

                    b.Property<int?>("ContadorFinal")
                        .HasColumnName("contador_final");

                    b.Property<int?>("ContadorInicial")
                        .HasColumnName("contador_inicial");

                    b.Property<int?>("ContadorRo")
                        .HasColumnName("contador_ro");

                    b.Property<int?>("ContadorZ")
                        .HasColumnName("contador_z");

                    b.Property<decimal?>("Vl01")
                        .HasColumnName("vl_01")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Vl02")
                        .HasColumnName("vl_02")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Vl03")
                        .HasColumnName("vl_03")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Vl04")
                        .HasColumnName("vl_04")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Vl05")
                        .HasColumnName("vl_05")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Vl06")
                        .HasColumnName("vl_06")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlBrutoDia")
                        .HasColumnName("vl_bruto_dia")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCancelamento")
                        .HasColumnName("vl_cancelamento")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDesconto")
                        .HasColumnName("vl_desconto")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIsento")
                        .HasColumnName("vl_isento")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIssqn")
                        .HasColumnName("vl_issqn")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlNaoInc")
                        .HasColumnName("vl_nao_inc")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlSubstituicao")
                        .HasColumnName("vl_substituicao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlTotalGeral")
                        .HasColumnName("vl_total_geral")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("NrSerieEcf", "NrPdv", "DtReducao");

                    b.ToTable("reducaoz");
                });

            modelBuilder.Entity("CrudCharts.Models.ReducaoZTotalizador", b =>
                {
                    b.Property<int>("CdImpfiscal")
                        .HasColumnName("cd_impfiscal");

                    b.Property<DateTime>("DtReducao")
                        .HasColumnName("dt_reducao")
                        .HasColumnType("date");

                    b.Property<double>("PcImposto")
                        .HasColumnName("pc_imposto");

                    b.Property<string>("TpImposto")
                        .HasColumnName("tp_imposto")
                        .HasMaxLength(1);

                    b.Property<string>("HashReducaoZTotalizadorR3")
                        .HasColumnName("hash_reducao_z_totalizador_r3")
                        .HasMaxLength(70);

                    b.Property<int?>("NrOrdem")
                        .HasColumnName("nr_ordem");

                    b.Property<decimal>("VlVendido")
                        .HasColumnName("vl_vendido")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdImpfiscal", "DtReducao", "PcImposto", "TpImposto");

                    b.ToTable("reducao_z_totalizador");
                });

            modelBuilder.Entity("CrudCharts.Models.RefNotaProdutor", b =>
                {
                    b.Property<int>("CodReferencia")
                        .HasColumnName("cod_referencia");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("DataNfProdutor")
                        .IsRequired()
                        .HasColumnName("data_nf_produtor")
                        .HasMaxLength(4);

                    b.Property<int>("IdNfec")
                        .HasColumnName("id_nfec");

                    b.Property<string>("ModeloNfProdutor")
                        .IsRequired()
                        .HasColumnName("modelo_nf_produtor")
                        .HasMaxLength(4);

                    b.Property<string>("NrNfProdutor")
                        .IsRequired()
                        .HasColumnName("nr_nf_produtor")
                        .HasMaxLength(18);

                    b.Property<string>("SerieNfProdutor")
                        .IsRequired()
                        .HasColumnName("serie_nf_produtor")
                        .HasMaxLength(4);

                    b.HasKey("CodReferencia");

                    b.ToTable("ref_nota_produtor");
                });

            modelBuilder.Entity("CrudCharts.Models.Regiao", b =>
                {
                    b.Property<int>("CdRegiao")
                        .HasColumnName("cd_regiao");

                    b.Property<int?>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmRegiao")
                        .IsRequired()
                        .HasColumnName("nm_regiao")
                        .HasMaxLength(60);

                    b.HasKey("CdRegiao");

                    b.ToTable("regiao");
                });

            modelBuilder.Entity("CrudCharts.Models.Rotas", b =>
                {
                    b.Property<int>("Id");

                    b.Property<double>("Distancia");

                    b.Property<double?>("Preco");

                    b.Property<string>("UfDestino")
                        .IsRequired();

                    b.Property<string>("UfOrigem")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("CrudCharts.Models.SaldoCxaDia", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdCaixa")
                        .HasColumnName("cd_caixa");

                    b.Property<DateTime>("DtCaixa")
                        .HasColumnName("dt_caixa")
                        .HasColumnType("date");

                    b.Property<decimal?>("VlSaldo")
                        .HasColumnName("vl_saldo")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdCaixa", "DtCaixa");

                    b.ToTable("saldo_cxa_dia");
                });

            modelBuilder.Entity("CrudCharts.Models.Situacao", b =>
                {
                    b.Property<int>("CdSituacao")
                        .HasColumnName("cd_situacao");

                    b.Property<int?>("CdPrecedente")
                        .HasColumnName("cd_precedente");

                    b.Property<string>("Cor")
                        .HasColumnName("cor")
                        .HasMaxLength(30);

                    b.Property<string>("EndArqModelo")
                        .HasColumnName("end_arq_modelo");

                    b.Property<string>("EndArqModeloPdf")
                        .HasColumnName("end_arq_modelo_pdf")
                        .HasMaxLength(1000);

                    b.Property<bool>("FlBloqueiaEstoque")
                        .HasColumnName("fl_bloqueia_estoque");

                    b.Property<bool>("FlDescricaoServico")
                        .HasColumnName("fl_descricao_servico");

                    b.Property<string>("FlEnviaEmail")
                        .HasColumnName("fl_envia_email")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlExportaDavPdf")
                        .HasColumnName("fl_exporta_dav_pdf");

                    b.Property<bool>("FlFinal")
                        .HasColumnName("fl_final");

                    b.Property<string>("FlIcmsst")
                        .HasColumnName("fl_icmsst")
                        .HasMaxLength(1);

                    b.Property<bool>("FlInicial")
                        .HasColumnName("fl_inicial");

                    b.Property<string>("FlIpi")
                        .HasColumnName("fl_ipi")
                        .HasMaxLength(1);

                    b.Property<bool?>("FlOrdemServico")
                        .HasColumnName("fl_ordem_servico");

                    b.Property<bool?>("FlPedComp")
                        .HasColumnName("fl_ped_comp");

                    b.Property<bool?>("FlPreVenda")
                        .HasColumnName("fl_pre_venda");

                    b.Property<bool?>("FlPrecoCusto")
                        .HasColumnName("fl_preco_custo");

                    b.Property<bool>("FlProdutoSerie")
                        .HasColumnName("fl_produto_serie");

                    b.Property<bool>("FlReservaEstoque")
                        .HasColumnName("fl_reserva_estoque");

                    b.Property<string>("NmSituacao")
                        .IsRequired()
                        .HasColumnName("nm_situacao")
                        .HasMaxLength(50);

                    b.HasKey("CdSituacao");

                    b.HasIndex("CdPrecedente");

                    b.HasIndex("FlReservaEstoque")
                        .HasName("idx_situacao_reserva");

                    b.HasIndex("NmSituacao")
                        .HasName("idx_situacao_nome");

                    b.ToTable("situacao");
                });

            modelBuilder.Entity("CrudCharts.Models.Subgruprod", b =>
                {
                    b.Property<int>("CdSubgruprod")
                        .HasColumnName("cd_subgruprod");

                    b.Property<int>("CdGruprod")
                        .HasColumnName("cd_gruprod");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmSubgruprod")
                        .IsRequired()
                        .HasColumnName("nm_subgruprod")
                        .HasMaxLength(40);

                    b.HasKey("CdSubgruprod");

                    b.ToTable("subgruprod");
                });

            modelBuilder.Entity("CrudCharts.Models.Tab436SpedPiscofins", b =>
                {
                    b.Property<string>("CdTpCredito")
                        .HasColumnName("cd_tp_credito")
                        .HasMaxLength(3);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(255);

                    b.HasKey("CdTpCredito");

                    b.ToTable("tab_436_sped_piscofins");
                });

            modelBuilder.Entity("CrudCharts.Models.Tab437SpedPiscofins", b =>
                {
                    b.Property<string>("CdBcCredito")
                        .HasColumnName("cd_bc_credito")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(255);

                    b.HasKey("CdBcCredito");

                    b.ToTable("tab_437_sped_piscofins");
                });

            modelBuilder.Entity("CrudCharts.Models.TabelaPreco", b =>
                {
                    b.Property<int>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<string>("FlPercentual")
                        .HasColumnName("fl_percentual")
                        .HasMaxLength(1);

                    b.Property<string>("NmTabelaPreco")
                        .HasColumnName("nm_tabela_preco")
                        .HasMaxLength(40);

                    b.HasKey("CdTabelaPreco");

                    b.ToTable("tabela_preco");
                });

            modelBuilder.Entity("CrudCharts.Models.TabelaPrecoProduto", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("CdTabelaPreco")
                        .HasColumnName("cd_tabela_preco");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("FlUtilizaMarkup")
                        .IsRequired()
                        .HasColumnName("fl_utiliza_markup")
                        .HasMaxLength(1);

                    b.Property<string>("FlUtilizaMarkupFlex")
                        .HasColumnName("fl_utiliza_markup_flex")
                        .HasMaxLength(1);

                    b.Property<string>("HashTabelaPrecoProdutoP2")
                        .HasColumnName("hash_tabela_preco_produto_p2")
                        .HasMaxLength(70);

                    b.Property<decimal?>("PcMarkup")
                        .HasColumnName("pc_markup")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("PcMarkupFlexMax")
                        .HasColumnName("pc_markup_flex_max")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("PcMarkupFlexMin")
                        .HasColumnName("pc_markup_flex_min")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("PcMarkupMin")
                        .HasColumnName("pc_markup_min")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("PrecoVenda")
                        .HasColumnName("preco_venda")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("PrecoVendaFlexMax")
                        .HasColumnName("preco_venda_flex_max")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal?>("PrecoVendaFlexMin")
                        .HasColumnName("preco_venda_flex_min")
                        .HasColumnType("numeric(15,2)");

                    b.Property<decimal>("PrecoVendaMin")
                        .HasColumnName("preco_venda_min")
                        .HasColumnType("numeric(15,2)");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdTabelaPreco", "CdProduto")
                        .IsUnique()
                        .HasName("unq1_tabela_preco_produto");

                    b.ToTable("tabela_preco_produto");
                });

            modelBuilder.Entity("CrudCharts.Models.Tabvcto", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("NrOs")
                        .HasColumnName("nr_os");

                    b.Property<int>("Parcela")
                        .HasColumnName("parcela");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateTime>("DtVcto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_vcto")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<decimal?>("PcParcela")
                        .HasColumnName("pc_parcela")
                        .HasColumnType("numeric(9,2)");

                    b.Property<int>("PrazoParcela")
                        .HasColumnName("prazo_parcela");

                    b.Property<decimal>("VlVcto")
                        .HasColumnName("vl_vcto")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "NrOs", "Parcela");

                    b.ToTable("tabvcto");
                });

            modelBuilder.Entity("CrudCharts.Models.Tipocobr", b =>
                {
                    b.Property<int>("CdTipocobr")
                        .HasColumnName("cd_tipocobr");

                    b.Property<string>("DescricaoTpCobranca")
                        .HasColumnName("descricao_tp_cobranca")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.Property<bool?>("FlEmitirBloqueto")
                        .HasColumnName("fl_emitir_bloqueto");

                    b.Property<bool?>("FlImprimeCarneEcf")
                        .HasColumnName("fl_imprime_carne_ecf");

                    b.Property<bool?>("FlImprimeComprovanteEcf")
                        .HasColumnName("fl_imprime_comprovante_ecf");

                    b.Property<bool>("FlImprimeParcela")
                        .HasColumnName("fl_imprime_parcela");

                    b.Property<bool?>("FlPorcentagem")
                        .HasColumnName("fl_porcentagem");

                    b.Property<string>("NmTipocobr")
                        .IsRequired()
                        .HasColumnName("nm_tipocobr")
                        .HasMaxLength(80);

                    b.Property<decimal?>("TaxaDesc")
                        .HasColumnName("taxa_desc")
                        .HasColumnType("numeric(9,2)");

                    b.Property<string>("TpCobranca")
                        .HasColumnName("tp_cobranca")
                        .HasMaxLength(2);

                    b.Property<decimal?>("VlAcrescimo")
                        .HasColumnName("vl_acrescimo")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdTipocobr");

                    b.ToTable("tipocobr");
                });

            modelBuilder.Entity("CrudCharts.Models.Tributacao", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<int>("IdTributacaoGrupo")
                        .HasColumnName("id_tributacao_grupo");

                    b.Property<string>("UfDestino")
                        .IsRequired()
                        .HasColumnName("uf_destino")
                        .HasMaxLength(2);

                    b.Property<string>("UfOrigem")
                        .IsRequired()
                        .HasColumnName("uf_origem")
                        .HasMaxLength(2);

                    b.HasKey("IdGeral");

                    b.HasIndex("IdTributacaoGrupo", "UfOrigem", "UfDestino")
                        .IsUnique()
                        .HasName("unq1_tributacao");

                    b.ToTable("tributacao");
                });

            modelBuilder.Entity("CrudCharts.Models.TributacaoAliquota", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<double?>("AliqFcp")
                        .HasColumnName("aliq_fcp");

                    b.Property<int?>("CdMensagem")
                        .HasColumnName("cd_mensagem");

                    b.Property<string>("Cst")
                        .IsRequired()
                        .HasColumnName("cst")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("FlReducaoAliqNormal")
                        .HasColumnName("fl_reducao_aliq_normal")
                        .HasMaxLength(1);

                    b.Property<string>("FlReducaoAliqProprio")
                        .HasColumnName("fl_reducao_aliq_proprio")
                        .HasMaxLength(1);

                    b.Property<string>("FlReducaoAliqSubst")
                        .HasColumnName("fl_reducao_aliq_subst")
                        .HasMaxLength(1);

                    b.Property<string>("HashTributacaoAliquotaD3")
                        .HasColumnName("hash_tributacao_aliquota_d3")
                        .HasMaxLength(70);

                    b.Property<string>("HashTributacaoAliquotaP2")
                        .HasColumnName("hash_tributacao_aliquota_p2")
                        .HasMaxLength(70);

                    b.Property<double?>("IcmAliqNormal")
                        .HasColumnName("icm_aliq_normal");

                    b.Property<double?>("IcmAliqProprio")
                        .HasColumnName("icm_aliq_proprio");

                    b.Property<double?>("IcmAliqSubst")
                        .HasColumnName("icm_aliq_subst");

                    b.Property<double?>("IcmRedNormal")
                        .HasColumnName("icm_red_normal");

                    b.Property<double?>("IcmRedProprio")
                        .HasColumnName("icm_red_proprio");

                    b.Property<double?>("IcmRedSubst")
                        .HasColumnName("icm_red_subst");

                    b.Property<int>("IdTributacao")
                        .HasColumnName("id_tributacao");

                    b.Property<string>("TpTributacao")
                        .IsRequired()
                        .HasColumnName("tp_tributacao")
                        .HasMaxLength(1);

                    b.HasKey("IdGeral");

                    b.HasIndex("CdMensagem");

                    b.HasIndex("Cst");

                    b.HasIndex("IdTributacao", "TpTributacao")
                        .IsUnique()
                        .HasName("unq1_tributacao_aliquota");

                    b.ToTable("tributacao_aliquota");
                });

            modelBuilder.Entity("CrudCharts.Models.TributacaoGrupo", b =>
                {
                    b.Property<int>("IdTributacaoGrupo")
                        .HasColumnName("id_tributacao_grupo");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmTributacaoGrupo")
                        .HasColumnName("nm_tributacao_grupo")
                        .HasMaxLength(40);

                    b.HasKey("IdTributacaoGrupo");

                    b.ToTable("tributacao_grupo");
                });

            modelBuilder.Entity("CrudCharts.Models.TributacaoGrupoPisCofins", b =>
                {
                    b.Property<int>("CdTributacao")
                        .HasColumnName("cd_tributacao");

                    b.Property<string>("CofinsCompraCst")
                        .HasColumnName("cofins_compra_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CofinsCompraPcAliq")
                        .HasColumnName("cofins_compra_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("CofinsDevCompraCst")
                        .HasColumnName("cofins_dev_compra_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CofinsDevCompraPcAliq")
                        .HasColumnName("cofins_dev_compra_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("CofinsDevVendaCst")
                        .HasColumnName("cofins_dev_venda_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CofinsDevVendaPcAliq")
                        .HasColumnName("cofins_dev_venda_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("CofinsVendaCst")
                        .HasColumnName("cofins_venda_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CofinsVendaPcAliq")
                        .HasColumnName("cofins_venda_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.Property<string>("NmTributacao")
                        .HasColumnName("nm_tributacao")
                        .HasMaxLength(40);

                    b.Property<string>("PisCompraCst")
                        .HasColumnName("pis_compra_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("PisCompraPcAliq")
                        .HasColumnName("pis_compra_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("PisDevCompraCst")
                        .HasColumnName("pis_dev_compra_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("PisDevCompraPcAliq")
                        .HasColumnName("pis_dev_compra_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("PisDevVendaCst")
                        .HasColumnName("pis_dev_venda_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("PisDevVendaPcAliq")
                        .HasColumnName("pis_dev_venda_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.Property<string>("PisVendaCst")
                        .HasColumnName("pis_venda_cst")
                        .HasMaxLength(2);

                    b.Property<decimal?>("PisVendaPcAliq")
                        .HasColumnName("pis_venda_pc_aliq")
                        .HasColumnType("numeric(8,4)");

                    b.HasKey("CdTributacao");

                    b.HasIndex("CofinsCompraCst");

                    b.HasIndex("CofinsVendaCst");

                    b.HasIndex("PisCompraCst");

                    b.HasIndex("PisVendaCst");

                    b.ToTable("tributacao_grupo_pis_cofins");
                });

            modelBuilder.Entity("CrudCharts.Models.UnMedida", b =>
                {
                    b.Property<string>("UnMedida1")
                        .HasColumnName("un_medida")
                        .HasMaxLength(6);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(60);

                    b.HasKey("UnMedida1");

                    b.ToTable("un_medida");
                });

            modelBuilder.Entity("CrudCharts.Models.Usuario", b =>
                {
                    b.Property<int>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<int?>("CdFuncionario")
                        .HasColumnName("cd_funcionario");

                    b.Property<string>("FlAcessoIrrestrito")
                        .HasColumnName("fl_acesso_irrestrito")
                        .HasMaxLength(1);

                    b.Property<string>("FlAtivo")
                        .HasColumnName("fl_ativo")
                        .HasMaxLength(1);

                    b.Property<string>("FlCtrlCxaRetaguarda")
                        .IsRequired()
                        .HasColumnName("fl_ctrl_cxa_retaguarda")
                        .HasMaxLength(1);

                    b.Property<string>("FlCtrlFilial")
                        .HasColumnName("fl_ctrl_filial")
                        .HasMaxLength(1);

                    b.Property<string>("FlSessaoDifInstalacao")
                        .HasColumnName("fl_sessao_dif_instalacao")
                        .HasMaxLength(20);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasMaxLength(15);

                    b.Property<string>("Senha")
                        .HasColumnName("senha")
                        .HasMaxLength(30);

                    b.HasKey("CdUsuario");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("CrudCharts.Models.UsuarioPerfil", b =>
                {
                    b.Property<int>("CdUsuario")
                        .HasColumnName("cd_usuario");

                    b.Property<int>("CdPerfil")
                        .HasColumnName("cd_perfil");

                    b.HasKey("CdUsuario", "CdPerfil");

                    b.HasIndex("CdPerfil");

                    b.ToTable("usuario_perfil");
                });

            modelBuilder.Entity("CrudCharts.Models.Veiculo", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("CdVeiculo")
                        .HasColumnName("cd_veiculo");

                    b.Property<int>("CdMontadora")
                        .HasColumnName("cd_montadora");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("NmVeiculo")
                        .IsRequired()
                        .HasColumnName("nm_veiculo")
                        .HasMaxLength(70);

                    b.HasKey("CdFilial", "CdVeiculo");

                    b.HasIndex("NmVeiculo")
                        .HasName("ind_veiculo_nome");

                    b.HasIndex("CdFilial", "CdMontadora");

                    b.ToTable("veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoCombustivel", b =>
                {
                    b.Property<string>("CdCombustivel")
                        .HasColumnName("cd_combustivel")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(20);

                    b.HasKey("CdCombustivel");

                    b.ToTable("veiculo_combustivel");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoComplemento", b =>
                {
                    b.Property<int>("CdComplemento")
                        .HasColumnName("cd_complemento");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.HasKey("CdComplemento");

                    b.ToTable("veiculo_complemento");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoCor", b =>
                {
                    b.Property<string>("CdCor")
                        .HasColumnName("cd_cor")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(20);

                    b.HasKey("CdCor");

                    b.ToTable("veiculo_cor");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoDespesas", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<string>("CdProduto")
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("NrSequencial")
                        .HasColumnName("nr_sequencial");

                    b.Property<decimal?>("CustoTotal")
                        .HasColumnName("custo_total")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int?>("DctoVenda")
                        .HasColumnName("dcto_venda");

                    b.Property<DateTime?>("DtCompra")
                        .HasColumnName("dt_compra")
                        .HasColumnType("date");

                    b.Property<int?>("IdNfei")
                        .HasColumnName("id_nfei");

                    b.Property<string>("Observacao")
                        .HasColumnName("observacao");

                    b.Property<decimal?>("VlComissao")
                        .HasColumnName("vl_comissao")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCompra")
                        .HasColumnName("vl_compra")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlCompraReal")
                        .HasColumnName("vl_compra_real")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlDespachante")
                        .HasColumnName("vl_despachante")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlFrete")
                        .HasColumnName("vl_frete")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlIpva")
                        .HasColumnName("vl_ipva")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlPecas")
                        .HasColumnName("vl_pecas")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServTerceiros")
                        .HasColumnName("vl_serv_terceiros")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlServicos")
                        .HasColumnName("vl_servicos")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("VlVendaReal")
                        .HasColumnName("vl_venda_real")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CdFilial", "CdProduto", "NrSequencial");

                    b.HasIndex("CdProduto")
                        .HasName("ind_veiculo_despesas_cd_produto");

                    b.HasIndex("IdNfei");

                    b.HasIndex("CdFilial", "DctoVenda");

                    b.ToTable("veiculo_despesas");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoEspecie", b =>
                {
                    b.Property<string>("CdEspecie")
                        .HasColumnName("cd_especie")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(20);

                    b.HasKey("CdEspecie");

                    b.ToTable("veiculo_especie");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoInjecao", b =>
                {
                    b.Property<int>("CdInjecao")
                        .HasColumnName("cd_injecao");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.HasKey("CdInjecao");

                    b.ToTable("veiculo_injecao");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloComplemento", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdComplemento")
                        .HasColumnName("cd_complemento");

                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("CdComplemento");

                    b.HasIndex("CdFilial", "CdModelo", "CdComplemento")
                        .IsUnique()
                        .HasName("unq_veiculo_modelo_complemento");

                    b.ToTable("veiculo_modelo_complemento");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloInjecao", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdInjecao")
                        .HasColumnName("cd_injecao");

                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("CdInjecao");

                    b.HasIndex("CdFilial", "CdModelo", "CdInjecao")
                        .IsUnique()
                        .HasName("unq_veiculo_modelo_injecao");

                    b.ToTable("veiculo_modelo_injecao");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloMotor", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<int>("CdMotor")
                        .HasColumnName("cd_motor");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("CdMotor");

                    b.HasIndex("CdFilial", "CdModelo", "CdMotor")
                        .IsUnique()
                        .HasName("unq_veiculo_modelo_motor");

                    b.ToTable("veiculo_modelo_motor");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloTransmissao", b =>
                {
                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int>("CdModelo")
                        .HasColumnName("cd_modelo");

                    b.Property<int>("CdTransmissao")
                        .HasColumnName("cd_transmissao");

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz");

                    b.HasKey("CdFilial", "IdGeral");

                    b.HasIndex("CdTransmissao");

                    b.HasIndex("CdFilial", "CdModelo", "CdTransmissao")
                        .IsUnique()
                        .HasName("unq_veiculo_modelo_transmissao");

                    b.ToTable("veiculo_modelo_transmissao");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoMotor", b =>
                {
                    b.Property<int>("CdMotor")
                        .HasColumnName("cd_motor");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.HasKey("CdMotor");

                    b.ToTable("veiculo_motor");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoTipo", b =>
                {
                    b.Property<string>("CdTipo")
                        .HasColumnName("cd_tipo")
                        .HasMaxLength(2);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(20);

                    b.HasKey("CdTipo");

                    b.ToTable("veiculo_tipo");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoTransmissao", b =>
                {
                    b.Property<int>("CdTransmissao")
                        .HasColumnName("cd_transmissao");

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DtAtz")
                        .HasColumnName("dt_atz")
                        .HasColumnType("date");

                    b.HasKey("CdTransmissao");

                    b.ToTable("veiculo_transmissao");
                });

            modelBuilder.Entity("CrudCharts.Models.Veiprod", b =>
                {
                    b.Property<int>("IdGeral")
                        .HasColumnName("id_geral");

                    b.Property<int?>("AnoFinal")
                        .HasColumnName("ano_final");

                    b.Property<int?>("AnoInicial")
                        .HasColumnName("ano_inicial");

                    b.Property<int?>("CdComplemento")
                        .HasColumnName("cd_complemento");

                    b.Property<int>("CdFilial")
                        .HasColumnName("cd_filial");

                    b.Property<int?>("CdMontadora")
                        .HasColumnName("cd_montadora");

                    b.Property<int?>("CdMotor")
                        .HasColumnName("cd_motor");

                    b.Property<string>("CdProduto")
                        .IsRequired()
                        .HasColumnName("cd_produto")
                        .HasMaxLength(15);

                    b.Property<int>("CdVeiculo")
                        .HasColumnName("cd_veiculo");

                    b.Property<DateTime?>("DtAtz")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dt_atz")
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.HasKey("IdGeral");

                    b.HasIndex("CdComplemento");

                    b.HasIndex("CdMotor");

                    b.HasIndex("CdProduto");

                    b.HasIndex("CdFilial", "CdMontadora");

                    b.HasIndex("CdFilial", "CdVeiculo");

                    b.HasIndex("CdVeiculo", "CdProduto", "CdMotor", "CdComplemento", "CdMontadora")
                        .IsUnique()
                        .HasName("unq_veiprod");

                    b.ToTable("veiprod");
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoPerfil", b =>
                {
                    b.HasOne("CrudCharts.Models.PerfilAcesso", "CdPerfilAcessoNavigation")
                        .WithMany("AcessoAcaoPerfil")
                        .HasForeignKey("CdPerfilAcesso")
                        .HasConstraintName("fk_acesso_acao_perfil_per")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.AcessoAcao", "IdAcessoAcaoNavigation")
                        .WithMany("AcessoAcaoPerfil")
                        .HasForeignKey("IdAcessoAcao")
                        .HasConstraintName("fk_acesso_acao_perfil_aca")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelatorio", b =>
                {
                    b.HasOne("CrudCharts.Models.AcessoAcao", "IdAcaoNavigation")
                        .WithOne("AcessoAcaoRelatorio")
                        .HasForeignKey("CrudCharts.Models.AcessoAcaoRelatorio", "IdAcao")
                        .HasConstraintName("fk_acesso_acao_relatorio_1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelCampo", b =>
                {
                    b.HasOne("CrudCharts.Models.AcessoAcao", "IdAcaoNavigation")
                        .WithMany("AcessoAcaoRelCampo")
                        .HasForeignKey("IdAcao")
                        .HasConstraintName("fk_acesso_acao_rel_campo_idacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoRelFiltro", b =>
                {
                    b.HasOne("CrudCharts.Models.AcessoAcaoRelatorio", "IdAcaoNavigation")
                        .WithMany("AcessoAcaoRelFiltro")
                        .HasForeignKey("IdAcao")
                        .HasConstraintName("acesso_acao_rel_filtro_fk")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoAcaoUsuario", b =>
                {
                    b.HasOne("CrudCharts.Models.Usuario", "CdUsuarioNavigation")
                        .WithMany("AcessoAcaoUsuario")
                        .HasForeignKey("CdUsuario")
                        .HasConstraintName("fk_acesso_acao_usuario_u")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.AcessoAcao", "IdAcessoAcaoNavigation")
                        .WithMany("AcessoAcaoUsuario")
                        .HasForeignKey("IdAcessoAcao")
                        .HasConstraintName("fk_acesso_acao_usuario_a")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.AcessoMenu", b =>
                {
                    b.HasOne("CrudCharts.Models.AcessoMenu", "IdMenuPaiNavigation")
                        .WithMany("InverseIdMenuPaiNavigation")
                        .HasForeignKey("IdMenuPai")
                        .HasConstraintName("fk_acesso_menu_acesso_menu")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Administradora", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "ContaCaixaNavigation")
                        .WithMany("Administradora")
                        .HasForeignKey("ContaCaixa")
                        .HasConstraintName("fk_administradora_conta_caixa")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.AdministradoraBandeira", "IdBandeiraNavigation")
                        .WithMany("Administradora")
                        .HasForeignKey("IdBandeira")
                        .HasConstraintName("fk_administradora_bandeira");
                });

            modelBuilder.Entity("CrudCharts.Models.AdministradoraTaxas", b =>
                {
                    b.HasOne("CrudCharts.Models.Administradora", "CdAdministradoraNavigation")
                        .WithMany("AdministradoraTaxas")
                        .HasForeignKey("CdAdministradora")
                        .HasConstraintName("fk_administradora_taxas_cd_adm");
                });

            modelBuilder.Entity("CrudCharts.Models.Agenda", b =>
                {
                    b.HasOne("CrudCharts.Models.AgendaSituacao", "CdSituacaoNavigation")
                        .WithMany("Agenda")
                        .HasForeignKey("CdSituacao")
                        .HasConstraintName("fk_agenda_situacao");
                });

            modelBuilder.Entity("CrudCharts.Models.Agronomo", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeNavigation")
                        .WithMany("Agronomo")
                        .HasForeignKey("CdCidade")
                        .HasConstraintName("fk_agronomo_cidade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ApontamentoDeServico", b =>
                {
                    b.HasOne("CrudCharts.Models.Funcionario", "CdF")
                        .WithMany("ApontamentoDeServico")
                        .HasForeignKey("CdFilial", "CdFuncionario")
                        .HasConstraintName("fk_apontamento_de_servico_2");

                    b.HasOne("CrudCharts.Models.OrcamentoC", "OrcamentoC")
                        .WithMany("ApontamentoDeServico")
                        .HasForeignKey("CdFilial", "NrOs")
                        .HasConstraintName("fk_apontamento_de_servico_1");
                });

            modelBuilder.Entity("CrudCharts.Models.AuditorEstoqueC", b =>
                {
                    b.HasOne("CrudCharts.Models.PedidoC", "NrPedidoCompraNavigation")
                        .WithMany("AuditorEstoqueC")
                        .HasForeignKey("NrPedidoCompra")
                        .HasConstraintName("fk_auditorc_pedidoc");

                    b.HasOne("CrudCharts.Models.OrcamentoC", "OrcamentoC")
                        .WithMany("AuditorEstoqueC")
                        .HasForeignKey("CdFilial", "NrOs")
                        .HasConstraintName("fk_auditorc_orcamentoc");
                });

            modelBuilder.Entity("CrudCharts.Models.AuditorEstoqueI", b =>
                {
                    b.HasOne("CrudCharts.Models.AuditorEstoqueC", "AuditorEstoqueC")
                        .WithMany("AuditorEstoqueI")
                        .HasForeignKey("CdFilial", "IdAuditorC")
                        .HasConstraintName("fk_auditori_auditorc");
                });

            modelBuilder.Entity("CrudCharts.Models.Caixa", b =>
                {
                    b.HasOne("CrudCharts.Models.ContaContabil", "CdContaContabilNavigation")
                        .WithMany("Caixa")
                        .HasForeignKey("CdContaContabil")
                        .HasConstraintName("fk_caixa_conta_contabil");
                });

            modelBuilder.Entity("CrudCharts.Models.Cargo", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("Cargo")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("filial_cargo_fk");
                });

            modelBuilder.Entity("CrudCharts.Models.CartaCorrecaoHist", b =>
                {
                    b.HasOne("CrudCharts.Models.CartaCorrecao", "IdCartaCorrecaoNavigation")
                        .WithMany("CartaCorrecaoHist")
                        .HasForeignKey("IdCartaCorrecao")
                        .HasConstraintName("fk_carta_correcao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Cidade", b =>
                {
                    b.HasOne("CrudCharts.Models.Regiao", "CdRegiaoNavigation")
                        .WithMany("Cidade")
                        .HasForeignKey("CdRegiao")
                        .HasConstraintName("cidade_cd_regiao_fkey");
                });

            modelBuilder.Entity("CrudCharts.Models.Cliente", b =>
                {
                    b.HasOne("CrudCharts.Models.ContaContabil", "CdContaContabilNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("CdContaContabil")
                        .HasConstraintName("fk_cliente_conta_contabil");

                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_cliefilial");

                    b.HasOne("CrudCharts.Models.Funcionario", "Cd")
                        .WithMany("Cliente")
                        .HasForeignKey("CdFilial", "CdVendedor")
                        .HasConstraintName("fk_cliefuncionario");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteContato", b =>
                {
                    b.HasOne("CrudCharts.Models.Contato", "CdContatoNavigation")
                        .WithMany("ClienteContato")
                        .HasForeignKey("CdContato")
                        .HasConstraintName("fk_cliente_contato_contato")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("ClienteContato")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_cliente_contato");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteEntrega", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeNavigation")
                        .WithMany("ClienteEntrega")
                        .HasForeignKey("CdCidade")
                        .HasConstraintName("fk_cliente_entrega_cidade");

                    b.HasOne("CrudCharts.Models.Cliente", "CdClienteNavigation")
                        .WithMany("ClienteEntrega")
                        .HasForeignKey("CdCliente")
                        .HasConstraintName("fk_cliente_entrega_cliente")
                        .HasPrincipalKey("CdCliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ClientePropriedade", b =>
                {
                    b.HasOne("CrudCharts.Models.Propriedade", "CdPropriedadeNavigation")
                        .WithMany("ClientePropriedade")
                        .HasForeignKey("CdPropriedade")
                        .HasConstraintName("fk_cliente_propriedade_propried");

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("ClientePropriedade")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_cliente_propriedade_cliente");
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteResumoFinanceiro", b =>
                {
                    b.HasOne("CrudCharts.Models.Cliente", "CdClienteNavigation")
                        .WithMany("ClienteResumoFinanceiro")
                        .HasForeignKey("CdCliente")
                        .HasConstraintName("fk_cliente_resumo_financeiro_cl")
                        .HasPrincipalKey("CdCliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.FilialBd", "CdFilialNavigation")
                        .WithMany("ClienteResumoFinanceiro")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_cliente_resumo_financeiro_fi")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ClienteResumoFinanceiroLog", b =>
                {
                    b.HasOne("CrudCharts.Models.FilialBd", "CdFilialNavigation")
                        .WithOne("ClienteResumoFinanceiroLog")
                        .HasForeignKey("CrudCharts.Models.ClienteResumoFinanceiroLog", "CdFilial")
                        .HasConstraintName("fk_cliente_resumo_log_filial")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Clieveic", b =>
                {
                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("Clieveic")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_delcliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Veiculo", "CdNavigation")
                        .WithMany("Clieveic")
                        .HasForeignKey("CdFilial", "CdMontadora")
                        .HasConstraintName("fk_veiccliente");
                });

            modelBuilder.Entity("CrudCharts.Models.CobBordero", b =>
                {
                    b.HasOne("CrudCharts.Models.CobConvenio", "CdConvenioNavigation")
                        .WithMany("CobBordero")
                        .HasForeignKey("CdConvenio")
                        .HasConstraintName("fk_cob_bordero_convenio");
                });

            modelBuilder.Entity("CrudCharts.Models.CobBorderoParcela", b =>
                {
                    b.HasOne("CrudCharts.Models.CobBordero", "CdBorderoNavigation")
                        .WithMany("CobBorderoParcela")
                        .HasForeignKey("CdBordero")
                        .HasConstraintName("fk_cob_bordero_parcela");

                    b.HasOne("CrudCharts.Models.CobParcela", "IdParcelaNavigation")
                        .WithMany("CobBorderoParcela")
                        .HasForeignKey("IdParcela")
                        .HasConstraintName("fk_cob_bordero_parcela_bor");
                });

            modelBuilder.Entity("CrudCharts.Models.CobConvenioAtributo", b =>
                {
                    b.HasOne("CrudCharts.Models.CobConvenio", "CdConvenioNavigation")
                        .WithMany("CobConvenioAtributo")
                        .HasForeignKey("CdConvenio")
                        .HasConstraintName("fk_cob_convenio_atributo_conv");
                });

            modelBuilder.Entity("CrudCharts.Models.CobConvenioFormaPgto", b =>
                {
                    b.HasOne("CrudCharts.Models.CobConvenio", "CdConvenioNavigation")
                        .WithMany("CobConvenioFormaPgto")
                        .HasForeignKey("CdConvenio")
                        .HasConstraintName("fk_cob_convenio_forma_pgto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.CobParcela", b =>
                {
                    b.HasOne("CrudCharts.Models.CobConvenio", "CdConvenioNavigation")
                        .WithMany("CobParcela")
                        .HasForeignKey("CdConvenio")
                        .HasConstraintName("cob_parcela_fk");
                });

            modelBuilder.Entity("CrudCharts.Models.CobRetorno", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("CobRetorno")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_cob_retorno_filial");
                });

            modelBuilder.Entity("CrudCharts.Models.CobRetornoParcela", b =>
                {
                    b.HasOne("CrudCharts.Models.CobRetorno", "CdRetornoNavigation")
                        .WithMany("CobRetornoParcela")
                        .HasForeignKey("CdRetorno")
                        .HasConstraintName("fk_cob_retorno_cd_retorno");
                });

            modelBuilder.Entity("CrudCharts.Models.Comissao", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("Comissao")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("filial_comissao_fk");

                    b.HasOne("CrudCharts.Models.GrupoComissao", "CdGrupoComissaoNavigation")
                        .WithMany("Comissao")
                        .HasForeignKey("CdGrupoComissao")
                        .HasConstraintName("grupo_comissao_comissao_fk");

                    b.HasOne("CrudCharts.Models.Funcionario", "CdF")
                        .WithMany("Comissao")
                        .HasForeignKey("CdFilial", "CdFuncionario")
                        .HasConstraintName("funcionario_comissao_fk");
                });

            modelBuilder.Entity("CrudCharts.Models.ComissaoFuncDev", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecDevNavigation")
                        .WithMany("ComissaoFuncDev")
                        .HasForeignKey("IdNfecDev")
                        .HasConstraintName("fk_comissao_func_dev_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ConfSpedPisCofins", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("ConfSpedPisCofins")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_conf_sped_pis_cofins_filial");
                });

            modelBuilder.Entity("CrudCharts.Models.Consulta", b =>
                {
                    b.HasOne("CrudCharts.Models.AcessoAcao", "IdAcaoCadastroNavigation")
                        .WithMany("Consulta")
                        .HasForeignKey("IdAcaoCadastro")
                        .HasConstraintName("fk_consulta_acao");
                });

            modelBuilder.Entity("CrudCharts.Models.ConsultaCampo", b =>
                {
                    b.HasOne("CrudCharts.Models.Consulta", "IdConsultaNavigation")
                        .WithMany("ConsultaCampo")
                        .HasForeignKey("IdConsulta")
                        .HasConstraintName("fk_id_consulta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Contato", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeNavigation")
                        .WithMany("Contato")
                        .HasForeignKey("CdCidade")
                        .HasConstraintName("fk_contato_cidade");
                });

            modelBuilder.Entity("CrudCharts.Models.Crptitulo", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("Crptitulo")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_crptitulo_cxa_conta");
                });

            modelBuilder.Entity("CrudCharts.Models.CrptituloFuncionario", b =>
                {
                    b.HasOne("CrudCharts.Models.Funcionario", "CdF")
                        .WithMany("CrptituloFuncionario")
                        .HasForeignKey("CdFilial", "CdFuncionario")
                        .HasConstraintName("fk_crptitulo_funcionario_func")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.CrptituloMovimentoCxa", b =>
                {
                    b.HasOne("CrudCharts.Models.MovimentoCxa", "MovimentoCxa")
                        .WithMany("CrptituloMovimentoCxa")
                        .HasForeignKey("CdFilial", "CdCaixa", "NrLcto")
                        .HasConstraintName("fk_crptitulo_movimento_cxa");

                    b.HasOne("CrudCharts.Models.Crptitulo", "Crptitulo")
                        .WithMany("CrptituloMovimentoCxa")
                        .HasForeignKey("CdFilial", "CdTipoConta", "CdClifor", "NrTitulo", "Parcela")
                        .HasConstraintName("fk_crptitulo_movimento_cxa_1");
                });

            modelBuilder.Entity("CrudCharts.Models.Cst", b =>
                {
                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("Cst")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_cst_mensagem");
                });

            modelBuilder.Entity("CrudCharts.Models.Custcomp", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("Custcomp")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_cusproduto");

                    b.HasOne("CrudCharts.Models.Nfei", "IdNfeiNavigation")
                        .WithMany("Custcomp")
                        .HasForeignKey("IdNfei")
                        .HasConstraintName("fk_custcomp_nfei")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.CxaConta", b =>
                {
                    b.HasOne("CrudCharts.Models.ContaContabil", "CdContaContabilNavigation")
                        .WithMany("CxaConta")
                        .HasForeignKey("CdContaContabil")
                        .HasConstraintName("fk_cxa_conta_conta_contabil");
                });

            modelBuilder.Entity("CrudCharts.Models.DocNaoFiscalC", b =>
                {
                    b.HasOne("CrudCharts.Models.Impfiscal", "CdEcfNavigation")
                        .WithMany("DocNaoFiscalC")
                        .HasForeignKey("CdEcf")
                        .HasConstraintName("fk_doc_nao_fiscal_c_impfiscal")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.DocNaoFiscalI", b =>
                {
                    b.HasOne("CrudCharts.Models.DocNaoFiscalC", "IdDocNaoFiscalNavigation")
                        .WithMany("DocNaoFiscalI")
                        .HasForeignKey("IdDocNaoFiscal")
                        .HasConstraintName("fk_doc_n_fiscal_i_doc_n_fisc_c")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.DocProducao", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("DocProducao")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_doc_producao_filial");
                });

            modelBuilder.Entity("CrudCharts.Models.Estoque", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("Estoque")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_estproduto");
                });

            modelBuilder.Entity("CrudCharts.Models.Filial", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("Filial")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_filial_cxa_conta");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemCupomNavigation")
                        .WithMany("FilialCdMensagemCupomNavigation")
                        .HasForeignKey("CdMensagemCupom")
                        .HasConstraintName("fk_filial_msg_cupom");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemDavNavigation")
                        .WithMany("FilialCdMensagemDavNavigation")
                        .HasForeignKey("CdMensagemDav")
                        .HasConstraintName("fk_filial_msg_dav");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemIcmStNotaDevNavigation")
                        .WithMany("FilialCdMensagemIcmStNotaDevNavigation")
                        .HasForeignKey("CdMensagemIcmStNotaDev")
                        .HasConstraintName("fk_filial_msg_icm_st");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemPreVendaNavigation")
                        .WithMany("FilialCdMensagemPreVendaNavigation")
                        .HasForeignKey("CdMensagemPreVenda")
                        .HasConstraintName("fk_filial_msg_pre_venda");

                    b.HasOne("CrudCharts.Models.TabelaPreco", "CdTabelaPrecoPadraoNavigation")
                        .WithMany("Filial")
                        .HasForeignKey("CdTabelaPrecoPadrao")
                        .HasConstraintName("fk_filial_preco");
                });

            modelBuilder.Entity("CrudCharts.Models.FilialEmail", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("FilialEmail")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_filial_email_filial")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.FilialIeSt", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("FilialIeSt")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_filial_ie_st_filial")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Fornecedor", b =>
                {
                    b.HasOne("CrudCharts.Models.ContaContabil", "CdContaContabilNavigation")
                        .WithMany("Fornecedor")
                        .HasForeignKey("CdContaContabil")
                        .HasConstraintName("fk_fornecedor_conta_contabil");
                });

            modelBuilder.Entity("CrudCharts.Models.FornecedorContato", b =>
                {
                    b.HasOne("CrudCharts.Models.Contato", "CdContatoNavigation")
                        .WithMany("FornecedorContato")
                        .HasForeignKey("CdContato")
                        .HasConstraintName("fk_fornecedor_contato_contato")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Fornecedor", "CdF")
                        .WithMany("FornecedorContato")
                        .HasForeignKey("CdFilial", "CdFornecedor")
                        .HasConstraintName("fk_fornecedor_contato");
                });

            modelBuilder.Entity("CrudCharts.Models.Fornveic", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("Fornveic")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_fornveic_filial");

                    b.HasOne("CrudCharts.Models.Fornecedor", "CdF")
                        .WithMany("Fornveic")
                        .HasForeignKey("CdFilial", "CdFornecedor")
                        .HasConstraintName("fk_fornveic_fornecedor");

                    b.HasOne("CrudCharts.Models.Veiculo", "Cd")
                        .WithMany("Fornveic")
                        .HasForeignKey("CdFilial", "CdVeiculo")
                        .HasConstraintName("fk_fornveic_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.FrenteCaixa", b =>
                {
                    b.HasOne("CrudCharts.Models.OperacaoEs", "CdOperacaoNavigation")
                        .WithMany("FrenteCaixa")
                        .HasForeignKey("CdOperacao")
                        .HasConstraintName("fk_frente_caixa_1");

                    b.HasOne("CrudCharts.Models.TabelaPreco", "CdTabelaPrecoNavigation")
                        .WithMany("FrenteCaixa")
                        .HasForeignKey("CdTabelaPreco")
                        .HasConstraintName("fk_frente_caixa_2");
                });

            modelBuilder.Entity("CrudCharts.Models.Funcionario", b =>
                {
                    b.HasOne("CrudCharts.Models.Cargo", "Cd")
                        .WithMany("Funcionario")
                        .HasForeignKey("CdCargo", "CdFilial")
                        .HasConstraintName("cargo_funcionario_fk");
                });

            modelBuilder.Entity("CrudCharts.Models.HelpAtzAlteracao", b =>
                {
                    b.HasOne("CrudCharts.Models.HelpAtz", "IdHelpAtzNavigation")
                        .WithMany("HelpAtzAlteracao")
                        .HasForeignKey("IdHelpAtz")
                        .HasConstraintName("fk_help_atz_alteracao_help_atz");
                });

            modelBuilder.Entity("CrudCharts.Models.ImpfiscalAliquota", b =>
                {
                    b.HasOne("CrudCharts.Models.Impfiscal", "CdImpfiscalNavigation")
                        .WithMany("ImpfiscalAliquota")
                        .HasForeignKey("CdImpfiscal")
                        .HasConstraintName("fk_impfiscal_aliquota_impfiscal")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.LctoFlex", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("LctoFlex")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_lcto_flex_filial");

                    b.HasOne("CrudCharts.Models.Funcionario", "Cd")
                        .WithMany("LctoFlex")
                        .HasForeignKey("CdFilial", "CdVendedor")
                        .HasConstraintName("fk_lcto_flex_funcionario");

                    b.HasOne("CrudCharts.Models.Nfsi", "Nfsi")
                        .WithMany("LctoFlex")
                        .HasForeignKey("CdFilial", "NrDocumento", "NrSequencia")
                        .HasConstraintName("fk_lcto_flex_nfsi")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Mdfe", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeCarregamentoNavigation")
                        .WithMany("Mdfe")
                        .HasForeignKey("CdCidadeCarregamento")
                        .HasConstraintName("fk_mdfe_cidade");

                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("Mdfe")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_mdfe_filial");

                    b.HasOne("CrudCharts.Models.ModeloDcto", "CdModeloNavigation")
                        .WithMany("Mdfe")
                        .HasForeignKey("CdModelo")
                        .HasConstraintName("fk_mdfe_modelo_dcto");

                    b.HasOne("CrudCharts.Models.NrSerieNfs", "NrSerieNavigation")
                        .WithMany("Mdfe")
                        .HasForeignKey("NrSerie")
                        .HasConstraintName("fk_mdfe_serie");

                    b.HasOne("CrudCharts.Models.Fornecedor", "Cd")
                        .WithMany("Mdfe")
                        .HasForeignKey("CdFilial", "CdProprietarioVeiculo")
                        .HasConstraintName("fk_mdfe_proprietario");

                    b.HasOne("CrudCharts.Models.Fornveic", "Fornveic")
                        .WithMany("Mdfe")
                        .HasForeignKey("CdFilial", "IdFornveic")
                        .HasConstraintName("fk_mdfe_fornveic");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeCondutor", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("MdfeCondutor")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_mdfe_condutor_filial");

                    b.HasOne("CrudCharts.Models.Motorista", "CdMotoristaNavigation")
                        .WithMany("MdfeCondutor")
                        .HasForeignKey("CdMotorista")
                        .HasConstraintName("fk_mdfe_condutor_motorista");

                    b.HasOne("CrudCharts.Models.Mdfe", "IdMdfeNavigation")
                        .WithMany("MdfeCondutor")
                        .HasForeignKey("IdMdfe")
                        .HasConstraintName("fk_mdfe_condutor_mdfe");

                    b.HasOne("CrudCharts.Models.Fornecedor", "CdF")
                        .WithMany("MdfeCondutor")
                        .HasForeignKey("CdFilial", "CdFornecedor")
                        .HasConstraintName("fk_mdfe_condutor_fornecedor");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeDocumento", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("MdfeDocumento")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_mdfe_documento_filial");

                    b.HasOne("CrudCharts.Models.Mdfe", "IdMdfeNavigation")
                        .WithMany("MdfeDocumento")
                        .HasForeignKey("IdMdfe")
                        .HasConstraintName("fk_mdfe_documento_mdfe");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfeEvento", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("MdfeEvento")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_mdfe_evento_filial");

                    b.HasOne("CrudCharts.Models.Mdfe", "IdMdfeNavigation")
                        .WithMany("MdfeEvento")
                        .HasForeignKey("IdMdfe")
                        .HasConstraintName("fk_mdfe_evento_mdfe");
                });

            modelBuilder.Entity("CrudCharts.Models.MdfePercurso", b =>
                {
                    b.HasOne("CrudCharts.Models.Filial", "CdFilialNavigation")
                        .WithMany("MdfePercurso")
                        .HasForeignKey("CdFilial")
                        .HasConstraintName("fk_mdfe_percurso_filial");

                    b.HasOne("CrudCharts.Models.Mdfe", "IdMdfeNavigation")
                        .WithMany("MdfePercurso")
                        .HasForeignKey("IdMdfe")
                        .HasConstraintName("fk_mdfe_percurso_mdfe");
                });

            modelBuilder.Entity("CrudCharts.Models.Motorista", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeNavigation")
                        .WithMany("Motorista")
                        .HasForeignKey("CdCidade")
                        .HasConstraintName("fk_motorista_cidade");

                    b.HasOne("CrudCharts.Models.Fornecedor", "Cd")
                        .WithMany("Motorista")
                        .HasForeignKey("CdFilial", "CdTransportador")
                        .HasConstraintName("fk_motorista_transportador");
                });

            modelBuilder.Entity("CrudCharts.Models.MovimentoCxa", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("MovimentoCxa")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_movimento_cxa_cxa_conta");

                    b.HasOne("CrudCharts.Models.Caixa", "Cd")
                        .WithMany("MovimentoCxa")
                        .HasForeignKey("CdFilial", "CdCaixa")
                        .HasConstraintName("fk_movimento_cxa_caixa");
                });

            modelBuilder.Entity("CrudCharts.Models.MovimentoSeguradora", b =>
                {
                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("MovimentoSeguradora")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_movimento_seg_cliente");

                    b.HasOne("CrudCharts.Models.Fornecedor", "CdNavigation")
                        .WithMany("MovimentoSeguradora")
                        .HasForeignKey("CdFilial", "CdSeguradora")
                        .HasConstraintName("fk_movimento_seg_seguradora");

                    b.HasOne("CrudCharts.Models.MovimentoCxa", "MovimentoCxa")
                        .WithMany("MovimentoSeguradora")
                        .HasForeignKey("CdFilial", "CdCaixa", "NrLcto")
                        .HasConstraintName("fk_movimento_seg_lcto");
                });

            modelBuilder.Entity("CrudCharts.Models.Msggrupo", b =>
                {
                    b.HasOne("CrudCharts.Models.Gruprod", "CdGruprodNavigation")
                        .WithMany("Msggrupo")
                        .HasForeignKey("CdGruprod")
                        .HasConstraintName("gruprod_msggrupo_fk");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("Msggrupo")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_msggrupo_cd_mensagem");
                });

            modelBuilder.Entity("CrudCharts.Models.NfcFrete", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdFreteNavigation")
                        .WithMany("NfcFreteIdFreteNavigation")
                        .HasForeignKey("IdFrete")
                        .HasConstraintName("fk_nfc_frete_frete")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("NfcFreteIdNfecNavigation")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_nfc_frete_nfec")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Nfsc", "Nfsc")
                        .WithMany("NfcFrete")
                        .HasForeignKey("CdFilialNfsc", "NrDocumentoNfsc")
                        .HasConstraintName("fk_nfc_frete_nfsc")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfContabilCfop", b =>
                {
                    b.HasOne("CrudCharts.Models.NfContabilC", "IdNfContabilCNavigation")
                        .WithMany("NfContabilCfop")
                        .HasForeignKey("IdNfContabilC")
                        .HasConstraintName("fk_nf_contabil_cfop_nf_cont_c")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfContabilI", b =>
                {
                    b.HasOne("CrudCharts.Models.NfContabilC", "IdNfContabilCNavigation")
                        .WithMany("NfContabilI")
                        .HasForeignKey("IdNfContabilC")
                        .HasConstraintName("fk_nf_contabil_i_nf_contabil_c")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Nfec", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("Nfec")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_nfec_cxa_conta");

                    b.HasOne("CrudCharts.Models.PedidoC", "NrPedidoNavigation")
                        .WithMany("Nfec")
                        .HasForeignKey("NrPedido")
                        .HasConstraintName("fk_nfec_pedido");
                });

            modelBuilder.Entity("CrudCharts.Models.NfecConhecimento", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithOne("NfecConhecimento")
                        .HasForeignKey("CrudCharts.Models.NfecConhecimento", "IdNfec")
                        .HasConstraintName("fk_nfec_conhecimento_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfecEnergiaEletrica", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithOne("NfecEnergiaEletrica")
                        .HasForeignKey("CrudCharts.Models.NfecEnergiaEletrica", "IdNfec")
                        .HasConstraintName("fk_nfec_energia_eletrica_1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfecImportacao", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("NfecImportacao")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_nfec_importacao_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfecMensagem", b =>
                {
                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("NfecMensagem")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_nfec_mensagem_nota");

                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("NfecMensagem")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_nfec_mensagem_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Nfei", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("Nfei")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_nfei_cxa_conta");

                    b.HasOne("CrudCharts.Models.Produto", "CdProdservNavigation")
                        .WithMany("Nfei")
                        .HasForeignKey("CdProdserv")
                        .HasConstraintName("fk_nfeproduto");

                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("Nfei")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_nfei_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Nfeicomplemento", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfei", "IdNfeiNavigation")
                        .WithOne("Nfeicomplemento")
                        .HasForeignKey("CrudCharts.Models.Nfeicomplemento", "IdNfei")
                        .HasConstraintName("fk_nfeicomplemento_nfei")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfeiImportacao", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfei", "IdNfeiNavigation")
                        .WithMany("NfeiImportacao")
                        .HasForeignKey("IdNfei")
                        .HasConstraintName("fk_nfei_importacao_nfei")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Nfsc", b =>
                {
                    b.HasOne("CrudCharts.Models.Impfiscal", "CdImpfiscalNavigation")
                        .WithMany("Nfsc")
                        .HasForeignKey("CdImpfiscal")
                        .HasConstraintName("fk_nfsc_impfiscal");

                    b.HasOne("CrudCharts.Models.ModeloDcto", "CdModeloNavigation")
                        .WithMany("Nfsc")
                        .HasForeignKey("CdModelo")
                        .HasConstraintName("fk_nfsc_cd_modelo");

                    b.HasOne("CrudCharts.Models.TabelaPreco", "CdTabelaPrecoNavigation")
                        .WithMany("Nfsc")
                        .HasForeignKey("CdTabelaPreco")
                        .HasConstraintName("fk_nfsc_tabela_preco");

                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecDevolucaoNavigation")
                        .WithMany("Nfsc")
                        .HasForeignKey("IdNfecDevolucao")
                        .HasConstraintName("fk_nfsc_id_nfec_devolucao");

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("Nfsc")
                        .HasForeignKey("CdFilial", "CdClifor")
                        .HasConstraintName("fk_nfscliente");
                });

            modelBuilder.Entity("CrudCharts.Models.NfscMensagem", b =>
                {
                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("NfscMensagem")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_nfsc_mensagem_nota");

                    b.HasOne("CrudCharts.Models.Nfsc", "Nfsc")
                        .WithMany("NfscMensagem")
                        .HasForeignKey("CdFilial", "NrDocumento")
                        .HasConstraintName("fk_nfsc_mensagem_nfsc")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Nfsi", b =>
                {
                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaNavigation")
                        .WithMany("Nfsi")
                        .HasForeignKey("CdConta")
                        .HasConstraintName("fk_nfsi_cxa_conta");

                    b.HasOne("CrudCharts.Models.Nfsc", "Nfsc")
                        .WithMany("Nfsi")
                        .HasForeignKey("CdFilial", "NrDocumento")
                        .HasConstraintName("fk_nfsi_nfsc")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NfsiCupom", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfsi", "Nfsi")
                        .WithOne("NfsiCupom")
                        .HasForeignKey("CrudCharts.Models.NfsiCupom", "CdFilial", "NrDocumento", "NrSequencia")
                        .HasConstraintName("fk_nfsi_cupom_nfsi")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.NsuProdutoNegativo", b =>
                {
                    b.HasOne("CrudCharts.Models.Nsu", "IdNsuNavigation")
                        .WithMany("NsuProdutoNegativo")
                        .HasForeignKey("IdNsu")
                        .HasConstraintName("fk_nsu_produto_nsu");
                });

            modelBuilder.Entity("CrudCharts.Models.OperacaoCfopRegra", b =>
                {
                    b.HasOne("CrudCharts.Models.CfopRegra", "CdCfopRegraNavigation")
                        .WithMany("OperacaoCfopRegra")
                        .HasForeignKey("CdCfopRegra")
                        .HasConstraintName("fk_operacao_cfop_regra_1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.OperacaoEs", "CdOperacaoNavigation")
                        .WithMany("OperacaoCfopRegra")
                        .HasForeignKey("CdOperacao")
                        .HasConstraintName("fk_operacao_cfop_regra_2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.OperacaoEs", b =>
                {
                    b.HasOne("CrudCharts.Models.Tab437SpedPiscofins", "CdBcCredPiscofinsNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdBcCredPiscofins")
                        .HasConstraintName("fk_operacao_es_cd_bc_cred_pisco");

                    b.HasOne("CrudCharts.Models.CxaConta", "CdContaMovimentoNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdContaMovimento")
                        .HasConstraintName("fk_operacao_es_cxa_conta");

                    b.HasOne("CrudCharts.Models.GrupoOperacaoEs", "CdGrupoOpNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdGrupoOp")
                        .HasConstraintName("fk_operacao_es_grupo_op");

                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_operacao_es_cd_mensagem");

                    b.HasOne("CrudCharts.Models.ModeloDcto", "CdModeloNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdModelo")
                        .HasConstraintName("fk_operacao_es_cd_modelo");

                    b.HasOne("CrudCharts.Models.Tab436SpedPiscofins", "CdTpCredPiscofinsNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("CdTpCredPiscofins")
                        .HasConstraintName("fk_operacao_es_cd_tp_cred_pisco");

                    b.HasOne("CrudCharts.Models.TributacaoGrupo", "IdTributacaoGrupoNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("IdTributacaoGrupo")
                        .HasConstraintName("fk_operacao_es_id_trib_grupo");

                    b.HasOne("CrudCharts.Models.TributacaoGrupoPisCofins", "IdTributacaoGrupoPisCofinsNavigation")
                        .WithMany("OperacaoEs")
                        .HasForeignKey("IdTributacaoGrupoPisCofins")
                        .HasConstraintName("fk_operacao_es_id_trib_pis_cofi");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoC", b =>
                {
                    b.HasOne("CrudCharts.Models.FrenteCaixa", "CdFrenteCaixaNavigation")
                        .WithMany("OrcamentoC")
                        .HasForeignKey("CdFrenteCaixa")
                        .HasConstraintName("fk_orcamento_c_frente_caixa");

                    b.HasOne("CrudCharts.Models.Situacao", "CdSituacaoNavigation")
                        .WithMany("OrcamentoC")
                        .HasForeignKey("CdSituacao")
                        .HasConstraintName("fk_orcamento_c_situacao");

                    b.HasOne("CrudCharts.Models.TabelaPreco", "CdTabelaPrecoNavigation")
                        .WithMany("OrcamentoC")
                        .HasForeignKey("CdTabelaPreco")
                        .HasConstraintName("fk_orcamento_c_tabela_preco");

                    b.HasOne("CrudCharts.Models.Usuario", "UsuarioCancelamentoNavigation")
                        .WithMany("OrcamentoC")
                        .HasForeignKey("UsuarioCancelamento")
                        .HasConstraintName("fk_orcamento_c_usuario");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoContato", b =>
                {
                    b.HasOne("CrudCharts.Models.Contato", "CdContatoNavigation")
                        .WithMany("OrcamentoContato")
                        .HasForeignKey("CdContato")
                        .HasConstraintName("fk_orcamento_contato_contato")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.OrcamentoC", "OrcamentoC")
                        .WithMany("OrcamentoContato")
                        .HasForeignKey("CdFilial", "NrOs")
                        .HasConstraintName("fk_orcamento_contato_orc");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoI", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("OrcamentoI")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_orcproduto");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoIAgrupa", b =>
                {
                    b.HasOne("CrudCharts.Models.OrcamentoI", "OrcamentoI")
                        .WithMany("OrcamentoIAgrupaOrcamentoI")
                        .HasForeignKey("CdFilial", "NrOs", "NrSequenciaEquip")
                        .HasConstraintName("fk_orcamento_i_agrupa_equip");

                    b.HasOne("CrudCharts.Models.OrcamentoI", "OrcamentoINavigation")
                        .WithMany("OrcamentoIAgrupaOrcamentoINavigation")
                        .HasForeignKey("CdFilial", "NrOs", "NrSequenciaServico")
                        .HasConstraintName("fk_orcamento_i_agrupa_servico");
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoIReservaEstoque", b =>
                {
                    b.HasOne("CrudCharts.Models.OrcamentoI", "OrcamentoI")
                        .WithOne("OrcamentoIReservaEstoque")
                        .HasForeignKey("CrudCharts.Models.OrcamentoIReservaEstoque", "CdFilial", "NrOs", "NrSequencia")
                        .HasConstraintName("fk_orcamento_i_reserva_estoque_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.OrcamentoNfe", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("OrcamentoNfe")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_orcamento_nfe_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.OrdemProducaoI", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdItemNavigation")
                        .WithMany("OrdemProducaoI")
                        .HasForeignKey("CdItem")
                        .HasConstraintName("fk_ordem_producao_i_cd_produto");

                    b.HasOne("CrudCharts.Models.OrdemProducaoC", "IdOrdemProducaoCNavigation")
                        .WithMany("OrdemProducaoI")
                        .HasForeignKey("IdOrdemProducaoC")
                        .HasConstraintName("fk_ordem_producao_i_id_ordem_c");
                });

            modelBuilder.Entity("CrudCharts.Models.PafecfE3", b =>
                {
                    b.HasOne("CrudCharts.Models.Impfiscal", "CdImpfiscalNavigation")
                        .WithMany("PafecfE3")
                        .HasForeignKey("CdImpfiscal")
                        .HasConstraintName("fk_pafecf_e3");
                });

            modelBuilder.Entity("CrudCharts.Models.PedidoI", b =>
                {
                    b.HasOne("CrudCharts.Models.PedidoC", "NrPedidoNavigation")
                        .WithMany("PedidoI")
                        .HasForeignKey("NrPedido")
                        .HasConstraintName("fk_pedido")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.UnMedida", "UnMedidaNavigation")
                        .WithMany("PedidoI")
                        .HasForeignKey("UnMedida")
                        .HasConstraintName("fk_pedido_i_un_medida");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdComposto", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("ProdComposto")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_updtpproduto");
                });

            modelBuilder.Entity("CrudCharts.Models.Produto", b =>
                {
                    b.HasOne("CrudCharts.Models.CfopRegra", "CdCfopRegraNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdCfopRegra")
                        .HasConstraintName("fk_produto_cfop_regra");

                    b.HasOne("CrudCharts.Models.ProdutoClassFiscal", "CdClassFiscalNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdClassFiscal")
                        .HasConstraintName("fk_produto_class_fiscal");

                    b.HasOne("CrudCharts.Models.GrupoComissao", "CdGrupoComissaoNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdGrupoComissao")
                        .HasConstraintName("grupo_comissao_produto_fk");

                    b.HasOne("CrudCharts.Models.Gruprod", "CdGruprodNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdGruprod")
                        .HasConstraintName("produto_cd_gruprod_fkey");

                    b.HasOne("CrudCharts.Models.Marca", "CdMarcaNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdMarca")
                        .HasConstraintName("produto_cd_marca_fkey");

                    b.HasOne("CrudCharts.Models.Subgruprod", "CdSubgruprodNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CdSubgruprod")
                        .HasConstraintName("fk_subproduto");

                    b.HasOne("CrudCharts.Models.CodigoTributacaoMunicipio", "CodigoTributacaoMunicipioNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("CodigoTributacaoMunicipio")
                        .HasConstraintName("fk_produto_tribmuni");

                    b.HasOne("CrudCharts.Models.TributacaoGrupoPisCofins", "IdTribGrupoPiscofinsNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("IdTribGrupoPiscofins")
                        .HasConstraintName("fk_produto_grupo_trib_piscofins");

                    b.HasOne("CrudCharts.Models.TributacaoGrupo", "IdTributacaoGrupoNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("IdTributacaoGrupo")
                        .HasConstraintName("fk_produto_tributacao_grupo");

                    b.HasOne("CrudCharts.Models.ProdutoTipo", "TpProdutoNavigation")
                        .WithMany("Produto")
                        .HasForeignKey("TpProduto")
                        .HasConstraintName("fk_produto_tp_produto");

                    b.HasOne("CrudCharts.Models.UnMedida", "UnArmazenagemNavigation")
                        .WithMany("ProdutoUnArmazenagemNavigation")
                        .HasForeignKey("UnArmazenagem")
                        .HasConstraintName("fk_produto_un_armazenagem");

                    b.HasOne("CrudCharts.Models.UnMedida", "UnCompraNavigation")
                        .WithMany("ProdutoUnCompraNavigation")
                        .HasForeignKey("UnCompra")
                        .HasConstraintName("fk_produto_un_compra");

                    b.HasOne("CrudCharts.Models.UnMedida", "UnMedidaNavigation")
                        .WithMany("ProdutoUnMedidaNavigation")
                        .HasForeignKey("UnMedida")
                        .HasConstraintName("fk_produto_un_medida");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoClassFiscalMva", b =>
                {
                    b.HasOne("CrudCharts.Models.ProdutoClassFiscal", "CdClassFiscalNavigation")
                        .WithMany("ProdutoClassFiscalMva")
                        .HasForeignKey("CdClassFiscal")
                        .HasConstraintName("fk_produto_class_fiscal_mva_ncm")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoCliente", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoCombustivel", "CdCombustivelNavigation")
                        .WithMany("ProdutoCliente")
                        .HasForeignKey("CdCombustivel")
                        .HasConstraintName("fk_produto_cliente_combustivel");

                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("ProdutoCliente")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_produto_cliente_produto");

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("ProdutoCliente")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_produto_cliente_cliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoFornecedor", b =>
                {
                    b.HasOne("CrudCharts.Models.FornecedorUnmedida", "IdUnimportacaoNavigation")
                        .WithMany("ProdutoFornecedor")
                        .HasForeignKey("IdUnimportacao")
                        .HasConstraintName("fk_proforn_fornun");
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoLote", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("ProdutoLote")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_produto_lote_produto");

                    b.HasOne("CrudCharts.Models.Nfec", "IdNfecNavigation")
                        .WithMany("ProdutoLote")
                        .HasForeignKey("IdNfec")
                        .HasConstraintName("fk_produto_lote_nfec")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoSerie", b =>
                {
                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("ProdutoSerie")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_produto_serie_produto");

                    b.HasOne("CrudCharts.Models.Nfei", "IdNfeiNavigation")
                        .WithMany("ProdutoSerie")
                        .HasForeignKey("IdNfei")
                        .HasConstraintName("fk_produto_serie_nfei")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculo", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoCombustivel", "CdCombustivelNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdCombustivel")
                        .HasConstraintName("fk_produto_veiculo_combustivel");

                    b.HasOne("CrudCharts.Models.VeiculoCor", "CdCorNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdCor")
                        .HasConstraintName("fk_produto_veiculo_cor");

                    b.HasOne("CrudCharts.Models.VeiculoEspecie", "CdEspecieNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdEspecie")
                        .HasConstraintName("fk_produto_veiculo_especie");

                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_veiculo_despesas_produto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.VeiculoTipo", "CdTipoNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdTipo")
                        .HasConstraintName("fk_produto_veiculo_tipo");

                    b.HasOne("CrudCharts.Models.Montadora", "Cd")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdFilial", "CdMontadora")
                        .HasConstraintName("fk_veiculo_cd_montadora")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Veiculo", "CdNavigation")
                        .WithMany("ProdutoVeiculo")
                        .HasForeignKey("CdFilial", "CdVeiculo")
                        .HasConstraintName("fk_veiculo_cd_veiculo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculosInjecao", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoInjecao", "CdInjecaoNavigation")
                        .WithMany("ProdutoVeiculosInjecao")
                        .HasForeignKey("CdInjecao")
                        .HasConstraintName("fk_prodinje_prodinje");

                    b.HasOne("CrudCharts.Models.Veiprod", "IdProdutoVeiculosNavigation")
                        .WithMany("ProdutoVeiculosInjecao")
                        .HasForeignKey("IdProdutoVeiculos")
                        .HasConstraintName("fk_prodinje_prodveic")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ProdutoVeiculosTransmissao", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoTransmissao", "CdTransmissaoNavigation")
                        .WithMany("ProdutoVeiculosTransmissao")
                        .HasForeignKey("CdTransmissao")
                        .HasConstraintName("fk_veictrans_prodtrans");

                    b.HasOne("CrudCharts.Models.Veiprod", "IdProdutoVeiculosNavigation")
                        .WithMany("ProdutoVeiculosTransmissao")
                        .HasForeignKey("IdProdutoVeiculos")
                        .HasConstraintName("fk_veictrans_prodveic")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Propriedade", b =>
                {
                    b.HasOne("CrudCharts.Models.Cidade", "CdCidadeNavigation")
                        .WithMany("Propriedade")
                        .HasForeignKey("CdCidade")
                        .HasConstraintName("fk_propriedade_cidade");

                    b.HasOne("CrudCharts.Models.Contato", "CdContatoNavigation")
                        .WithMany("Propriedade")
                        .HasForeignKey("CdContato")
                        .HasConstraintName("fk_propriedade_contato")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("Propriedade")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_propriedade_cliente");
                });

            modelBuilder.Entity("CrudCharts.Models.ProtocoloIcmsClassFiscal", b =>
                {
                    b.HasOne("CrudCharts.Models.ProdutoClassFiscal", "CdClassFiscalNavigation")
                        .WithMany("ProtocoloIcmsClassFiscal")
                        .HasForeignKey("CdClassFiscal")
                        .HasConstraintName("fk_protocolo_icms_class_fiscal");

                    b.HasOne("CrudCharts.Models.ProtocoloIcms", "IdProtocoloNavigation")
                        .WithMany("ProtocoloIcmsClassFiscal")
                        .HasForeignKey("IdProtocolo")
                        .HasConstraintName("fk_protocolo_icms_protocolo");
                });

            modelBuilder.Entity("CrudCharts.Models.ReceitaAgro", b =>
                {
                    b.HasOne("CrudCharts.Models.Propriedade", "CdPropriedadeNavigation")
                        .WithMany("ReceitaAgro")
                        .HasForeignKey("CdPropriedade")
                        .HasConstraintName("fk_receita_agro_propriedade")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Cliente", "Cd")
                        .WithMany("ReceitaAgro")
                        .HasForeignKey("CdFilial", "CdCliente")
                        .HasConstraintName("fk_receita_agro_cliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ReducaoZ", b =>
                {
                    b.HasOne("CrudCharts.Models.Impfiscal", "CdImpfiscalNavigation")
                        .WithMany("ReducaoZ")
                        .HasForeignKey("CdImpfiscal")
                        .HasConstraintName("fk_rez")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.ReducaoZTotalizador", b =>
                {
                    b.HasOne("CrudCharts.Models.ReducaoZ", "ReducaoZ")
                        .WithMany("ReducaoZTotalizador")
                        .HasForeignKey("CdImpfiscal", "DtReducao")
                        .HasConstraintName("fk_rzt_rz")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Situacao", b =>
                {
                    b.HasOne("CrudCharts.Models.Situacao", "CdPrecedenteNavigation")
                        .WithMany("InverseCdPrecedenteNavigation")
                        .HasForeignKey("CdPrecedente")
                        .HasConstraintName("fk_situacao_precedencia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.TabelaPrecoProduto", b =>
                {
                    b.HasOne("CrudCharts.Models.TabelaPreco", "CdTabelaPrecoNavigation")
                        .WithMany("TabelaPrecoProduto")
                        .HasForeignKey("CdTabelaPreco")
                        .HasConstraintName("fk_tabela_preco_produto_tabela");
                });

            modelBuilder.Entity("CrudCharts.Models.Tributacao", b =>
                {
                    b.HasOne("CrudCharts.Models.TributacaoGrupo", "IdTributacaoGrupoNavigation")
                        .WithMany("Tributacao")
                        .HasForeignKey("IdTributacaoGrupo")
                        .HasConstraintName("fk_tributacao_tributacao_grupo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.TributacaoAliquota", b =>
                {
                    b.HasOne("CrudCharts.Models.MensagemNota", "CdMensagemNavigation")
                        .WithMany("TributacaoAliquota")
                        .HasForeignKey("CdMensagem")
                        .HasConstraintName("fk_tributacao_aliquota_mensagem");

                    b.HasOne("CrudCharts.Models.Cst", "CstNavigation")
                        .WithMany("TributacaoAliquota")
                        .HasForeignKey("Cst")
                        .HasConstraintName("fk_tributacao_aliquota_1");

                    b.HasOne("CrudCharts.Models.Tributacao", "IdTributacaoNavigation")
                        .WithMany("TributacaoAliquota")
                        .HasForeignKey("IdTributacao")
                        .HasConstraintName("fk_tributacao_aliquota_tributac")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.TributacaoGrupoPisCofins", b =>
                {
                    b.HasOne("CrudCharts.Models.CstPisCofins", "CofinsCompraCstNavigation")
                        .WithMany("TributacaoGrupoPisCofinsCofinsCompraCstNavigation")
                        .HasForeignKey("CofinsCompraCst")
                        .HasConstraintName("fk_trib_compra_cst");

                    b.HasOne("CrudCharts.Models.CstPisCofins", "CofinsVendaCstNavigation")
                        .WithMany("TributacaoGrupoPisCofinsCofinsVendaCstNavigation")
                        .HasForeignKey("CofinsVendaCst")
                        .HasConstraintName("fk_trib_venda_cst");

                    b.HasOne("CrudCharts.Models.CstPisCofins", "PisCompraCstNavigation")
                        .WithMany("TributacaoGrupoPisCofinsPisCompraCstNavigation")
                        .HasForeignKey("PisCompraCst")
                        .HasConstraintName("fk_trib_pis_compra_cst");

                    b.HasOne("CrudCharts.Models.CstPisCofins", "PisVendaCstNavigation")
                        .WithMany("TributacaoGrupoPisCofinsPisVendaCstNavigation")
                        .HasForeignKey("PisVendaCst")
                        .HasConstraintName("fk_trib_cofins_venda_cst");
                });

            modelBuilder.Entity("CrudCharts.Models.UsuarioPerfil", b =>
                {
                    b.HasOne("CrudCharts.Models.PerfilAcesso", "CdPerfilNavigation")
                        .WithMany("UsuarioPerfil")
                        .HasForeignKey("CdPerfil")
                        .HasConstraintName("fk_usuario_perfil_perfil")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Usuario", "CdUsuarioNavigation")
                        .WithMany("UsuarioPerfil")
                        .HasForeignKey("CdUsuario")
                        .HasConstraintName("fk_usuario_perfil_usuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.Veiculo", b =>
                {
                    b.HasOne("CrudCharts.Models.Montadora", "Cd")
                        .WithMany("Veiculo")
                        .HasForeignKey("CdFilial", "CdMontadora")
                        .HasConstraintName("fk_veimontadora");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoDespesas", b =>
                {
                    b.HasOne("CrudCharts.Models.Nfei", "IdNfeiNavigation")
                        .WithMany("VeiculoDespesas")
                        .HasForeignKey("IdNfei")
                        .HasConstraintName("fk_veiculo_despesas_nfei")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CrudCharts.Models.Nfsc", "Nfsc")
                        .WithMany("VeiculoDespesas")
                        .HasForeignKey("CdFilial", "DctoVenda")
                        .HasConstraintName("fk_veiculo_despesas_nfs")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloComplemento", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoComplemento", "CdComplementoNavigation")
                        .WithMany("VeiculoModeloComplemento")
                        .HasForeignKey("CdComplemento")
                        .HasConstraintName("fk_veic_compl_mod_complemento");

                    b.HasOne("CrudCharts.Models.Veiculo", "Cd")
                        .WithMany("VeiculoModeloComplemento")
                        .HasForeignKey("CdFilial", "CdModelo")
                        .HasConstraintName("fk_veic_compl_mod_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloInjecao", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoInjecao", "CdInjecaoNavigation")
                        .WithMany("VeiculoModeloInjecao")
                        .HasForeignKey("CdInjecao")
                        .HasConstraintName("fk_veic_inj_mod_injecao");

                    b.HasOne("CrudCharts.Models.Veiculo", "Cd")
                        .WithMany("VeiculoModeloInjecao")
                        .HasForeignKey("CdFilial", "CdModelo")
                        .HasConstraintName("fk_veic_inj_mod_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloMotor", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoMotor", "CdMotorNavigation")
                        .WithMany("VeiculoModeloMotor")
                        .HasForeignKey("CdMotor")
                        .HasConstraintName("fk_veic_mot_mod_injecao");

                    b.HasOne("CrudCharts.Models.Veiculo", "Cd")
                        .WithMany("VeiculoModeloMotor")
                        .HasForeignKey("CdFilial", "CdModelo")
                        .HasConstraintName("fk_veic_mot_mod_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.VeiculoModeloTransmissao", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoTransmissao", "CdTransmissaoNavigation")
                        .WithMany("VeiculoModeloTransmissao")
                        .HasForeignKey("CdTransmissao")
                        .HasConstraintName("fk_veic_trans_mod_injecao");

                    b.HasOne("CrudCharts.Models.Veiculo", "Cd")
                        .WithMany("VeiculoModeloTransmissao")
                        .HasForeignKey("CdFilial", "CdModelo")
                        .HasConstraintName("fk_veic_trans_mod_veiculo");
                });

            modelBuilder.Entity("CrudCharts.Models.Veiprod", b =>
                {
                    b.HasOne("CrudCharts.Models.VeiculoComplemento", "CdComplementoNavigation")
                        .WithMany("Veiprod")
                        .HasForeignKey("CdComplemento")
                        .HasConstraintName("fk_veiprod_complemento");

                    b.HasOne("CrudCharts.Models.VeiculoMotor", "CdMotorNavigation")
                        .WithMany("Veiprod")
                        .HasForeignKey("CdMotor")
                        .HasConstraintName("fk_veiprod_motor");

                    b.HasOne("CrudCharts.Models.Produto", "CdProdutoNavigation")
                        .WithMany("Veiprod")
                        .HasForeignKey("CdProduto")
                        .HasConstraintName("fk_veiproduto");

                    b.HasOne("CrudCharts.Models.Montadora", "Cd")
                        .WithMany("Veiprod")
                        .HasForeignKey("CdFilial", "CdMontadora")
                        .HasConstraintName("fk_veiprod_montadora");

                    b.HasOne("CrudCharts.Models.Veiculo", "CdNavigation")
                        .WithMany("Veiprod")
                        .HasForeignKey("CdFilial", "CdVeiculo")
                        .HasConstraintName("fk_veicproduto");
                });
#pragma warning restore 612, 618
        }
    }
}
